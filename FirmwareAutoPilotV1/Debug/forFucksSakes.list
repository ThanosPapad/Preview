
forFucksSakes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075f8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000060c  08007708  08007708  00008708  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d14  08007d14  000091e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007d14  08007d14  00008d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d1c  08007d1c  000091e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d1c  08007d1c  00008d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d20  08007d20  00008d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007d24  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  200001e0  08007f04  000091e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000680  08007f04  00009680  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2c2  00000000  00000000  00009209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dd2  00000000  00000000  000144cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  000162a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008c3  00000000  00000000  00016de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185ae  00000000  00000000  000176ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db49  00000000  00000000  0002fc59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008790e  00000000  00000000  0003d7a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c50b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ec0  00000000  00000000  000c50f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000c8fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080076f0 	.word	0x080076f0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080076f0 	.word	0x080076f0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	4619      	mov	r1, r3
 8000a96:	2007      	movs	r0, #7
 8000a98:	f000 f99e 	bl	8000dd8 <bno055_writeData>
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	203d      	movs	r0, #61	@ 0x3d
 8000ab4:	f000 f990 	bl	8000dd8 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d103      	bne.n	8000ac6 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8000abe:	2013      	movs	r0, #19
 8000ac0:	f000 f97e 	bl	8000dc0 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8000ac4:	e002      	b.n	8000acc <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8000ac6:	2007      	movs	r0, #7
 8000ac8:	f000 f97a 	bl	8000dc0 <bno055_delay>
}
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f7ff ffe3 	bl	8000aa4 <bno055_setOperationMode>
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8000ae6:	200c      	movs	r0, #12
 8000ae8:	f7ff ffdc 	bl	8000aa4 <bno055_setOperationMode>
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8000af4:	2120      	movs	r1, #32
 8000af6:	203f      	movs	r0, #63	@ 0x3f
 8000af8:	f000 f96e 	bl	8000dd8 <bno055_writeData>
  bno055_delay(700);
 8000afc:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8000b00:	f000 f95e 	bl	8000dc0 <bno055_delay>
}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
  bno055_reset();
 8000b0e:	f7ff ffef 	bl	8000af0 <bno055_reset>

  uint8_t id = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8000b16:	1dfb      	adds	r3, r7, #7
 8000b18:	2201      	movs	r2, #1
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f000 fa47 	bl	8000fb0 <bno055_readData>
  if (id != BNO055_ID) {
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	2ba0      	cmp	r3, #160	@ 0xa0
 8000b26:	d004      	beq.n	8000b32 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4809      	ldr	r0, [pc, #36]	@ (8000b54 <bno055_setup+0x4c>)
 8000b2e:	f004 feb7 	bl	80058a0 <iprintf>
  }
  bno055_setPage(0);
 8000b32:	2000      	movs	r0, #0
 8000b34:	f7ff ffa8 	bl	8000a88 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8000b38:	2100      	movs	r1, #0
 8000b3a:	203f      	movs	r0, #63	@ 0x3f
 8000b3c:	f000 f94c 	bl	8000dd8 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8000b40:	f7ff ffc8 	bl	8000ad4 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8000b44:	200a      	movs	r0, #10
 8000b46:	f000 f93b 	bl	8000dc0 <bno055_delay>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	08007708 	.word	0x08007708

08000b58 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8000b58:	b5b0      	push	{r4, r5, r7, lr}
 8000b5a:	b08e      	sub	sp, #56	@ 0x38
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	70fb      	strb	r3, [r7, #3]
  bno055_setPage(0);
 8000b64:	2000      	movs	r0, #0
 8000b66:	f7ff ff8f 	bl	8000a88 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8000b6a:	78fb      	ldrb	r3, [r7, #3]
 8000b6c:	2b20      	cmp	r3, #32
 8000b6e:	d107      	bne.n	8000b80 <bno055_getVector+0x28>
    bno055_readData(vec, buffer, 8);
 8000b70:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000b74:	78fb      	ldrb	r3, [r7, #3]
 8000b76:	2208      	movs	r2, #8
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 fa19 	bl	8000fb0 <bno055_readData>
 8000b7e:	e006      	b.n	8000b8e <bno055_getVector+0x36>
  else
    bno055_readData(vec, buffer, 6);
 8000b80:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000b84:	78fb      	ldrb	r3, [r7, #3]
 8000b86:	2206      	movs	r2, #6
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 fa11 	bl	8000fb0 <bno055_readData>

  double scale = 1;
 8000b8e:	f04f 0200 	mov.w	r2, #0
 8000b92:	4b77      	ldr	r3, [pc, #476]	@ (8000d70 <bno055_getVector+0x218>)
 8000b94:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8000b98:	78fb      	ldrb	r3, [r7, #3]
 8000b9a:	2b0e      	cmp	r3, #14
 8000b9c:	d109      	bne.n	8000bb2 <bno055_getVector+0x5a>
    scale = magScale;
 8000b9e:	4b75      	ldr	r3, [pc, #468]	@ (8000d74 <bno055_getVector+0x21c>)
 8000ba0:	881b      	ldrh	r3, [r3, #0]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff fc1e 	bl	80003e4 <__aeabi_ui2d>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	460b      	mov	r3, r1
 8000bac:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8000bb0:	e038      	b.n	8000c24 <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8000bb2:	78fb      	ldrb	r3, [r7, #3]
 8000bb4:	2b08      	cmp	r3, #8
 8000bb6:	d005      	beq.n	8000bc4 <bno055_getVector+0x6c>
 8000bb8:	78fb      	ldrb	r3, [r7, #3]
 8000bba:	2b28      	cmp	r3, #40	@ 0x28
 8000bbc:	d002      	beq.n	8000bc4 <bno055_getVector+0x6c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8000bbe:	78fb      	ldrb	r3, [r7, #3]
 8000bc0:	2b2e      	cmp	r3, #46	@ 0x2e
 8000bc2:	d109      	bne.n	8000bd8 <bno055_getVector+0x80>
    scale = accelScale;
 8000bc4:	4b6c      	ldr	r3, [pc, #432]	@ (8000d78 <bno055_getVector+0x220>)
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fc0b 	bl	80003e4 <__aeabi_ui2d>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8000bd6:	e025      	b.n	8000c24 <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8000bd8:	78fb      	ldrb	r3, [r7, #3]
 8000bda:	2b14      	cmp	r3, #20
 8000bdc:	d109      	bne.n	8000bf2 <bno055_getVector+0x9a>
    scale = angularRateScale;
 8000bde:	4b67      	ldr	r3, [pc, #412]	@ (8000d7c <bno055_getVector+0x224>)
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fbfe 	bl	80003e4 <__aeabi_ui2d>
 8000be8:	4602      	mov	r2, r0
 8000bea:	460b      	mov	r3, r1
 8000bec:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8000bf0:	e018      	b.n	8000c24 <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_EULER) {
 8000bf2:	78fb      	ldrb	r3, [r7, #3]
 8000bf4:	2b1a      	cmp	r3, #26
 8000bf6:	d109      	bne.n	8000c0c <bno055_getVector+0xb4>
    scale = eulerScale;
 8000bf8:	4b61      	ldr	r3, [pc, #388]	@ (8000d80 <bno055_getVector+0x228>)
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fbf1 	bl	80003e4 <__aeabi_ui2d>
 8000c02:	4602      	mov	r2, r0
 8000c04:	460b      	mov	r3, r1
 8000c06:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
 8000c0a:	e00b      	b.n	8000c24 <bno055_getVector+0xcc>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8000c0c:	78fb      	ldrb	r3, [r7, #3]
 8000c0e:	2b20      	cmp	r3, #32
 8000c10:	d108      	bne.n	8000c24 <bno055_getVector+0xcc>
    scale = quaScale;
 8000c12:	4b5c      	ldr	r3, [pc, #368]	@ (8000d84 <bno055_getVector+0x22c>)
 8000c14:	881b      	ldrh	r3, [r3, #0]
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fbe4 	bl	80003e4 <__aeabi_ui2d>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	460b      	mov	r3, r1
 8000c20:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8000c24:	f107 0308 	add.w	r3, r7, #8
 8000c28:	2220      	movs	r2, #32
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f004 ff7f 	bl	8005b30 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8000c32:	78fb      	ldrb	r3, [r7, #3]
 8000c34:	2b20      	cmp	r3, #32
 8000c36:	d150      	bne.n	8000cda <bno055_getVector+0x182>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000c38:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000c3c:	021b      	lsls	r3, r3, #8
 8000c3e:	b21a      	sxth	r2, r3
 8000c40:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000c44:	b21b      	sxth	r3, r3
 8000c46:	4313      	orrs	r3, r2
 8000c48:	b21b      	sxth	r3, r3
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fbda 	bl	8000404 <__aeabi_i2d>
 8000c50:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000c54:	f7ff fd6a 	bl	800072c <__aeabi_ddiv>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8000c60:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000c64:	021b      	lsls	r3, r3, #8
 8000c66:	b21a      	sxth	r2, r3
 8000c68:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000c6c:	b21b      	sxth	r3, r3
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	b21b      	sxth	r3, r3
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fbc6 	bl	8000404 <__aeabi_i2d>
 8000c78:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000c7c:	f7ff fd56 	bl	800072c <__aeabi_ddiv>
 8000c80:	4602      	mov	r2, r0
 8000c82:	460b      	mov	r3, r1
 8000c84:	e9c7 2304 	strd	r2, r3, [r7, #16]
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000c88:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000c8c:	021b      	lsls	r3, r3, #8
 8000c8e:	b21a      	sxth	r2, r3
 8000c90:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000c94:	b21b      	sxth	r3, r3
 8000c96:	4313      	orrs	r3, r2
 8000c98:	b21b      	sxth	r3, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fbb2 	bl	8000404 <__aeabi_i2d>
 8000ca0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000ca4:	f7ff fd42 	bl	800072c <__aeabi_ddiv>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	460b      	mov	r3, r1
 8000cac:	e9c7 2306 	strd	r2, r3, [r7, #24]
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8000cb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cb4:	021b      	lsls	r3, r3, #8
 8000cb6:	b21a      	sxth	r2, r3
 8000cb8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000cbc:	b21b      	sxth	r3, r3
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	b21b      	sxth	r3, r3
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fb9e 	bl	8000404 <__aeabi_i2d>
 8000cc8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000ccc:	f7ff fd2e 	bl	800072c <__aeabi_ddiv>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8000cd8:	e03b      	b.n	8000d52 <bno055_getVector+0x1fa>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8000cda:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000cde:	021b      	lsls	r3, r3, #8
 8000ce0:	b21a      	sxth	r2, r3
 8000ce2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000ce6:	b21b      	sxth	r3, r3
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	b21b      	sxth	r3, r3
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fb89 	bl	8000404 <__aeabi_i2d>
 8000cf2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000cf6:	f7ff fd19 	bl	800072c <__aeabi_ddiv>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	e9c7 2304 	strd	r2, r3, [r7, #16]
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8000d02:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000d06:	021b      	lsls	r3, r3, #8
 8000d08:	b21a      	sxth	r2, r3
 8000d0a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8000d0e:	b21b      	sxth	r3, r3
 8000d10:	4313      	orrs	r3, r2
 8000d12:	b21b      	sxth	r3, r3
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fb75 	bl	8000404 <__aeabi_i2d>
 8000d1a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000d1e:	f7ff fd05 	bl	800072c <__aeabi_ddiv>
 8000d22:	4602      	mov	r2, r0
 8000d24:	460b      	mov	r3, r1
 8000d26:	e9c7 2306 	strd	r2, r3, [r7, #24]
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8000d2a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000d2e:	021b      	lsls	r3, r3, #8
 8000d30:	b21a      	sxth	r2, r3
 8000d32:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000d36:	b21b      	sxth	r3, r3
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	b21b      	sxth	r3, r3
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fb61 	bl	8000404 <__aeabi_i2d>
 8000d42:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000d46:	f7ff fcf1 	bl	800072c <__aeabi_ddiv>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	e9c7 2308 	strd	r2, r3, [r7, #32]
  }

  return xyz;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	461d      	mov	r5, r3
 8000d56:	f107 0408 	add.w	r4, r7, #8
 8000d5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d5e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d62:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	3738      	adds	r7, #56	@ 0x38
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bdb0      	pop	{r4, r5, r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	3ff00000 	.word	0x3ff00000
 8000d74:	20000006 	.word	0x20000006
 8000d78:	20000000 	.word	0x20000000
 8000d7c:	20000002 	.word	0x20000002
 8000d80:	20000004 	.word	0x20000004
 8000d84:	20000008 	.word	0x20000008

08000d88 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  return bno055_getVector(BNO055_VECTOR_EULER);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	211a      	movs	r1, #26
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fedf 	bl	8000b58 <bno055_getVector>
}
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8000dac:	4a03      	ldr	r2, [pc, #12]	@ (8000dbc <bno055_assignI2C+0x18>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6013      	str	r3, [r2, #0]
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr
 8000dbc:	200001fc 	.word	0x200001fc

08000dc0 <bno055_delay>:

void bno055_delay(int time) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 fda0 	bl	8001910 <HAL_Delay>
#endif
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af02      	add	r7, sp, #8
 8000dde:	4603      	mov	r3, r0
 8000de0:	460a      	mov	r2, r1
 8000de2:	71fb      	strb	r3, [r7, #7]
 8000de4:	4613      	mov	r3, r2
 8000de6:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	733b      	strb	r3, [r7, #12]
 8000dec:	79bb      	ldrb	r3, [r7, #6]
 8000dee:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8000df0:	4b5a      	ldr	r3, [pc, #360]	@ (8000f5c <bno055_writeData+0x184>)
 8000df2:	6818      	ldr	r0, [r3, #0]
 8000df4:	f107 020c 	add.w	r2, r7, #12
 8000df8:	230a      	movs	r3, #10
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	2150      	movs	r1, #80	@ 0x50
 8000e00:	f001 fc5c 	bl	80026bc <HAL_I2C_Master_Transmit>
 8000e04:	4603      	mov	r3, r0
 8000e06:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8000e08:	7dfb      	ldrb	r3, [r7, #23]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f000 80a0 	beq.w	8000f50 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8000e10:	7dfb      	ldrb	r3, [r7, #23]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d103      	bne.n	8000e1e <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8000e16:	4852      	ldr	r0, [pc, #328]	@ (8000f60 <bno055_writeData+0x188>)
 8000e18:	f004 fdaa 	bl	8005970 <puts>
 8000e1c:	e012      	b.n	8000e44 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8000e1e:	7dfb      	ldrb	r3, [r7, #23]
 8000e20:	2b03      	cmp	r3, #3
 8000e22:	d103      	bne.n	8000e2c <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8000e24:	484f      	ldr	r0, [pc, #316]	@ (8000f64 <bno055_writeData+0x18c>)
 8000e26:	f004 fda3 	bl	8005970 <puts>
 8000e2a:	e00b      	b.n	8000e44 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8000e2c:	7dfb      	ldrb	r3, [r7, #23]
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d103      	bne.n	8000e3a <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8000e32:	484d      	ldr	r0, [pc, #308]	@ (8000f68 <bno055_writeData+0x190>)
 8000e34:	f004 fd9c 	bl	8005970 <puts>
 8000e38:	e004      	b.n	8000e44 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8000e3a:	7dfb      	ldrb	r3, [r7, #23]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	484b      	ldr	r0, [pc, #300]	@ (8000f6c <bno055_writeData+0x194>)
 8000e40:	f004 fd2e 	bl	80058a0 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8000e44:	4b45      	ldr	r3, [pc, #276]	@ (8000f5c <bno055_writeData+0x184>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f001 ffae 	bl	8002daa <HAL_I2C_GetError>
 8000e4e:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d07e      	beq.n	8000f54 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d103      	bne.n	8000e64 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8000e5c:	4844      	ldr	r0, [pc, #272]	@ (8000f70 <bno055_writeData+0x198>)
 8000e5e:	f004 fd87 	bl	8005970 <puts>
 8000e62:	e021      	b.n	8000ea8 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d103      	bne.n	8000e72 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8000e6a:	4842      	ldr	r0, [pc, #264]	@ (8000f74 <bno055_writeData+0x19c>)
 8000e6c:	f004 fd80 	bl	8005970 <puts>
 8000e70:	e01a      	b.n	8000ea8 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	2b04      	cmp	r3, #4
 8000e76:	d103      	bne.n	8000e80 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8000e78:	483f      	ldr	r0, [pc, #252]	@ (8000f78 <bno055_writeData+0x1a0>)
 8000e7a:	f004 fd79 	bl	8005970 <puts>
 8000e7e:	e013      	b.n	8000ea8 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	2b08      	cmp	r3, #8
 8000e84:	d103      	bne.n	8000e8e <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8000e86:	483d      	ldr	r0, [pc, #244]	@ (8000f7c <bno055_writeData+0x1a4>)
 8000e88:	f004 fd72 	bl	8005970 <puts>
 8000e8c:	e00c      	b.n	8000ea8 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	2b10      	cmp	r3, #16
 8000e92:	d103      	bne.n	8000e9c <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8000e94:	483a      	ldr	r0, [pc, #232]	@ (8000f80 <bno055_writeData+0x1a8>)
 8000e96:	f004 fd6b 	bl	8005970 <puts>
 8000e9a:	e005      	b.n	8000ea8 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	2b20      	cmp	r3, #32
 8000ea0:	d102      	bne.n	8000ea8 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8000ea2:	4838      	ldr	r0, [pc, #224]	@ (8000f84 <bno055_writeData+0x1ac>)
 8000ea4:	f004 fd64 	bl	8005970 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8000ea8:	4b2c      	ldr	r3, [pc, #176]	@ (8000f5c <bno055_writeData+0x184>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f001 ff6f 	bl	8002d90 <HAL_I2C_GetState>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d103      	bne.n	8000ec4 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000ebc:	4832      	ldr	r0, [pc, #200]	@ (8000f88 <bno055_writeData+0x1b0>)
 8000ebe:	f004 fd57 	bl	8005970 <puts>
 8000ec2:	e048      	b.n	8000f56 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	2b20      	cmp	r3, #32
 8000ec8:	d103      	bne.n	8000ed2 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000eca:	482f      	ldr	r0, [pc, #188]	@ (8000f88 <bno055_writeData+0x1b0>)
 8000ecc:	f004 fd50 	bl	8005970 <puts>
 8000ed0:	e041      	b.n	8000f56 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	2b24      	cmp	r3, #36	@ 0x24
 8000ed6:	d103      	bne.n	8000ee0 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8000ed8:	482c      	ldr	r0, [pc, #176]	@ (8000f8c <bno055_writeData+0x1b4>)
 8000eda:	f004 fd49 	bl	8005970 <puts>
 8000ede:	e03a      	b.n	8000f56 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	2b21      	cmp	r3, #33	@ 0x21
 8000ee4:	d103      	bne.n	8000eee <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8000ee6:	482a      	ldr	r0, [pc, #168]	@ (8000f90 <bno055_writeData+0x1b8>)
 8000ee8:	f004 fd42 	bl	8005970 <puts>
 8000eec:	e033      	b.n	8000f56 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
 8000ef0:	2b22      	cmp	r3, #34	@ 0x22
 8000ef2:	d103      	bne.n	8000efc <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8000ef4:	4827      	ldr	r0, [pc, #156]	@ (8000f94 <bno055_writeData+0x1bc>)
 8000ef6:	f004 fd3b 	bl	8005970 <puts>
 8000efa:	e02c      	b.n	8000f56 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
 8000efe:	2b28      	cmp	r3, #40	@ 0x28
 8000f00:	d103      	bne.n	8000f0a <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8000f02:	4825      	ldr	r0, [pc, #148]	@ (8000f98 <bno055_writeData+0x1c0>)
 8000f04:	f004 fd34 	bl	8005970 <puts>
 8000f08:	e025      	b.n	8000f56 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	2b29      	cmp	r3, #41	@ 0x29
 8000f0e:	d103      	bne.n	8000f18 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8000f10:	4822      	ldr	r0, [pc, #136]	@ (8000f9c <bno055_writeData+0x1c4>)
 8000f12:	f004 fd2d 	bl	8005970 <puts>
 8000f16:	e01e      	b.n	8000f56 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8000f1c:	d103      	bne.n	8000f26 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8000f1e:	4820      	ldr	r0, [pc, #128]	@ (8000fa0 <bno055_writeData+0x1c8>)
 8000f20:	f004 fd26 	bl	8005970 <puts>
 8000f24:	e017      	b.n	8000f56 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	2b60      	cmp	r3, #96	@ 0x60
 8000f2a:	d103      	bne.n	8000f34 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8000f2c:	481d      	ldr	r0, [pc, #116]	@ (8000fa4 <bno055_writeData+0x1cc>)
 8000f2e:	f004 fd1f 	bl	8005970 <puts>
 8000f32:	e010      	b.n	8000f56 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	2ba0      	cmp	r3, #160	@ 0xa0
 8000f38:	d103      	bne.n	8000f42 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8000f3a:	481b      	ldr	r0, [pc, #108]	@ (8000fa8 <bno055_writeData+0x1d0>)
 8000f3c:	f004 fd18 	bl	8005970 <puts>
 8000f40:	e009      	b.n	8000f56 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	2be0      	cmp	r3, #224	@ 0xe0
 8000f46:	d106      	bne.n	8000f56 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8000f48:	4818      	ldr	r0, [pc, #96]	@ (8000fac <bno055_writeData+0x1d4>)
 8000f4a:	f004 fd11 	bl	8005970 <puts>
 8000f4e:	e002      	b.n	8000f56 <bno055_writeData+0x17e>
    return;
 8000f50:	bf00      	nop
 8000f52:	e000      	b.n	8000f56 <bno055_writeData+0x17e>
    return;
 8000f54:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	200001fc 	.word	0x200001fc
 8000f60:	08007744 	.word	0x08007744
 8000f64:	08007768 	.word	0x08007768
 8000f68:	08007790 	.word	0x08007790
 8000f6c:	080077b4 	.word	0x080077b4
 8000f70:	080077cc 	.word	0x080077cc
 8000f74:	080077e0 	.word	0x080077e0
 8000f78:	080077f4 	.word	0x080077f4
 8000f7c:	08007808 	.word	0x08007808
 8000f80:	0800781c 	.word	0x0800781c
 8000f84:	08007830 	.word	0x08007830
 8000f88:	08007848 	.word	0x08007848
 8000f8c:	08007860 	.word	0x08007860
 8000f90:	08007874 	.word	0x08007874
 8000f94:	0800788c 	.word	0x0800788c
 8000f98:	080078a4 	.word	0x080078a4
 8000f9c:	080078bc 	.word	0x080078bc
 8000fa0:	080078dc 	.word	0x080078dc
 8000fa4:	080078fc 	.word	0x080078fc
 8000fa8:	08007914 	.word	0x08007914
 8000fac:	0800792c 	.word	0x0800792c

08000fb0 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af02      	add	r7, sp, #8
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	6039      	str	r1, [r7, #0]
 8000fba:	71fb      	strb	r3, [r7, #7]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <bno055_readData+0x40>)
 8000fc2:	6818      	ldr	r0, [r3, #0]
 8000fc4:	1dfa      	adds	r2, r7, #7
 8000fc6:	2364      	movs	r3, #100	@ 0x64
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2301      	movs	r3, #1
 8000fcc:	2150      	movs	r1, #80	@ 0x50
 8000fce:	f001 fb75 	bl	80026bc <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8000fd2:	4b07      	ldr	r3, [pc, #28]	@ (8000ff0 <bno055_readData+0x40>)
 8000fd4:	6818      	ldr	r0, [r3, #0]
 8000fd6:	79bb      	ldrb	r3, [r7, #6]
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	2264      	movs	r2, #100	@ 0x64
 8000fdc:	9200      	str	r2, [sp, #0]
 8000fde:	683a      	ldr	r2, [r7, #0]
 8000fe0:	2150      	movs	r1, #80	@ 0x50
 8000fe2:	f001 fc69 	bl	80028b8 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200001fc 	.word	0x200001fc

08000ff4 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN PTD */
//GPS IMPLEMENTATION START
uint8_t flag = 0;
uint8_t RxData[512];
// this interrupts changes flag to 1 as soon as the uint8_t buff[300] is full
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]

	flag = 1;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	@ (800100c <HAL_UART_RxCpltCallback+0x18>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	701a      	strb	r2, [r3, #0]

}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr
 800100c:	20000200 	.word	0x20000200

08001010 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	b29a      	uxth	r2, r3
 8001020:	f04f 33ff 	mov.w	r3, #4294967295
 8001024:	68b9      	ldr	r1, [r7, #8]
 8001026:	4804      	ldr	r0, [pc, #16]	@ (8001038 <_write+0x28>)
 8001028:	f002 feb0 	bl	8003d8c <HAL_UART_Transmit>
	return len;
 800102c:	687b      	ldr	r3, [r7, #4]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200004a0 	.word	0x200004a0

0800103c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800103c:	b5b0      	push	{r4, r5, r7, lr}
 800103e:	b08c      	sub	sp, #48	@ 0x30
 8001040:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001042:	f000 fc03 	bl	800184c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001046:	f000 f851 	bl	80010ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104a:	f000 f931 	bl	80012b0 <MX_GPIO_Init>
  MX_DMA_Init();
 800104e:	f000 f911 	bl	8001274 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001052:	f000 f8e5 	bl	8001220 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001056:	f000 f88b 	bl	8001170 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800105a:	f000 f8b7 	bl	80011cc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  bno055_assignI2C(&hi2c1);
 800105e:	481c      	ldr	r0, [pc, #112]	@ (80010d0 <main+0x94>)
 8001060:	f7ff fea0 	bl	8000da4 <bno055_assignI2C>
  bno055_setup();
 8001064:	f7ff fd50 	bl	8000b08 <bno055_setup>
  bno055_setOperationModeNDOF();
 8001068:	f7ff fd3b 	bl	8000ae2 <bno055_setOperationModeNDOF>
  HAL_UART_Receive_DMA(&huart1, RxData, 124);
 800106c:	227c      	movs	r2, #124	@ 0x7c
 800106e:	4919      	ldr	r1, [pc, #100]	@ (80010d4 <main+0x98>)
 8001070:	4819      	ldr	r0, [pc, #100]	@ (80010d8 <main+0x9c>)
 8001072:	f002 ff0e 	bl	8003e92 <HAL_UART_Receive_DMA>
  //GPS IMPLEMENTATION START
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	2120      	movs	r1, #32
 800107a:	4818      	ldr	r0, [pc, #96]	@ (80010dc <main+0xa0>)
 800107c:	f001 f9a0 	bl	80023c0 <HAL_GPIO_WritePin>
  HAL_Delay(350);
 8001080:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 8001084:	f000 fc44 	bl	8001910 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001088:	2201      	movs	r2, #1
 800108a:	2120      	movs	r1, #32
 800108c:	4813      	ldr	r0, [pc, #76]	@ (80010dc <main+0xa0>)
 800108e:	f001 f997 	bl	80023c0 <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		// LED
		bno055_vector_t v = bno055_getVectorEuler();
 8001092:	463b      	mov	r3, r7
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fe77 	bl	8000d88 <bno055_getVectorEuler>
		printf("Heading: %.2f Roll: %.2f Pitch: %.2f\r\n", v.x, v.y, v.z);
 800109a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800109e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80010a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80010aa:	e9cd 2300 	strd	r2, r3, [sp]
 80010ae:	4622      	mov	r2, r4
 80010b0:	462b      	mov	r3, r5
 80010b2:	480b      	ldr	r0, [pc, #44]	@ (80010e0 <main+0xa4>)
 80010b4:	f004 fbf4 	bl	80058a0 <iprintf>
		if (flag == 1){
 80010b8:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <main+0xa8>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d103      	bne.n	80010c8 <main+0x8c>
			printf("\n%s\n",RxData);
 80010c0:	4904      	ldr	r1, [pc, #16]	@ (80010d4 <main+0x98>)
 80010c2:	4809      	ldr	r0, [pc, #36]	@ (80010e8 <main+0xac>)
 80010c4:	f004 fbec 	bl	80058a0 <iprintf>
		}
		HAL_Delay(200);
 80010c8:	20c8      	movs	r0, #200	@ 0xc8
 80010ca:	f000 fc21 	bl	8001910 <HAL_Delay>
  {
 80010ce:	e7e0      	b.n	8001092 <main+0x56>
 80010d0:	20000404 	.word	0x20000404
 80010d4:	20000204 	.word	0x20000204
 80010d8:	20000458 	.word	0x20000458
 80010dc:	40010800 	.word	0x40010800
 80010e0:	08007944 	.word	0x08007944
 80010e4:	20000200 	.word	0x20000200
 80010e8:	0800796c 	.word	0x0800796c

080010ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b090      	sub	sp, #64	@ 0x40
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 0318 	add.w	r3, r7, #24
 80010f6:	2228      	movs	r2, #40	@ 0x28
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f004 fd18 	bl	8005b30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
 800110c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800110e:	2302      	movs	r3, #2
 8001110:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001112:	2301      	movs	r3, #1
 8001114:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001116:	2310      	movs	r3, #16
 8001118:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800111a:	2302      	movs	r3, #2
 800111c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800111e:	2300      	movs	r3, #0
 8001120:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001122:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001126:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001128:	f107 0318 	add.w	r3, r7, #24
 800112c:	4618      	mov	r0, r3
 800112e:	f002 f9cd 	bl	80034cc <HAL_RCC_OscConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001138:	f000 f93c 	bl	80013b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113c:	230f      	movs	r3, #15
 800113e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001140:	2302      	movs	r3, #2
 8001142:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001148:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800114c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2102      	movs	r1, #2
 8001156:	4618      	mov	r0, r3
 8001158:	f002 fc3a 	bl	80039d0 <HAL_RCC_ClockConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001162:	f000 f927 	bl	80013b4 <Error_Handler>
  }
}
 8001166:	bf00      	nop
 8001168:	3740      	adds	r7, #64	@ 0x40
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001174:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <MX_I2C1_Init+0x50>)
 8001176:	4a13      	ldr	r2, [pc, #76]	@ (80011c4 <MX_I2C1_Init+0x54>)
 8001178:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800117a:	4b11      	ldr	r3, [pc, #68]	@ (80011c0 <MX_I2C1_Init+0x50>)
 800117c:	4a12      	ldr	r2, [pc, #72]	@ (80011c8 <MX_I2C1_Init+0x58>)
 800117e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001180:	4b0f      	ldr	r3, [pc, #60]	@ (80011c0 <MX_I2C1_Init+0x50>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001186:	4b0e      	ldr	r3, [pc, #56]	@ (80011c0 <MX_I2C1_Init+0x50>)
 8001188:	2200      	movs	r2, #0
 800118a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800118c:	4b0c      	ldr	r3, [pc, #48]	@ (80011c0 <MX_I2C1_Init+0x50>)
 800118e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001192:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001194:	4b0a      	ldr	r3, [pc, #40]	@ (80011c0 <MX_I2C1_Init+0x50>)
 8001196:	2200      	movs	r2, #0
 8001198:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800119a:	4b09      	ldr	r3, [pc, #36]	@ (80011c0 <MX_I2C1_Init+0x50>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011a0:	4b07      	ldr	r3, [pc, #28]	@ (80011c0 <MX_I2C1_Init+0x50>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011a6:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <MX_I2C1_Init+0x50>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011ac:	4804      	ldr	r0, [pc, #16]	@ (80011c0 <MX_I2C1_Init+0x50>)
 80011ae:	f001 f941 	bl	8002434 <HAL_I2C_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011b8:	f000 f8fc 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011bc:	bf00      	nop
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000404 	.word	0x20000404
 80011c4:	40005400 	.word	0x40005400
 80011c8:	000186a0 	.word	0x000186a0

080011cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011d0:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <MX_USART1_UART_Init+0x4c>)
 80011d2:	4a12      	ldr	r2, [pc, #72]	@ (800121c <MX_USART1_UART_Init+0x50>)
 80011d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80011d6:	4b10      	ldr	r3, [pc, #64]	@ (8001218 <MX_USART1_UART_Init+0x4c>)
 80011d8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80011dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011de:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <MX_USART1_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <MX_USART1_UART_Init+0x4c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <MX_USART1_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011f0:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <MX_USART1_UART_Init+0x4c>)
 80011f2:	220c      	movs	r2, #12
 80011f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f6:	4b08      	ldr	r3, [pc, #32]	@ (8001218 <MX_USART1_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011fc:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <MX_USART1_UART_Init+0x4c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001202:	4805      	ldr	r0, [pc, #20]	@ (8001218 <MX_USART1_UART_Init+0x4c>)
 8001204:	f002 fd72 	bl	8003cec <HAL_UART_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800120e:	f000 f8d1 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000458 	.word	0x20000458
 800121c:	40013800 	.word	0x40013800

08001220 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001224:	4b11      	ldr	r3, [pc, #68]	@ (800126c <MX_USART2_UART_Init+0x4c>)
 8001226:	4a12      	ldr	r2, [pc, #72]	@ (8001270 <MX_USART2_UART_Init+0x50>)
 8001228:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800122a:	4b10      	ldr	r3, [pc, #64]	@ (800126c <MX_USART2_UART_Init+0x4c>)
 800122c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001230:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001232:	4b0e      	ldr	r3, [pc, #56]	@ (800126c <MX_USART2_UART_Init+0x4c>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001238:	4b0c      	ldr	r3, [pc, #48]	@ (800126c <MX_USART2_UART_Init+0x4c>)
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800123e:	4b0b      	ldr	r3, [pc, #44]	@ (800126c <MX_USART2_UART_Init+0x4c>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001244:	4b09      	ldr	r3, [pc, #36]	@ (800126c <MX_USART2_UART_Init+0x4c>)
 8001246:	220c      	movs	r2, #12
 8001248:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124a:	4b08      	ldr	r3, [pc, #32]	@ (800126c <MX_USART2_UART_Init+0x4c>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001250:	4b06      	ldr	r3, [pc, #24]	@ (800126c <MX_USART2_UART_Init+0x4c>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001256:	4805      	ldr	r0, [pc, #20]	@ (800126c <MX_USART2_UART_Init+0x4c>)
 8001258:	f002 fd48 	bl	8003cec <HAL_UART_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001262:	f000 f8a7 	bl	80013b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200004a0 	.word	0x200004a0
 8001270:	40004400 	.word	0x40004400

08001274 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800127a:	4b0c      	ldr	r3, [pc, #48]	@ (80012ac <MX_DMA_Init+0x38>)
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	4a0b      	ldr	r2, [pc, #44]	@ (80012ac <MX_DMA_Init+0x38>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6153      	str	r3, [r2, #20]
 8001286:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <MX_DMA_Init+0x38>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	200f      	movs	r0, #15
 8001298:	f000 fc35 	bl	8001b06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800129c:	200f      	movs	r0, #15
 800129e:	f000 fc4e 	bl	8001b3e <HAL_NVIC_EnableIRQ>

}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40021000 	.word	0x40021000

080012b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b6:	f107 0310 	add.w	r3, r7, #16
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c4:	4b37      	ldr	r3, [pc, #220]	@ (80013a4 <MX_GPIO_Init+0xf4>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	4a36      	ldr	r2, [pc, #216]	@ (80013a4 <MX_GPIO_Init+0xf4>)
 80012ca:	f043 0310 	orr.w	r3, r3, #16
 80012ce:	6193      	str	r3, [r2, #24]
 80012d0:	4b34      	ldr	r3, [pc, #208]	@ (80013a4 <MX_GPIO_Init+0xf4>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	f003 0310 	and.w	r3, r3, #16
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012dc:	4b31      	ldr	r3, [pc, #196]	@ (80013a4 <MX_GPIO_Init+0xf4>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	4a30      	ldr	r2, [pc, #192]	@ (80013a4 <MX_GPIO_Init+0xf4>)
 80012e2:	f043 0320 	orr.w	r3, r3, #32
 80012e6:	6193      	str	r3, [r2, #24]
 80012e8:	4b2e      	ldr	r3, [pc, #184]	@ (80013a4 <MX_GPIO_Init+0xf4>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	f003 0320 	and.w	r3, r3, #32
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f4:	4b2b      	ldr	r3, [pc, #172]	@ (80013a4 <MX_GPIO_Init+0xf4>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	4a2a      	ldr	r2, [pc, #168]	@ (80013a4 <MX_GPIO_Init+0xf4>)
 80012fa:	f043 0304 	orr.w	r3, r3, #4
 80012fe:	6193      	str	r3, [r2, #24]
 8001300:	4b28      	ldr	r3, [pc, #160]	@ (80013a4 <MX_GPIO_Init+0xf4>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f003 0304 	and.w	r3, r3, #4
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130c:	4b25      	ldr	r3, [pc, #148]	@ (80013a4 <MX_GPIO_Init+0xf4>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	4a24      	ldr	r2, [pc, #144]	@ (80013a4 <MX_GPIO_Init+0xf4>)
 8001312:	f043 0308 	orr.w	r3, r3, #8
 8001316:	6193      	str	r3, [r2, #24]
 8001318:	4b22      	ldr	r3, [pc, #136]	@ (80013a4 <MX_GPIO_Init+0xf4>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	f003 0308 	and.w	r3, r3, #8
 8001320:	603b      	str	r3, [r7, #0]
 8001322:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001324:	2201      	movs	r2, #1
 8001326:	2120      	movs	r1, #32
 8001328:	481f      	ldr	r0, [pc, #124]	@ (80013a8 <MX_GPIO_Init+0xf8>)
 800132a:	f001 f849 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	2180      	movs	r1, #128	@ 0x80
 8001332:	481e      	ldr	r0, [pc, #120]	@ (80013ac <MX_GPIO_Init+0xfc>)
 8001334:	f001 f844 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001338:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800133c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800133e:	4b1c      	ldr	r3, [pc, #112]	@ (80013b0 <MX_GPIO_Init+0x100>)
 8001340:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001346:	f107 0310 	add.w	r3, r7, #16
 800134a:	4619      	mov	r1, r3
 800134c:	4817      	ldr	r0, [pc, #92]	@ (80013ac <MX_GPIO_Init+0xfc>)
 800134e:	f000 feb3 	bl	80020b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001352:	2320      	movs	r3, #32
 8001354:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001356:	2301      	movs	r3, #1
 8001358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135e:	2302      	movs	r3, #2
 8001360:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001362:	f107 0310 	add.w	r3, r7, #16
 8001366:	4619      	mov	r1, r3
 8001368:	480f      	ldr	r0, [pc, #60]	@ (80013a8 <MX_GPIO_Init+0xf8>)
 800136a:	f000 fea5 	bl	80020b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800136e:	2380      	movs	r3, #128	@ 0x80
 8001370:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	2301      	movs	r3, #1
 8001374:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2302      	movs	r3, #2
 800137c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800137e:	f107 0310 	add.w	r3, r7, #16
 8001382:	4619      	mov	r1, r3
 8001384:	4809      	ldr	r0, [pc, #36]	@ (80013ac <MX_GPIO_Init+0xfc>)
 8001386:	f000 fe97 	bl	80020b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	2100      	movs	r1, #0
 800138e:	2028      	movs	r0, #40	@ 0x28
 8001390:	f000 fbb9 	bl	8001b06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001394:	2028      	movs	r0, #40	@ 0x28
 8001396:	f000 fbd2 	bl	8001b3e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800139a:	bf00      	nop
 800139c:	3720      	adds	r7, #32
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40010800 	.word	0x40010800
 80013ac:	40011000 	.word	0x40011000
 80013b0:	10110000 	.word	0x10110000

080013b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b8:	b672      	cpsid	i
}
 80013ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <Error_Handler+0x8>

080013c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013c6:	4b15      	ldr	r3, [pc, #84]	@ (800141c <HAL_MspInit+0x5c>)
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	4a14      	ldr	r2, [pc, #80]	@ (800141c <HAL_MspInit+0x5c>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6193      	str	r3, [r2, #24]
 80013d2:	4b12      	ldr	r3, [pc, #72]	@ (800141c <HAL_MspInit+0x5c>)
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013de:	4b0f      	ldr	r3, [pc, #60]	@ (800141c <HAL_MspInit+0x5c>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	4a0e      	ldr	r2, [pc, #56]	@ (800141c <HAL_MspInit+0x5c>)
 80013e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013e8:	61d3      	str	r3, [r2, #28]
 80013ea:	4b0c      	ldr	r3, [pc, #48]	@ (800141c <HAL_MspInit+0x5c>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001420 <HAL_MspInit+0x60>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	4a04      	ldr	r2, [pc, #16]	@ (8001420 <HAL_MspInit+0x60>)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001412:	bf00      	nop
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr
 800141c:	40021000 	.word	0x40021000
 8001420:	40010000 	.word	0x40010000

08001424 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	@ 0x28
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a1d      	ldr	r2, [pc, #116]	@ (80014b4 <HAL_I2C_MspInit+0x90>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d132      	bne.n	80014aa <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001444:	4b1c      	ldr	r3, [pc, #112]	@ (80014b8 <HAL_I2C_MspInit+0x94>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	4a1b      	ldr	r2, [pc, #108]	@ (80014b8 <HAL_I2C_MspInit+0x94>)
 800144a:	f043 0308 	orr.w	r3, r3, #8
 800144e:	6193      	str	r3, [r2, #24]
 8001450:	4b19      	ldr	r3, [pc, #100]	@ (80014b8 <HAL_I2C_MspInit+0x94>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	f003 0308 	and.w	r3, r3, #8
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800145c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001462:	2312      	movs	r3, #18
 8001464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001466:	2303      	movs	r3, #3
 8001468:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	4812      	ldr	r0, [pc, #72]	@ (80014bc <HAL_I2C_MspInit+0x98>)
 8001472:	f000 fe21 	bl	80020b8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001476:	4b12      	ldr	r3, [pc, #72]	@ (80014c0 <HAL_I2C_MspInit+0x9c>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	627b      	str	r3, [r7, #36]	@ 0x24
 800147c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001482:	627b      	str	r3, [r7, #36]	@ 0x24
 8001484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001486:	f043 0302 	orr.w	r3, r3, #2
 800148a:	627b      	str	r3, [r7, #36]	@ 0x24
 800148c:	4a0c      	ldr	r2, [pc, #48]	@ (80014c0 <HAL_I2C_MspInit+0x9c>)
 800148e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001490:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001492:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <HAL_I2C_MspInit+0x94>)
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	4a08      	ldr	r2, [pc, #32]	@ (80014b8 <HAL_I2C_MspInit+0x94>)
 8001498:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800149c:	61d3      	str	r3, [r2, #28]
 800149e:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <HAL_I2C_MspInit+0x94>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014aa:	bf00      	nop
 80014ac:	3728      	adds	r7, #40	@ 0x28
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40005400 	.word	0x40005400
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40010c00 	.word	0x40010c00
 80014c0:	40010000 	.word	0x40010000

080014c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	@ 0x28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 0318 	add.w	r3, r7, #24
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a48      	ldr	r2, [pc, #288]	@ (8001600 <HAL_UART_MspInit+0x13c>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d160      	bne.n	80015a6 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014e4:	4b47      	ldr	r3, [pc, #284]	@ (8001604 <HAL_UART_MspInit+0x140>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	4a46      	ldr	r2, [pc, #280]	@ (8001604 <HAL_UART_MspInit+0x140>)
 80014ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014ee:	6193      	str	r3, [r2, #24]
 80014f0:	4b44      	ldr	r3, [pc, #272]	@ (8001604 <HAL_UART_MspInit+0x140>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014f8:	617b      	str	r3, [r7, #20]
 80014fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fc:	4b41      	ldr	r3, [pc, #260]	@ (8001604 <HAL_UART_MspInit+0x140>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	4a40      	ldr	r2, [pc, #256]	@ (8001604 <HAL_UART_MspInit+0x140>)
 8001502:	f043 0304 	orr.w	r3, r3, #4
 8001506:	6193      	str	r3, [r2, #24]
 8001508:	4b3e      	ldr	r3, [pc, #248]	@ (8001604 <HAL_UART_MspInit+0x140>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001514:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800151e:	2303      	movs	r3, #3
 8001520:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001522:	f107 0318 	add.w	r3, r7, #24
 8001526:	4619      	mov	r1, r3
 8001528:	4837      	ldr	r0, [pc, #220]	@ (8001608 <HAL_UART_MspInit+0x144>)
 800152a:	f000 fdc5 	bl	80020b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800152e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153c:	f107 0318 	add.w	r3, r7, #24
 8001540:	4619      	mov	r1, r3
 8001542:	4831      	ldr	r0, [pc, #196]	@ (8001608 <HAL_UART_MspInit+0x144>)
 8001544:	f000 fdb8 	bl	80020b8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001548:	4b30      	ldr	r3, [pc, #192]	@ (800160c <HAL_UART_MspInit+0x148>)
 800154a:	4a31      	ldr	r2, [pc, #196]	@ (8001610 <HAL_UART_MspInit+0x14c>)
 800154c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800154e:	4b2f      	ldr	r3, [pc, #188]	@ (800160c <HAL_UART_MspInit+0x148>)
 8001550:	2200      	movs	r2, #0
 8001552:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001554:	4b2d      	ldr	r3, [pc, #180]	@ (800160c <HAL_UART_MspInit+0x148>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800155a:	4b2c      	ldr	r3, [pc, #176]	@ (800160c <HAL_UART_MspInit+0x148>)
 800155c:	2280      	movs	r2, #128	@ 0x80
 800155e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001560:	4b2a      	ldr	r3, [pc, #168]	@ (800160c <HAL_UART_MspInit+0x148>)
 8001562:	2200      	movs	r2, #0
 8001564:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001566:	4b29      	ldr	r3, [pc, #164]	@ (800160c <HAL_UART_MspInit+0x148>)
 8001568:	2200      	movs	r2, #0
 800156a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800156c:	4b27      	ldr	r3, [pc, #156]	@ (800160c <HAL_UART_MspInit+0x148>)
 800156e:	2200      	movs	r2, #0
 8001570:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001572:	4b26      	ldr	r3, [pc, #152]	@ (800160c <HAL_UART_MspInit+0x148>)
 8001574:	2200      	movs	r2, #0
 8001576:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001578:	4824      	ldr	r0, [pc, #144]	@ (800160c <HAL_UART_MspInit+0x148>)
 800157a:	f000 fafb 	bl	8001b74 <HAL_DMA_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001584:	f7ff ff16 	bl	80013b4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a20      	ldr	r2, [pc, #128]	@ (800160c <HAL_UART_MspInit+0x148>)
 800158c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800158e:	4a1f      	ldr	r2, [pc, #124]	@ (800160c <HAL_UART_MspInit+0x148>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001594:	2200      	movs	r2, #0
 8001596:	2100      	movs	r1, #0
 8001598:	2025      	movs	r0, #37	@ 0x25
 800159a:	f000 fab4 	bl	8001b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800159e:	2025      	movs	r0, #37	@ 0x25
 80015a0:	f000 facd 	bl	8001b3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015a4:	e028      	b.n	80015f8 <HAL_UART_MspInit+0x134>
  else if(huart->Instance==USART2)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a1a      	ldr	r2, [pc, #104]	@ (8001614 <HAL_UART_MspInit+0x150>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d123      	bne.n	80015f8 <HAL_UART_MspInit+0x134>
    __HAL_RCC_USART2_CLK_ENABLE();
 80015b0:	4b14      	ldr	r3, [pc, #80]	@ (8001604 <HAL_UART_MspInit+0x140>)
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	4a13      	ldr	r2, [pc, #76]	@ (8001604 <HAL_UART_MspInit+0x140>)
 80015b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015ba:	61d3      	str	r3, [r2, #28]
 80015bc:	4b11      	ldr	r3, [pc, #68]	@ (8001604 <HAL_UART_MspInit+0x140>)
 80015be:	69db      	ldr	r3, [r3, #28]
 80015c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001604 <HAL_UART_MspInit+0x140>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001604 <HAL_UART_MspInit+0x140>)
 80015ce:	f043 0304 	orr.w	r3, r3, #4
 80015d2:	6193      	str	r3, [r2, #24]
 80015d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001604 <HAL_UART_MspInit+0x140>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	f003 0304 	and.w	r3, r3, #4
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015e0:	230c      	movs	r3, #12
 80015e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e8:	2302      	movs	r3, #2
 80015ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ec:	f107 0318 	add.w	r3, r7, #24
 80015f0:	4619      	mov	r1, r3
 80015f2:	4805      	ldr	r0, [pc, #20]	@ (8001608 <HAL_UART_MspInit+0x144>)
 80015f4:	f000 fd60 	bl	80020b8 <HAL_GPIO_Init>
}
 80015f8:	bf00      	nop
 80015fa:	3728      	adds	r7, #40	@ 0x28
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40013800 	.word	0x40013800
 8001604:	40021000 	.word	0x40021000
 8001608:	40010800 	.word	0x40010800
 800160c:	200004e8 	.word	0x200004e8
 8001610:	40020058 	.word	0x40020058
 8001614:	40004400 	.word	0x40004400

08001618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <NMI_Handler+0x4>

08001620 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001624:	bf00      	nop
 8001626:	e7fd      	b.n	8001624 <HardFault_Handler+0x4>

08001628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <MemManage_Handler+0x4>

08001630 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001634:	bf00      	nop
 8001636:	e7fd      	b.n	8001634 <BusFault_Handler+0x4>

08001638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800163c:	bf00      	nop
 800163e:	e7fd      	b.n	800163c <UsageFault_Handler+0x4>

08001640 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr

0800164c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr

08001658 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001668:	f000 f936 	bl	80018d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}

08001670 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001674:	4802      	ldr	r0, [pc, #8]	@ (8001680 <DMA1_Channel5_IRQHandler+0x10>)
 8001676:	f000 fbeb 	bl	8001e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200004e8 	.word	0x200004e8

08001684 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001688:	4802      	ldr	r0, [pc, #8]	@ (8001694 <USART1_IRQHandler+0x10>)
 800168a:	f002 fc27 	bl	8003edc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000458 	.word	0x20000458

08001698 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800169c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80016a0:	f000 fea6 	bl	80023f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return 1;
 80016ac:	2301      	movs	r3, #1
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr

080016b6 <_kill>:

int _kill(int pid, int sig)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016c0:	f004 fa98 	bl	8005bf4 <__errno>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2216      	movs	r2, #22
 80016c8:	601a      	str	r2, [r3, #0]
  return -1;
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <_exit>:

void _exit (int status)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016de:	f04f 31ff 	mov.w	r1, #4294967295
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ffe7 	bl	80016b6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <_exit+0x12>

080016ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	e00a      	b.n	8001714 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016fe:	f3af 8000 	nop.w
 8001702:	4601      	mov	r1, r0
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	1c5a      	adds	r2, r3, #1
 8001708:	60ba      	str	r2, [r7, #8]
 800170a:	b2ca      	uxtb	r2, r1
 800170c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	3301      	adds	r3, #1
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	429a      	cmp	r2, r3
 800171a:	dbf0      	blt.n	80016fe <_read+0x12>
  }

  return len;
 800171c:	687b      	ldr	r3, [r7, #4]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800172e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001732:	4618      	mov	r0, r3
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr

0800173c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800174c:	605a      	str	r2, [r3, #4]
  return 0;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr

0800175a <_isatty>:

int _isatty(int file)
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001762:	2301      	movs	r3, #1
}
 8001764:	4618      	mov	r0, r3
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr

0800176e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800176e:	b480      	push	{r7}
 8001770:	b085      	sub	sp, #20
 8001772:	af00      	add	r7, sp, #0
 8001774:	60f8      	str	r0, [r7, #12]
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr
	...

08001788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001790:	4a14      	ldr	r2, [pc, #80]	@ (80017e4 <_sbrk+0x5c>)
 8001792:	4b15      	ldr	r3, [pc, #84]	@ (80017e8 <_sbrk+0x60>)
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800179c:	4b13      	ldr	r3, [pc, #76]	@ (80017ec <_sbrk+0x64>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d102      	bne.n	80017aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a4:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <_sbrk+0x64>)
 80017a6:	4a12      	ldr	r2, [pc, #72]	@ (80017f0 <_sbrk+0x68>)
 80017a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017aa:	4b10      	ldr	r3, [pc, #64]	@ (80017ec <_sbrk+0x64>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d207      	bcs.n	80017c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b8:	f004 fa1c 	bl	8005bf4 <__errno>
 80017bc:	4603      	mov	r3, r0
 80017be:	220c      	movs	r2, #12
 80017c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017c2:	f04f 33ff 	mov.w	r3, #4294967295
 80017c6:	e009      	b.n	80017dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c8:	4b08      	ldr	r3, [pc, #32]	@ (80017ec <_sbrk+0x64>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ce:	4b07      	ldr	r3, [pc, #28]	@ (80017ec <_sbrk+0x64>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	4a05      	ldr	r2, [pc, #20]	@ (80017ec <_sbrk+0x64>)
 80017d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017da:	68fb      	ldr	r3, [r7, #12]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20005000 	.word	0x20005000
 80017e8:	00000400 	.word	0x00000400
 80017ec:	2000052c 	.word	0x2000052c
 80017f0:	20000680 	.word	0x20000680

080017f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr

08001800 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001800:	f7ff fff8 	bl	80017f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001804:	480b      	ldr	r0, [pc, #44]	@ (8001834 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001806:	490c      	ldr	r1, [pc, #48]	@ (8001838 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001808:	4a0c      	ldr	r2, [pc, #48]	@ (800183c <LoopFillZerobss+0x16>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800180c:	e002      	b.n	8001814 <LoopCopyDataInit>

0800180e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800180e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001812:	3304      	adds	r3, #4

08001814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001818:	d3f9      	bcc.n	800180e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800181a:	4a09      	ldr	r2, [pc, #36]	@ (8001840 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800181c:	4c09      	ldr	r4, [pc, #36]	@ (8001844 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800181e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001820:	e001      	b.n	8001826 <LoopFillZerobss>

08001822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001824:	3204      	adds	r2, #4

08001826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001828:	d3fb      	bcc.n	8001822 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800182a:	f004 f9e9 	bl	8005c00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800182e:	f7ff fc05 	bl	800103c <main>
  bx lr
 8001832:	4770      	bx	lr
  ldr r0, =_sdata
 8001834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001838:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800183c:	08007d24 	.word	0x08007d24
  ldr r2, =_sbss
 8001840:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001844:	20000680 	.word	0x20000680

08001848 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001848:	e7fe      	b.n	8001848 <ADC1_2_IRQHandler>
	...

0800184c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001850:	4b08      	ldr	r3, [pc, #32]	@ (8001874 <HAL_Init+0x28>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a07      	ldr	r2, [pc, #28]	@ (8001874 <HAL_Init+0x28>)
 8001856:	f043 0310 	orr.w	r3, r3, #16
 800185a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800185c:	2003      	movs	r0, #3
 800185e:	f000 f947 	bl	8001af0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001862:	2000      	movs	r0, #0
 8001864:	f000 f808 	bl	8001878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001868:	f7ff fdaa 	bl	80013c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40022000 	.word	0x40022000

08001878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001880:	4b12      	ldr	r3, [pc, #72]	@ (80018cc <HAL_InitTick+0x54>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <HAL_InitTick+0x58>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	4619      	mov	r1, r3
 800188a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800188e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001892:	fbb2 f3f3 	udiv	r3, r2, r3
 8001896:	4618      	mov	r0, r3
 8001898:	f000 f95f 	bl	8001b5a <HAL_SYSTICK_Config>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e00e      	b.n	80018c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b0f      	cmp	r3, #15
 80018aa:	d80a      	bhi.n	80018c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018ac:	2200      	movs	r2, #0
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	f04f 30ff 	mov.w	r0, #4294967295
 80018b4:	f000 f927 	bl	8001b06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b8:	4a06      	ldr	r2, [pc, #24]	@ (80018d4 <HAL_InitTick+0x5c>)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018be:	2300      	movs	r3, #0
 80018c0:	e000      	b.n	80018c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	2000000c 	.word	0x2000000c
 80018d0:	20000014 	.word	0x20000014
 80018d4:	20000010 	.word	0x20000010

080018d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018dc:	4b05      	ldr	r3, [pc, #20]	@ (80018f4 <HAL_IncTick+0x1c>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	461a      	mov	r2, r3
 80018e2:	4b05      	ldr	r3, [pc, #20]	@ (80018f8 <HAL_IncTick+0x20>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4413      	add	r3, r2
 80018e8:	4a03      	ldr	r2, [pc, #12]	@ (80018f8 <HAL_IncTick+0x20>)
 80018ea:	6013      	str	r3, [r2, #0]
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	20000014 	.word	0x20000014
 80018f8:	20000530 	.word	0x20000530

080018fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001900:	4b02      	ldr	r3, [pc, #8]	@ (800190c <HAL_GetTick+0x10>)
 8001902:	681b      	ldr	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr
 800190c:	20000530 	.word	0x20000530

08001910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001918:	f7ff fff0 	bl	80018fc <HAL_GetTick>
 800191c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001928:	d005      	beq.n	8001936 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800192a:	4b0a      	ldr	r3, [pc, #40]	@ (8001954 <HAL_Delay+0x44>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	461a      	mov	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4413      	add	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001936:	bf00      	nop
 8001938:	f7ff ffe0 	bl	80018fc <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	429a      	cmp	r2, r3
 8001946:	d8f7      	bhi.n	8001938 <HAL_Delay+0x28>
  {
  }
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000014 	.word	0x20000014

08001958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001968:	4b0c      	ldr	r3, [pc, #48]	@ (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001974:	4013      	ands	r3, r2
 8001976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001980:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001984:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198a:	4a04      	ldr	r2, [pc, #16]	@ (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	60d3      	str	r3, [r2, #12]
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a4:	4b04      	ldr	r3, [pc, #16]	@ (80019b8 <__NVIC_GetPriorityGrouping+0x18>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	0a1b      	lsrs	r3, r3, #8
 80019aa:	f003 0307 	and.w	r3, r3, #7
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	db0b      	blt.n	80019e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	f003 021f 	and.w	r2, r3, #31
 80019d4:	4906      	ldr	r1, [pc, #24]	@ (80019f0 <__NVIC_EnableIRQ+0x34>)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	095b      	lsrs	r3, r3, #5
 80019dc:	2001      	movs	r0, #1
 80019de:	fa00 f202 	lsl.w	r2, r0, r2
 80019e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	e000e100 	.word	0xe000e100

080019f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	6039      	str	r1, [r7, #0]
 80019fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	db0a      	blt.n	8001a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	490c      	ldr	r1, [pc, #48]	@ (8001a40 <__NVIC_SetPriority+0x4c>)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	0112      	lsls	r2, r2, #4
 8001a14:	b2d2      	uxtb	r2, r2
 8001a16:	440b      	add	r3, r1
 8001a18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a1c:	e00a      	b.n	8001a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	4908      	ldr	r1, [pc, #32]	@ (8001a44 <__NVIC_SetPriority+0x50>)
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	3b04      	subs	r3, #4
 8001a2c:	0112      	lsls	r2, r2, #4
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	440b      	add	r3, r1
 8001a32:	761a      	strb	r2, [r3, #24]
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000e100 	.word	0xe000e100
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b089      	sub	sp, #36	@ 0x24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f1c3 0307 	rsb	r3, r3, #7
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	bf28      	it	cs
 8001a66:	2304      	movcs	r3, #4
 8001a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	2b06      	cmp	r3, #6
 8001a70:	d902      	bls.n	8001a78 <NVIC_EncodePriority+0x30>
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3b03      	subs	r3, #3
 8001a76:	e000      	b.n	8001a7a <NVIC_EncodePriority+0x32>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43da      	mvns	r2, r3
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a90:	f04f 31ff 	mov.w	r1, #4294967295
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9a:	43d9      	mvns	r1, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa0:	4313      	orrs	r3, r2
         );
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3724      	adds	r7, #36	@ 0x24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr

08001aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001abc:	d301      	bcc.n	8001ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e00f      	b.n	8001ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8001aec <SysTick_Config+0x40>)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aca:	210f      	movs	r1, #15
 8001acc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad0:	f7ff ff90 	bl	80019f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad4:	4b05      	ldr	r3, [pc, #20]	@ (8001aec <SysTick_Config+0x40>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ada:	4b04      	ldr	r3, [pc, #16]	@ (8001aec <SysTick_Config+0x40>)
 8001adc:	2207      	movs	r2, #7
 8001ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	e000e010 	.word	0xe000e010

08001af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff ff2d 	bl	8001958 <__NVIC_SetPriorityGrouping>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b086      	sub	sp, #24
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	60b9      	str	r1, [r7, #8]
 8001b10:	607a      	str	r2, [r7, #4]
 8001b12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b18:	f7ff ff42 	bl	80019a0 <__NVIC_GetPriorityGrouping>
 8001b1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	68b9      	ldr	r1, [r7, #8]
 8001b22:	6978      	ldr	r0, [r7, #20]
 8001b24:	f7ff ff90 	bl	8001a48 <NVIC_EncodePriority>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ff5f 	bl	80019f4 <__NVIC_SetPriority>
}
 8001b36:	bf00      	nop
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff35 	bl	80019bc <__NVIC_EnableIRQ>
}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ffa2 	bl	8001aac <SysTick_Config>
 8001b68:	4603      	mov	r3, r0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e043      	b.n	8001c12 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	4b22      	ldr	r3, [pc, #136]	@ (8001c1c <HAL_DMA_Init+0xa8>)
 8001b92:	4413      	add	r3, r2
 8001b94:	4a22      	ldr	r2, [pc, #136]	@ (8001c20 <HAL_DMA_Init+0xac>)
 8001b96:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9a:	091b      	lsrs	r3, r3, #4
 8001b9c:	009a      	lsls	r2, r3, #2
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a1f      	ldr	r2, [pc, #124]	@ (8001c24 <HAL_DMA_Init+0xb0>)
 8001ba6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2202      	movs	r2, #2
 8001bac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001bbe:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001bc2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001bcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001be4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001bec:	68fa      	ldr	r2, [r7, #12]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr
 8001c1c:	bffdfff8 	.word	0xbffdfff8
 8001c20:	cccccccd 	.word	0xcccccccd
 8001c24:	40020000 	.word	0x40020000

08001c28 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
 8001c34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d101      	bne.n	8001c48 <HAL_DMA_Start_IT+0x20>
 8001c44:	2302      	movs	r3, #2
 8001c46:	e04b      	b.n	8001ce0 <HAL_DMA_Start_IT+0xb8>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d13a      	bne.n	8001cd2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2202      	movs	r2, #2
 8001c60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 0201 	bic.w	r2, r2, #1
 8001c78:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	68b9      	ldr	r1, [r7, #8]
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f000 f9eb 	bl	800205c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d008      	beq.n	8001ca0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f042 020e 	orr.w	r2, r2, #14
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	e00f      	b.n	8001cc0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0204 	bic.w	r2, r2, #4
 8001cae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 020a 	orr.w	r2, r2, #10
 8001cbe:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f042 0201 	orr.w	r2, r2, #1
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	e005      	b.n	8001cde <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d008      	beq.n	8001d12 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2204      	movs	r2, #4
 8001d04:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e020      	b.n	8001d54 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 020e 	bic.w	r2, r2, #14
 8001d20:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 0201 	bic.w	r2, r2, #1
 8001d30:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d40:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr
	...

08001d60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d005      	beq.n	8001d84 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2204      	movs	r2, #4
 8001d7c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	73fb      	strb	r3, [r7, #15]
 8001d82:	e051      	b.n	8001e28 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 020e 	bic.w	r2, r2, #14
 8001d92:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0201 	bic.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a22      	ldr	r2, [pc, #136]	@ (8001e34 <HAL_DMA_Abort_IT+0xd4>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d029      	beq.n	8001e02 <HAL_DMA_Abort_IT+0xa2>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a21      	ldr	r2, [pc, #132]	@ (8001e38 <HAL_DMA_Abort_IT+0xd8>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d022      	beq.n	8001dfe <HAL_DMA_Abort_IT+0x9e>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a1f      	ldr	r2, [pc, #124]	@ (8001e3c <HAL_DMA_Abort_IT+0xdc>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d01a      	beq.n	8001df8 <HAL_DMA_Abort_IT+0x98>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a1e      	ldr	r2, [pc, #120]	@ (8001e40 <HAL_DMA_Abort_IT+0xe0>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d012      	beq.n	8001df2 <HAL_DMA_Abort_IT+0x92>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a1c      	ldr	r2, [pc, #112]	@ (8001e44 <HAL_DMA_Abort_IT+0xe4>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d00a      	beq.n	8001dec <HAL_DMA_Abort_IT+0x8c>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a1b      	ldr	r2, [pc, #108]	@ (8001e48 <HAL_DMA_Abort_IT+0xe8>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d102      	bne.n	8001de6 <HAL_DMA_Abort_IT+0x86>
 8001de0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001de4:	e00e      	b.n	8001e04 <HAL_DMA_Abort_IT+0xa4>
 8001de6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001dea:	e00b      	b.n	8001e04 <HAL_DMA_Abort_IT+0xa4>
 8001dec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001df0:	e008      	b.n	8001e04 <HAL_DMA_Abort_IT+0xa4>
 8001df2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001df6:	e005      	b.n	8001e04 <HAL_DMA_Abort_IT+0xa4>
 8001df8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dfc:	e002      	b.n	8001e04 <HAL_DMA_Abort_IT+0xa4>
 8001dfe:	2310      	movs	r3, #16
 8001e00:	e000      	b.n	8001e04 <HAL_DMA_Abort_IT+0xa4>
 8001e02:	2301      	movs	r3, #1
 8001e04:	4a11      	ldr	r2, [pc, #68]	@ (8001e4c <HAL_DMA_Abort_IT+0xec>)
 8001e06:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	4798      	blx	r3
    } 
  }
  return status;
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40020008 	.word	0x40020008
 8001e38:	4002001c 	.word	0x4002001c
 8001e3c:	40020030 	.word	0x40020030
 8001e40:	40020044 	.word	0x40020044
 8001e44:	40020058 	.word	0x40020058
 8001e48:	4002006c 	.word	0x4002006c
 8001e4c:	40020000 	.word	0x40020000

08001e50 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6c:	2204      	movs	r2, #4
 8001e6e:	409a      	lsls	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4013      	ands	r3, r2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d04f      	beq.n	8001f18 <HAL_DMA_IRQHandler+0xc8>
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f003 0304 	and.w	r3, r3, #4
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d04a      	beq.n	8001f18 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0320 	and.w	r3, r3, #32
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d107      	bne.n	8001ea0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0204 	bic.w	r2, r2, #4
 8001e9e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a66      	ldr	r2, [pc, #408]	@ (8002040 <HAL_DMA_IRQHandler+0x1f0>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d029      	beq.n	8001efe <HAL_DMA_IRQHandler+0xae>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a65      	ldr	r2, [pc, #404]	@ (8002044 <HAL_DMA_IRQHandler+0x1f4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d022      	beq.n	8001efa <HAL_DMA_IRQHandler+0xaa>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a63      	ldr	r2, [pc, #396]	@ (8002048 <HAL_DMA_IRQHandler+0x1f8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d01a      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0xa4>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a62      	ldr	r2, [pc, #392]	@ (800204c <HAL_DMA_IRQHandler+0x1fc>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d012      	beq.n	8001eee <HAL_DMA_IRQHandler+0x9e>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a60      	ldr	r2, [pc, #384]	@ (8002050 <HAL_DMA_IRQHandler+0x200>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d00a      	beq.n	8001ee8 <HAL_DMA_IRQHandler+0x98>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a5f      	ldr	r2, [pc, #380]	@ (8002054 <HAL_DMA_IRQHandler+0x204>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d102      	bne.n	8001ee2 <HAL_DMA_IRQHandler+0x92>
 8001edc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001ee0:	e00e      	b.n	8001f00 <HAL_DMA_IRQHandler+0xb0>
 8001ee2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001ee6:	e00b      	b.n	8001f00 <HAL_DMA_IRQHandler+0xb0>
 8001ee8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001eec:	e008      	b.n	8001f00 <HAL_DMA_IRQHandler+0xb0>
 8001eee:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ef2:	e005      	b.n	8001f00 <HAL_DMA_IRQHandler+0xb0>
 8001ef4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ef8:	e002      	b.n	8001f00 <HAL_DMA_IRQHandler+0xb0>
 8001efa:	2340      	movs	r3, #64	@ 0x40
 8001efc:	e000      	b.n	8001f00 <HAL_DMA_IRQHandler+0xb0>
 8001efe:	2304      	movs	r3, #4
 8001f00:	4a55      	ldr	r2, [pc, #340]	@ (8002058 <HAL_DMA_IRQHandler+0x208>)
 8001f02:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 8094 	beq.w	8002036 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001f16:	e08e      	b.n	8002036 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	409a      	lsls	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4013      	ands	r3, r2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d056      	beq.n	8001fd6 <HAL_DMA_IRQHandler+0x186>
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d051      	beq.n	8001fd6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0320 	and.w	r3, r3, #32
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d10b      	bne.n	8001f58 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 020a 	bic.w	r2, r2, #10
 8001f4e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a38      	ldr	r2, [pc, #224]	@ (8002040 <HAL_DMA_IRQHandler+0x1f0>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d029      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0x166>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a37      	ldr	r2, [pc, #220]	@ (8002044 <HAL_DMA_IRQHandler+0x1f4>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d022      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0x162>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a35      	ldr	r2, [pc, #212]	@ (8002048 <HAL_DMA_IRQHandler+0x1f8>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d01a      	beq.n	8001fac <HAL_DMA_IRQHandler+0x15c>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a34      	ldr	r2, [pc, #208]	@ (800204c <HAL_DMA_IRQHandler+0x1fc>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d012      	beq.n	8001fa6 <HAL_DMA_IRQHandler+0x156>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a32      	ldr	r2, [pc, #200]	@ (8002050 <HAL_DMA_IRQHandler+0x200>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d00a      	beq.n	8001fa0 <HAL_DMA_IRQHandler+0x150>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a31      	ldr	r2, [pc, #196]	@ (8002054 <HAL_DMA_IRQHandler+0x204>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d102      	bne.n	8001f9a <HAL_DMA_IRQHandler+0x14a>
 8001f94:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001f98:	e00e      	b.n	8001fb8 <HAL_DMA_IRQHandler+0x168>
 8001f9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f9e:	e00b      	b.n	8001fb8 <HAL_DMA_IRQHandler+0x168>
 8001fa0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fa4:	e008      	b.n	8001fb8 <HAL_DMA_IRQHandler+0x168>
 8001fa6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001faa:	e005      	b.n	8001fb8 <HAL_DMA_IRQHandler+0x168>
 8001fac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fb0:	e002      	b.n	8001fb8 <HAL_DMA_IRQHandler+0x168>
 8001fb2:	2320      	movs	r3, #32
 8001fb4:	e000      	b.n	8001fb8 <HAL_DMA_IRQHandler+0x168>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	4a27      	ldr	r2, [pc, #156]	@ (8002058 <HAL_DMA_IRQHandler+0x208>)
 8001fba:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d034      	beq.n	8002036 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001fd4:	e02f      	b.n	8002036 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fda:	2208      	movs	r2, #8
 8001fdc:	409a      	lsls	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d028      	beq.n	8002038 <HAL_DMA_IRQHandler+0x1e8>
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	f003 0308 	and.w	r3, r3, #8
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d023      	beq.n	8002038 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 020e 	bic.w	r2, r2, #14
 8001ffe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002008:	2101      	movs	r1, #1
 800200a:	fa01 f202 	lsl.w	r2, r1, r2
 800200e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202a:	2b00      	cmp	r3, #0
 800202c:	d004      	beq.n	8002038 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	4798      	blx	r3
    }
  }
  return;
 8002036:	bf00      	nop
 8002038:	bf00      	nop
}
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40020008 	.word	0x40020008
 8002044:	4002001c 	.word	0x4002001c
 8002048:	40020030 	.word	0x40020030
 800204c:	40020044 	.word	0x40020044
 8002050:	40020058 	.word	0x40020058
 8002054:	4002006c 	.word	0x4002006c
 8002058:	40020000 	.word	0x40020000

0800205c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
 8002068:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002072:	2101      	movs	r1, #1
 8002074:	fa01 f202 	lsl.w	r2, r1, r2
 8002078:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b10      	cmp	r3, #16
 8002088:	d108      	bne.n	800209c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800209a:	e007      	b.n	80020ac <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	60da      	str	r2, [r3, #12]
}
 80020ac:	bf00      	nop
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bc80      	pop	{r7}
 80020b4:	4770      	bx	lr
	...

080020b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b08b      	sub	sp, #44	@ 0x2c
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020c2:	2300      	movs	r3, #0
 80020c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020c6:	2300      	movs	r3, #0
 80020c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ca:	e169      	b.n	80023a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020cc:	2201      	movs	r2, #1
 80020ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	69fa      	ldr	r2, [r7, #28]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	f040 8158 	bne.w	800239a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	4a9a      	ldr	r2, [pc, #616]	@ (8002358 <HAL_GPIO_Init+0x2a0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d05e      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
 80020f4:	4a98      	ldr	r2, [pc, #608]	@ (8002358 <HAL_GPIO_Init+0x2a0>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d875      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 80020fa:	4a98      	ldr	r2, [pc, #608]	@ (800235c <HAL_GPIO_Init+0x2a4>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d058      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
 8002100:	4a96      	ldr	r2, [pc, #600]	@ (800235c <HAL_GPIO_Init+0x2a4>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d86f      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 8002106:	4a96      	ldr	r2, [pc, #600]	@ (8002360 <HAL_GPIO_Init+0x2a8>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d052      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
 800210c:	4a94      	ldr	r2, [pc, #592]	@ (8002360 <HAL_GPIO_Init+0x2a8>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d869      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 8002112:	4a94      	ldr	r2, [pc, #592]	@ (8002364 <HAL_GPIO_Init+0x2ac>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d04c      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
 8002118:	4a92      	ldr	r2, [pc, #584]	@ (8002364 <HAL_GPIO_Init+0x2ac>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d863      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 800211e:	4a92      	ldr	r2, [pc, #584]	@ (8002368 <HAL_GPIO_Init+0x2b0>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d046      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
 8002124:	4a90      	ldr	r2, [pc, #576]	@ (8002368 <HAL_GPIO_Init+0x2b0>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d85d      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 800212a:	2b12      	cmp	r3, #18
 800212c:	d82a      	bhi.n	8002184 <HAL_GPIO_Init+0xcc>
 800212e:	2b12      	cmp	r3, #18
 8002130:	d859      	bhi.n	80021e6 <HAL_GPIO_Init+0x12e>
 8002132:	a201      	add	r2, pc, #4	@ (adr r2, 8002138 <HAL_GPIO_Init+0x80>)
 8002134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002138:	080021b3 	.word	0x080021b3
 800213c:	0800218d 	.word	0x0800218d
 8002140:	0800219f 	.word	0x0800219f
 8002144:	080021e1 	.word	0x080021e1
 8002148:	080021e7 	.word	0x080021e7
 800214c:	080021e7 	.word	0x080021e7
 8002150:	080021e7 	.word	0x080021e7
 8002154:	080021e7 	.word	0x080021e7
 8002158:	080021e7 	.word	0x080021e7
 800215c:	080021e7 	.word	0x080021e7
 8002160:	080021e7 	.word	0x080021e7
 8002164:	080021e7 	.word	0x080021e7
 8002168:	080021e7 	.word	0x080021e7
 800216c:	080021e7 	.word	0x080021e7
 8002170:	080021e7 	.word	0x080021e7
 8002174:	080021e7 	.word	0x080021e7
 8002178:	080021e7 	.word	0x080021e7
 800217c:	08002195 	.word	0x08002195
 8002180:	080021a9 	.word	0x080021a9
 8002184:	4a79      	ldr	r2, [pc, #484]	@ (800236c <HAL_GPIO_Init+0x2b4>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d013      	beq.n	80021b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800218a:	e02c      	b.n	80021e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	623b      	str	r3, [r7, #32]
          break;
 8002192:	e029      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	3304      	adds	r3, #4
 800219a:	623b      	str	r3, [r7, #32]
          break;
 800219c:	e024      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	3308      	adds	r3, #8
 80021a4:	623b      	str	r3, [r7, #32]
          break;
 80021a6:	e01f      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	330c      	adds	r3, #12
 80021ae:	623b      	str	r3, [r7, #32]
          break;
 80021b0:	e01a      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d102      	bne.n	80021c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021ba:	2304      	movs	r3, #4
 80021bc:	623b      	str	r3, [r7, #32]
          break;
 80021be:	e013      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d105      	bne.n	80021d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021c8:	2308      	movs	r3, #8
 80021ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69fa      	ldr	r2, [r7, #28]
 80021d0:	611a      	str	r2, [r3, #16]
          break;
 80021d2:	e009      	b.n	80021e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021d4:	2308      	movs	r3, #8
 80021d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69fa      	ldr	r2, [r7, #28]
 80021dc:	615a      	str	r2, [r3, #20]
          break;
 80021de:	e003      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021e0:	2300      	movs	r3, #0
 80021e2:	623b      	str	r3, [r7, #32]
          break;
 80021e4:	e000      	b.n	80021e8 <HAL_GPIO_Init+0x130>
          break;
 80021e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	2bff      	cmp	r3, #255	@ 0xff
 80021ec:	d801      	bhi.n	80021f2 <HAL_GPIO_Init+0x13a>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	e001      	b.n	80021f6 <HAL_GPIO_Init+0x13e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3304      	adds	r3, #4
 80021f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	2bff      	cmp	r3, #255	@ 0xff
 80021fc:	d802      	bhi.n	8002204 <HAL_GPIO_Init+0x14c>
 80021fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	e002      	b.n	800220a <HAL_GPIO_Init+0x152>
 8002204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002206:	3b08      	subs	r3, #8
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	210f      	movs	r1, #15
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	fa01 f303 	lsl.w	r3, r1, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	401a      	ands	r2, r3
 800221c:	6a39      	ldr	r1, [r7, #32]
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	fa01 f303 	lsl.w	r3, r1, r3
 8002224:	431a      	orrs	r2, r3
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 80b1 	beq.w	800239a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002238:	4b4d      	ldr	r3, [pc, #308]	@ (8002370 <HAL_GPIO_Init+0x2b8>)
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	4a4c      	ldr	r2, [pc, #304]	@ (8002370 <HAL_GPIO_Init+0x2b8>)
 800223e:	f043 0301 	orr.w	r3, r3, #1
 8002242:	6193      	str	r3, [r2, #24]
 8002244:	4b4a      	ldr	r3, [pc, #296]	@ (8002370 <HAL_GPIO_Init+0x2b8>)
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002250:	4a48      	ldr	r2, [pc, #288]	@ (8002374 <HAL_GPIO_Init+0x2bc>)
 8002252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002254:	089b      	lsrs	r3, r3, #2
 8002256:	3302      	adds	r3, #2
 8002258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800225e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	220f      	movs	r2, #15
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	4013      	ands	r3, r2
 8002272:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a40      	ldr	r2, [pc, #256]	@ (8002378 <HAL_GPIO_Init+0x2c0>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d013      	beq.n	80022a4 <HAL_GPIO_Init+0x1ec>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a3f      	ldr	r2, [pc, #252]	@ (800237c <HAL_GPIO_Init+0x2c4>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d00d      	beq.n	80022a0 <HAL_GPIO_Init+0x1e8>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a3e      	ldr	r2, [pc, #248]	@ (8002380 <HAL_GPIO_Init+0x2c8>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d007      	beq.n	800229c <HAL_GPIO_Init+0x1e4>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a3d      	ldr	r2, [pc, #244]	@ (8002384 <HAL_GPIO_Init+0x2cc>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d101      	bne.n	8002298 <HAL_GPIO_Init+0x1e0>
 8002294:	2303      	movs	r3, #3
 8002296:	e006      	b.n	80022a6 <HAL_GPIO_Init+0x1ee>
 8002298:	2304      	movs	r3, #4
 800229a:	e004      	b.n	80022a6 <HAL_GPIO_Init+0x1ee>
 800229c:	2302      	movs	r3, #2
 800229e:	e002      	b.n	80022a6 <HAL_GPIO_Init+0x1ee>
 80022a0:	2301      	movs	r3, #1
 80022a2:	e000      	b.n	80022a6 <HAL_GPIO_Init+0x1ee>
 80022a4:	2300      	movs	r3, #0
 80022a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022a8:	f002 0203 	and.w	r2, r2, #3
 80022ac:	0092      	lsls	r2, r2, #2
 80022ae:	4093      	lsls	r3, r2
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022b6:	492f      	ldr	r1, [pc, #188]	@ (8002374 <HAL_GPIO_Init+0x2bc>)
 80022b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ba:	089b      	lsrs	r3, r3, #2
 80022bc:	3302      	adds	r3, #2
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d006      	beq.n	80022de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	492c      	ldr	r1, [pc, #176]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	608b      	str	r3, [r1, #8]
 80022dc:	e006      	b.n	80022ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022de:	4b2a      	ldr	r3, [pc, #168]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	4928      	ldr	r1, [pc, #160]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d006      	beq.n	8002306 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022f8:	4b23      	ldr	r3, [pc, #140]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	4922      	ldr	r1, [pc, #136]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	4313      	orrs	r3, r2
 8002302:	60cb      	str	r3, [r1, #12]
 8002304:	e006      	b.n	8002314 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002306:	4b20      	ldr	r3, [pc, #128]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	43db      	mvns	r3, r3
 800230e:	491e      	ldr	r1, [pc, #120]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 8002310:	4013      	ands	r3, r2
 8002312:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d006      	beq.n	800232e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002320:	4b19      	ldr	r3, [pc, #100]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	4918      	ldr	r1, [pc, #96]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	4313      	orrs	r3, r2
 800232a:	604b      	str	r3, [r1, #4]
 800232c:	e006      	b.n	800233c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800232e:	4b16      	ldr	r3, [pc, #88]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	43db      	mvns	r3, r3
 8002336:	4914      	ldr	r1, [pc, #80]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 8002338:	4013      	ands	r3, r2
 800233a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d021      	beq.n	800238c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002348:	4b0f      	ldr	r3, [pc, #60]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	490e      	ldr	r1, [pc, #56]	@ (8002388 <HAL_GPIO_Init+0x2d0>)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	4313      	orrs	r3, r2
 8002352:	600b      	str	r3, [r1, #0]
 8002354:	e021      	b.n	800239a <HAL_GPIO_Init+0x2e2>
 8002356:	bf00      	nop
 8002358:	10320000 	.word	0x10320000
 800235c:	10310000 	.word	0x10310000
 8002360:	10220000 	.word	0x10220000
 8002364:	10210000 	.word	0x10210000
 8002368:	10120000 	.word	0x10120000
 800236c:	10110000 	.word	0x10110000
 8002370:	40021000 	.word	0x40021000
 8002374:	40010000 	.word	0x40010000
 8002378:	40010800 	.word	0x40010800
 800237c:	40010c00 	.word	0x40010c00
 8002380:	40011000 	.word	0x40011000
 8002384:	40011400 	.word	0x40011400
 8002388:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800238c:	4b0b      	ldr	r3, [pc, #44]	@ (80023bc <HAL_GPIO_Init+0x304>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	43db      	mvns	r3, r3
 8002394:	4909      	ldr	r1, [pc, #36]	@ (80023bc <HAL_GPIO_Init+0x304>)
 8002396:	4013      	ands	r3, r2
 8002398:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800239a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239c:	3301      	adds	r3, #1
 800239e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a6:	fa22 f303 	lsr.w	r3, r2, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f47f ae8e 	bne.w	80020cc <HAL_GPIO_Init+0x14>
  }
}
 80023b0:	bf00      	nop
 80023b2:	bf00      	nop
 80023b4:	372c      	adds	r7, #44	@ 0x2c
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr
 80023bc:	40010400 	.word	0x40010400

080023c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	807b      	strh	r3, [r7, #2]
 80023cc:	4613      	mov	r3, r2
 80023ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023d0:	787b      	ldrb	r3, [r7, #1]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023d6:	887a      	ldrh	r2, [r7, #2]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023dc:	e003      	b.n	80023e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023de:	887b      	ldrh	r3, [r7, #2]
 80023e0:	041a      	lsls	r2, r3, #16
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	611a      	str	r2, [r3, #16]
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr

080023f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023fa:	4b08      	ldr	r3, [pc, #32]	@ (800241c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023fc:	695a      	ldr	r2, [r3, #20]
 80023fe:	88fb      	ldrh	r3, [r7, #6]
 8002400:	4013      	ands	r3, r2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d006      	beq.n	8002414 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002406:	4a05      	ldr	r2, [pc, #20]	@ (800241c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002408:	88fb      	ldrh	r3, [r7, #6]
 800240a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800240c:	88fb      	ldrh	r3, [r7, #6]
 800240e:	4618      	mov	r0, r3
 8002410:	f000 f806 	bl	8002420 <HAL_GPIO_EXTI_Callback>
  }
}
 8002414:	bf00      	nop
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40010400 	.word	0x40010400

08002420 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e12b      	b.n	800269e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d106      	bne.n	8002460 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7fe ffe2 	bl	8001424 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2224      	movs	r2, #36	@ 0x24
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 0201 	bic.w	r2, r2, #1
 8002476:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002486:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002496:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002498:	f001 fbe2 	bl	8003c60 <HAL_RCC_GetPCLK1Freq>
 800249c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	4a81      	ldr	r2, [pc, #516]	@ (80026a8 <HAL_I2C_Init+0x274>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d807      	bhi.n	80024b8 <HAL_I2C_Init+0x84>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4a80      	ldr	r2, [pc, #512]	@ (80026ac <HAL_I2C_Init+0x278>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	bf94      	ite	ls
 80024b0:	2301      	movls	r3, #1
 80024b2:	2300      	movhi	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	e006      	b.n	80024c6 <HAL_I2C_Init+0x92>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4a7d      	ldr	r2, [pc, #500]	@ (80026b0 <HAL_I2C_Init+0x27c>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	bf94      	ite	ls
 80024c0:	2301      	movls	r3, #1
 80024c2:	2300      	movhi	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e0e7      	b.n	800269e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	4a78      	ldr	r2, [pc, #480]	@ (80026b4 <HAL_I2C_Init+0x280>)
 80024d2:	fba2 2303 	umull	r2, r3, r2, r3
 80024d6:	0c9b      	lsrs	r3, r3, #18
 80024d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68ba      	ldr	r2, [r7, #8]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	4a6a      	ldr	r2, [pc, #424]	@ (80026a8 <HAL_I2C_Init+0x274>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d802      	bhi.n	8002508 <HAL_I2C_Init+0xd4>
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	3301      	adds	r3, #1
 8002506:	e009      	b.n	800251c <HAL_I2C_Init+0xe8>
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800250e:	fb02 f303 	mul.w	r3, r2, r3
 8002512:	4a69      	ldr	r2, [pc, #420]	@ (80026b8 <HAL_I2C_Init+0x284>)
 8002514:	fba2 2303 	umull	r2, r3, r2, r3
 8002518:	099b      	lsrs	r3, r3, #6
 800251a:	3301      	adds	r3, #1
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6812      	ldr	r2, [r2, #0]
 8002520:	430b      	orrs	r3, r1
 8002522:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800252e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	495c      	ldr	r1, [pc, #368]	@ (80026a8 <HAL_I2C_Init+0x274>)
 8002538:	428b      	cmp	r3, r1
 800253a:	d819      	bhi.n	8002570 <HAL_I2C_Init+0x13c>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	1e59      	subs	r1, r3, #1
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	fbb1 f3f3 	udiv	r3, r1, r3
 800254a:	1c59      	adds	r1, r3, #1
 800254c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002550:	400b      	ands	r3, r1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00a      	beq.n	800256c <HAL_I2C_Init+0x138>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	1e59      	subs	r1, r3, #1
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	fbb1 f3f3 	udiv	r3, r1, r3
 8002564:	3301      	adds	r3, #1
 8002566:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800256a:	e051      	b.n	8002610 <HAL_I2C_Init+0x1dc>
 800256c:	2304      	movs	r3, #4
 800256e:	e04f      	b.n	8002610 <HAL_I2C_Init+0x1dc>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d111      	bne.n	800259c <HAL_I2C_Init+0x168>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	1e58      	subs	r0, r3, #1
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6859      	ldr	r1, [r3, #4]
 8002580:	460b      	mov	r3, r1
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	440b      	add	r3, r1
 8002586:	fbb0 f3f3 	udiv	r3, r0, r3
 800258a:	3301      	adds	r3, #1
 800258c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002590:	2b00      	cmp	r3, #0
 8002592:	bf0c      	ite	eq
 8002594:	2301      	moveq	r3, #1
 8002596:	2300      	movne	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	e012      	b.n	80025c2 <HAL_I2C_Init+0x18e>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	1e58      	subs	r0, r3, #1
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6859      	ldr	r1, [r3, #4]
 80025a4:	460b      	mov	r3, r1
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	0099      	lsls	r1, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80025b2:	3301      	adds	r3, #1
 80025b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	bf0c      	ite	eq
 80025bc:	2301      	moveq	r3, #1
 80025be:	2300      	movne	r3, #0
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <HAL_I2C_Init+0x196>
 80025c6:	2301      	movs	r3, #1
 80025c8:	e022      	b.n	8002610 <HAL_I2C_Init+0x1dc>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10e      	bne.n	80025f0 <HAL_I2C_Init+0x1bc>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	1e58      	subs	r0, r3, #1
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6859      	ldr	r1, [r3, #4]
 80025da:	460b      	mov	r3, r1
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	440b      	add	r3, r1
 80025e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80025e4:	3301      	adds	r3, #1
 80025e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025ee:	e00f      	b.n	8002610 <HAL_I2C_Init+0x1dc>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	1e58      	subs	r0, r3, #1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6859      	ldr	r1, [r3, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	0099      	lsls	r1, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	fbb0 f3f3 	udiv	r3, r0, r3
 8002606:	3301      	adds	r3, #1
 8002608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800260c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	6809      	ldr	r1, [r1, #0]
 8002614:	4313      	orrs	r3, r2
 8002616:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69da      	ldr	r2, [r3, #28]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	430a      	orrs	r2, r1
 8002632:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800263e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6911      	ldr	r1, [r2, #16]
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	68d2      	ldr	r2, [r2, #12]
 800264a:	4311      	orrs	r1, r2
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	6812      	ldr	r2, [r2, #0]
 8002650:	430b      	orrs	r3, r1
 8002652:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695a      	ldr	r2, [r3, #20]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0201 	orr.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2220      	movs	r2, #32
 800268a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	000186a0 	.word	0x000186a0
 80026ac:	001e847f 	.word	0x001e847f
 80026b0:	003d08ff 	.word	0x003d08ff
 80026b4:	431bde83 	.word	0x431bde83
 80026b8:	10624dd3 	.word	0x10624dd3

080026bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b088      	sub	sp, #32
 80026c0:	af02      	add	r7, sp, #8
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	607a      	str	r2, [r7, #4]
 80026c6:	461a      	mov	r2, r3
 80026c8:	460b      	mov	r3, r1
 80026ca:	817b      	strh	r3, [r7, #10]
 80026cc:	4613      	mov	r3, r2
 80026ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026d0:	f7ff f914 	bl	80018fc <HAL_GetTick>
 80026d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b20      	cmp	r3, #32
 80026e0:	f040 80e0 	bne.w	80028a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	2319      	movs	r3, #25
 80026ea:	2201      	movs	r2, #1
 80026ec:	4970      	ldr	r1, [pc, #448]	@ (80028b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 fcb6 	bl	8003060 <I2C_WaitOnFlagUntilTimeout>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80026fa:	2302      	movs	r3, #2
 80026fc:	e0d3      	b.n	80028a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <HAL_I2C_Master_Transmit+0x50>
 8002708:	2302      	movs	r3, #2
 800270a:	e0cc      	b.n	80028a6 <HAL_I2C_Master_Transmit+0x1ea>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b01      	cmp	r3, #1
 8002720:	d007      	beq.n	8002732 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f042 0201 	orr.w	r2, r2, #1
 8002730:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002740:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2221      	movs	r2, #33	@ 0x21
 8002746:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2210      	movs	r2, #16
 800274e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	893a      	ldrh	r2, [r7, #8]
 8002762:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002768:	b29a      	uxth	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	4a50      	ldr	r2, [pc, #320]	@ (80028b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002772:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002774:	8979      	ldrh	r1, [r7, #10]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	6a3a      	ldr	r2, [r7, #32]
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 fb20 	bl	8002dc0 <I2C_MasterRequestWrite>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e08d      	b.n	80028a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800278a:	2300      	movs	r3, #0
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80027a0:	e066      	b.n	8002870 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	6a39      	ldr	r1, [r7, #32]
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 fd74 	bl	8003294 <I2C_WaitOnTXEFlagUntilTimeout>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00d      	beq.n	80027ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d107      	bne.n	80027ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e06b      	b.n	80028a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d2:	781a      	ldrb	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027de:	1c5a      	adds	r2, r3, #1
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f6:	3b01      	subs	r3, #1
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b04      	cmp	r3, #4
 800280a:	d11b      	bne.n	8002844 <HAL_I2C_Master_Transmit+0x188>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002810:	2b00      	cmp	r3, #0
 8002812:	d017      	beq.n	8002844 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002818:	781a      	ldrb	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800282e:	b29b      	uxth	r3, r3
 8002830:	3b01      	subs	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800283c:	3b01      	subs	r3, #1
 800283e:	b29a      	uxth	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	6a39      	ldr	r1, [r7, #32]
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 fd6b 	bl	8003324 <I2C_WaitOnBTFFlagUntilTimeout>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00d      	beq.n	8002870 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002858:	2b04      	cmp	r3, #4
 800285a:	d107      	bne.n	800286c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800286a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e01a      	b.n	80028a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002874:	2b00      	cmp	r3, #0
 8002876:	d194      	bne.n	80027a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002886:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2220      	movs	r2, #32
 800288c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80028a0:	2300      	movs	r3, #0
 80028a2:	e000      	b.n	80028a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80028a4:	2302      	movs	r3, #2
  }
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3718      	adds	r7, #24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	00100002 	.word	0x00100002
 80028b4:	ffff0000 	.word	0xffff0000

080028b8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08c      	sub	sp, #48	@ 0x30
 80028bc:	af02      	add	r7, sp, #8
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	607a      	str	r2, [r7, #4]
 80028c2:	461a      	mov	r2, r3
 80028c4:	460b      	mov	r3, r1
 80028c6:	817b      	strh	r3, [r7, #10]
 80028c8:	4613      	mov	r3, r2
 80028ca:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028d0:	f7ff f814 	bl	80018fc <HAL_GetTick>
 80028d4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b20      	cmp	r3, #32
 80028e0:	f040 824b 	bne.w	8002d7a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	2319      	movs	r3, #25
 80028ea:	2201      	movs	r2, #1
 80028ec:	497f      	ldr	r1, [pc, #508]	@ (8002aec <HAL_I2C_Master_Receive+0x234>)
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 fbb6 	bl	8003060 <I2C_WaitOnFlagUntilTimeout>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80028fa:	2302      	movs	r3, #2
 80028fc:	e23e      	b.n	8002d7c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_I2C_Master_Receive+0x54>
 8002908:	2302      	movs	r3, #2
 800290a:	e237      	b.n	8002d7c <HAL_I2C_Master_Receive+0x4c4>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b01      	cmp	r3, #1
 8002920:	d007      	beq.n	8002932 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f042 0201 	orr.w	r2, r2, #1
 8002930:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002940:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2222      	movs	r2, #34	@ 0x22
 8002946:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2210      	movs	r2, #16
 800294e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	893a      	ldrh	r2, [r7, #8]
 8002962:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4a5f      	ldr	r2, [pc, #380]	@ (8002af0 <HAL_I2C_Master_Receive+0x238>)
 8002972:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002974:	8979      	ldrh	r1, [r7, #10]
 8002976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002978:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 faa2 	bl	8002ec4 <I2C_MasterRequestRead>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e1f8      	b.n	8002d7c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800298e:	2b00      	cmp	r3, #0
 8002990:	d113      	bne.n	80029ba <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002992:	2300      	movs	r3, #0
 8002994:	61fb      	str	r3, [r7, #28]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	61fb      	str	r3, [r7, #28]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	61fb      	str	r3, [r7, #28]
 80029a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	e1cc      	b.n	8002d54 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d11e      	bne.n	8002a00 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80029d2:	b672      	cpsid	i
}
 80029d4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029d6:	2300      	movs	r3, #0
 80029d8:	61bb      	str	r3, [r7, #24]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	61bb      	str	r3, [r7, #24]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	61bb      	str	r3, [r7, #24]
 80029ea:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80029fc:	b662      	cpsie	i
}
 80029fe:	e035      	b.n	8002a6c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d11e      	bne.n	8002a46 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a18:	b672      	cpsid	i
}
 8002a1a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	617b      	str	r3, [r7, #20]
 8002a30:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a42:	b662      	cpsie	i
}
 8002a44:	e012      	b.n	8002a6c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002a54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a56:	2300      	movs	r3, #0
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	613b      	str	r3, [r7, #16]
 8002a6a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002a6c:	e172      	b.n	8002d54 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	f200 811f 	bhi.w	8002cb6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d123      	bne.n	8002ac8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a82:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 fc95 	bl	80033b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e173      	b.n	8002d7c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ac6:	e145      	b.n	8002d54 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d152      	bne.n	8002b76 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	4906      	ldr	r1, [pc, #24]	@ (8002af4 <HAL_I2C_Master_Receive+0x23c>)
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 fac0 	bl	8003060 <I2C_WaitOnFlagUntilTimeout>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d008      	beq.n	8002af8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e148      	b.n	8002d7c <HAL_I2C_Master_Receive+0x4c4>
 8002aea:	bf00      	nop
 8002aec:	00100002 	.word	0x00100002
 8002af0:	ffff0000 	.word	0xffff0000
 8002af4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002af8:	b672      	cpsid	i
}
 8002afa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691a      	ldr	r2, [r3, #16]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002b3e:	b662      	cpsie	i
}
 8002b40:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	691a      	ldr	r2, [r3, #16]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b74:	e0ee      	b.n	8002d54 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	4981      	ldr	r1, [pc, #516]	@ (8002d84 <HAL_I2C_Master_Receive+0x4cc>)
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f000 fa6d 	bl	8003060 <I2C_WaitOnFlagUntilTimeout>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e0f5      	b.n	8002d7c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b9e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ba0:	b672      	cpsid	i
}
 8002ba2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691a      	ldr	r2, [r3, #16]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002bd6:	4b6c      	ldr	r3, [pc, #432]	@ (8002d88 <HAL_I2C_Master_Receive+0x4d0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	08db      	lsrs	r3, r3, #3
 8002bdc:	4a6b      	ldr	r2, [pc, #428]	@ (8002d8c <HAL_I2C_Master_Receive+0x4d4>)
 8002bde:	fba2 2303 	umull	r2, r3, r2, r3
 8002be2:	0a1a      	lsrs	r2, r3, #8
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	00da      	lsls	r2, r3, #3
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002bf0:	6a3b      	ldr	r3, [r7, #32]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d118      	bne.n	8002c2e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2220      	movs	r2, #32
 8002c06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c16:	f043 0220 	orr.w	r2, r3, #32
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002c1e:	b662      	cpsie	i
}
 8002c20:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e0a6      	b.n	8002d7c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d1d9      	bne.n	8002bf0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691a      	ldr	r2, [r3, #16]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002c7e:	b662      	cpsie	i
}
 8002c80:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	691a      	ldr	r2, [r3, #16]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002cb4:	e04e      	b.n	8002d54 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cb8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 fb7a 	bl	80033b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e058      	b.n	8002d7c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	691a      	ldr	r2, [r3, #16]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	d124      	bne.n	8002d54 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d0e:	2b03      	cmp	r3, #3
 8002d10:	d107      	bne.n	8002d22 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d20:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	691a      	ldr	r2, [r3, #16]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f47f ae88 	bne.w	8002a6e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2220      	movs	r2, #32
 8002d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d76:	2300      	movs	r3, #0
 8002d78:	e000      	b.n	8002d7c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002d7a:	2302      	movs	r3, #2
  }
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3728      	adds	r7, #40	@ 0x28
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	00010004 	.word	0x00010004
 8002d88:	2000000c 	.word	0x2000000c
 8002d8c:	14f8b589 	.word	0x14f8b589

08002d90 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d9e:	b2db      	uxtb	r3, r3
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr

08002daa <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr

08002dc0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b088      	sub	sp, #32
 8002dc4:	af02      	add	r7, sp, #8
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	607a      	str	r2, [r7, #4]
 8002dca:	603b      	str	r3, [r7, #0]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d006      	beq.n	8002dea <I2C_MasterRequestWrite+0x2a>
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d003      	beq.n	8002dea <I2C_MasterRequestWrite+0x2a>
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002de8:	d108      	bne.n	8002dfc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	e00b      	b.n	8002e14 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e00:	2b12      	cmp	r3, #18
 8002e02:	d107      	bne.n	8002e14 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 f91d 	bl	8003060 <I2C_WaitOnFlagUntilTimeout>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00d      	beq.n	8002e48 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e3a:	d103      	bne.n	8002e44 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e42:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e035      	b.n	8002eb4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e50:	d108      	bne.n	8002e64 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e52:	897b      	ldrh	r3, [r7, #10]
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e60:	611a      	str	r2, [r3, #16]
 8002e62:	e01b      	b.n	8002e9c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e64:	897b      	ldrh	r3, [r7, #10]
 8002e66:	11db      	asrs	r3, r3, #7
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	f003 0306 	and.w	r3, r3, #6
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	f063 030f 	orn	r3, r3, #15
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	490e      	ldr	r1, [pc, #56]	@ (8002ebc <I2C_MasterRequestWrite+0xfc>)
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 f966 	bl	8003154 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e010      	b.n	8002eb4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e92:	897b      	ldrh	r3, [r7, #10]
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	4907      	ldr	r1, [pc, #28]	@ (8002ec0 <I2C_MasterRequestWrite+0x100>)
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 f956 	bl	8003154 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e000      	b.n	8002eb4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	00010008 	.word	0x00010008
 8002ec0:	00010002 	.word	0x00010002

08002ec4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b088      	sub	sp, #32
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	607a      	str	r2, [r7, #4]
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ee8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d006      	beq.n	8002efe <I2C_MasterRequestRead+0x3a>
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d003      	beq.n	8002efe <I2C_MasterRequestRead+0x3a>
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002efc:	d108      	bne.n	8002f10 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	e00b      	b.n	8002f28 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f14:	2b11      	cmp	r3, #17
 8002f16:	d107      	bne.n	8002f28 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f26:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 f893 	bl	8003060 <I2C_WaitOnFlagUntilTimeout>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00d      	beq.n	8002f5c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f4e:	d103      	bne.n	8002f58 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f56:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e079      	b.n	8003050 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f64:	d108      	bne.n	8002f78 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f66:	897b      	ldrh	r3, [r7, #10]
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	611a      	str	r2, [r3, #16]
 8002f76:	e05f      	b.n	8003038 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f78:	897b      	ldrh	r3, [r7, #10]
 8002f7a:	11db      	asrs	r3, r3, #7
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	f003 0306 	and.w	r3, r3, #6
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	f063 030f 	orn	r3, r3, #15
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	4930      	ldr	r1, [pc, #192]	@ (8003058 <I2C_MasterRequestRead+0x194>)
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 f8dc 	bl	8003154 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e054      	b.n	8003050 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002fa6:	897b      	ldrh	r3, [r7, #10]
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	4929      	ldr	r1, [pc, #164]	@ (800305c <I2C_MasterRequestRead+0x198>)
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 f8cc 	bl	8003154 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e044      	b.n	8003050 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	613b      	str	r3, [r7, #16]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fea:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 f831 	bl	8003060 <I2C_WaitOnFlagUntilTimeout>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00d      	beq.n	8003020 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800300e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003012:	d103      	bne.n	800301c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800301a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e017      	b.n	8003050 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003020:	897b      	ldrh	r3, [r7, #10]
 8003022:	11db      	asrs	r3, r3, #7
 8003024:	b2db      	uxtb	r3, r3
 8003026:	f003 0306 	and.w	r3, r3, #6
 800302a:	b2db      	uxtb	r3, r3
 800302c:	f063 030e 	orn	r3, r3, #14
 8003030:	b2da      	uxtb	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	4907      	ldr	r1, [pc, #28]	@ (800305c <I2C_MasterRequestRead+0x198>)
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 f888 	bl	8003154 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3718      	adds	r7, #24
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	00010008 	.word	0x00010008
 800305c:	00010002 	.word	0x00010002

08003060 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	603b      	str	r3, [r7, #0]
 800306c:	4613      	mov	r3, r2
 800306e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003070:	e048      	b.n	8003104 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003078:	d044      	beq.n	8003104 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800307a:	f7fe fc3f 	bl	80018fc <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d302      	bcc.n	8003090 <I2C_WaitOnFlagUntilTimeout+0x30>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d139      	bne.n	8003104 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	0c1b      	lsrs	r3, r3, #16
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b01      	cmp	r3, #1
 8003098:	d10d      	bne.n	80030b6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	43da      	mvns	r2, r3
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	4013      	ands	r3, r2
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	bf0c      	ite	eq
 80030ac:	2301      	moveq	r3, #1
 80030ae:	2300      	movne	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	461a      	mov	r2, r3
 80030b4:	e00c      	b.n	80030d0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	43da      	mvns	r2, r3
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	4013      	ands	r3, r2
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	bf0c      	ite	eq
 80030c8:	2301      	moveq	r3, #1
 80030ca:	2300      	movne	r3, #0
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	461a      	mov	r2, r3
 80030d0:	79fb      	ldrb	r3, [r7, #7]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d116      	bne.n	8003104 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2220      	movs	r2, #32
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f0:	f043 0220 	orr.w	r2, r3, #32
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e023      	b.n	800314c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	0c1b      	lsrs	r3, r3, #16
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b01      	cmp	r3, #1
 800310c:	d10d      	bne.n	800312a <I2C_WaitOnFlagUntilTimeout+0xca>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	43da      	mvns	r2, r3
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	4013      	ands	r3, r2
 800311a:	b29b      	uxth	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf0c      	ite	eq
 8003120:	2301      	moveq	r3, #1
 8003122:	2300      	movne	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	461a      	mov	r2, r3
 8003128:	e00c      	b.n	8003144 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	43da      	mvns	r2, r3
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	4013      	ands	r3, r2
 8003136:	b29b      	uxth	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	bf0c      	ite	eq
 800313c:	2301      	moveq	r3, #1
 800313e:	2300      	movne	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	461a      	mov	r2, r3
 8003144:	79fb      	ldrb	r3, [r7, #7]
 8003146:	429a      	cmp	r2, r3
 8003148:	d093      	beq.n	8003072 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
 8003160:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003162:	e071      	b.n	8003248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800316e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003172:	d123      	bne.n	80031bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003182:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800318c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2220      	movs	r2, #32
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a8:	f043 0204 	orr.w	r2, r3, #4
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e067      	b.n	800328c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c2:	d041      	beq.n	8003248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031c4:	f7fe fb9a 	bl	80018fc <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d302      	bcc.n	80031da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d136      	bne.n	8003248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	0c1b      	lsrs	r3, r3, #16
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d10c      	bne.n	80031fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	43da      	mvns	r2, r3
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	4013      	ands	r3, r2
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	bf14      	ite	ne
 80031f6:	2301      	movne	r3, #1
 80031f8:	2300      	moveq	r3, #0
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	e00b      	b.n	8003216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	43da      	mvns	r2, r3
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	4013      	ands	r3, r2
 800320a:	b29b      	uxth	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	bf14      	ite	ne
 8003210:	2301      	movne	r3, #1
 8003212:	2300      	moveq	r3, #0
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d016      	beq.n	8003248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003234:	f043 0220 	orr.w	r2, r3, #32
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e021      	b.n	800328c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	0c1b      	lsrs	r3, r3, #16
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b01      	cmp	r3, #1
 8003250:	d10c      	bne.n	800326c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	43da      	mvns	r2, r3
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	4013      	ands	r3, r2
 800325e:	b29b      	uxth	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	bf14      	ite	ne
 8003264:	2301      	movne	r3, #1
 8003266:	2300      	moveq	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	e00b      	b.n	8003284 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	43da      	mvns	r2, r3
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	4013      	ands	r3, r2
 8003278:	b29b      	uxth	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	bf14      	ite	ne
 800327e:	2301      	movne	r3, #1
 8003280:	2300      	moveq	r3, #0
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	f47f af6d 	bne.w	8003164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032a0:	e034      	b.n	800330c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 f8e3 	bl	800346e <I2C_IsAcknowledgeFailed>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e034      	b.n	800331c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b8:	d028      	beq.n	800330c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ba:	f7fe fb1f 	bl	80018fc <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	68ba      	ldr	r2, [r7, #8]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d302      	bcc.n	80032d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d11d      	bne.n	800330c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032da:	2b80      	cmp	r3, #128	@ 0x80
 80032dc:	d016      	beq.n	800330c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f8:	f043 0220 	orr.w	r2, r3, #32
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e007      	b.n	800331c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003316:	2b80      	cmp	r3, #128	@ 0x80
 8003318:	d1c3      	bne.n	80032a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003330:	e034      	b.n	800339c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 f89b 	bl	800346e <I2C_IsAcknowledgeFailed>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e034      	b.n	80033ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003348:	d028      	beq.n	800339c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800334a:	f7fe fad7 	bl	80018fc <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	429a      	cmp	r2, r3
 8003358:	d302      	bcc.n	8003360 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d11d      	bne.n	800339c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	f003 0304 	and.w	r3, r3, #4
 800336a:	2b04      	cmp	r3, #4
 800336c:	d016      	beq.n	800339c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003388:	f043 0220 	orr.w	r2, r3, #32
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e007      	b.n	80033ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	f003 0304 	and.w	r3, r3, #4
 80033a6:	2b04      	cmp	r3, #4
 80033a8:	d1c3      	bne.n	8003332 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033c0:	e049      	b.n	8003456 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	f003 0310 	and.w	r3, r3, #16
 80033cc:	2b10      	cmp	r3, #16
 80033ce:	d119      	bne.n	8003404 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f06f 0210 	mvn.w	r2, #16
 80033d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e030      	b.n	8003466 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003404:	f7fe fa7a 	bl	80018fc <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	429a      	cmp	r2, r3
 8003412:	d302      	bcc.n	800341a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d11d      	bne.n	8003456 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003424:	2b40      	cmp	r3, #64	@ 0x40
 8003426:	d016      	beq.n	8003456 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2220      	movs	r2, #32
 8003432:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003442:	f043 0220 	orr.w	r2, r3, #32
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e007      	b.n	8003466 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003460:	2b40      	cmp	r3, #64	@ 0x40
 8003462:	d1ae      	bne.n	80033c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800346e:	b480      	push	{r7}
 8003470:	b083      	sub	sp, #12
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003480:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003484:	d11b      	bne.n	80034be <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800348e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2220      	movs	r2, #32
 800349a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034aa:	f043 0204 	orr.w	r2, r3, #4
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e000      	b.n	80034c0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bc80      	pop	{r7}
 80034c8:	4770      	bx	lr
	...

080034cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e272      	b.n	80039c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 8087 	beq.w	80035fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034ec:	4b92      	ldr	r3, [pc, #584]	@ (8003738 <HAL_RCC_OscConfig+0x26c>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f003 030c 	and.w	r3, r3, #12
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d00c      	beq.n	8003512 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034f8:	4b8f      	ldr	r3, [pc, #572]	@ (8003738 <HAL_RCC_OscConfig+0x26c>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 030c 	and.w	r3, r3, #12
 8003500:	2b08      	cmp	r3, #8
 8003502:	d112      	bne.n	800352a <HAL_RCC_OscConfig+0x5e>
 8003504:	4b8c      	ldr	r3, [pc, #560]	@ (8003738 <HAL_RCC_OscConfig+0x26c>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800350c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003510:	d10b      	bne.n	800352a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003512:	4b89      	ldr	r3, [pc, #548]	@ (8003738 <HAL_RCC_OscConfig+0x26c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d06c      	beq.n	80035f8 <HAL_RCC_OscConfig+0x12c>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d168      	bne.n	80035f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e24c      	b.n	80039c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003532:	d106      	bne.n	8003542 <HAL_RCC_OscConfig+0x76>
 8003534:	4b80      	ldr	r3, [pc, #512]	@ (8003738 <HAL_RCC_OscConfig+0x26c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a7f      	ldr	r2, [pc, #508]	@ (8003738 <HAL_RCC_OscConfig+0x26c>)
 800353a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800353e:	6013      	str	r3, [r2, #0]
 8003540:	e02e      	b.n	80035a0 <HAL_RCC_OscConfig+0xd4>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10c      	bne.n	8003564 <HAL_RCC_OscConfig+0x98>
 800354a:	4b7b      	ldr	r3, [pc, #492]	@ (8003738 <HAL_RCC_OscConfig+0x26c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a7a      	ldr	r2, [pc, #488]	@ (8003738 <HAL_RCC_OscConfig+0x26c>)
 8003550:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	4b78      	ldr	r3, [pc, #480]	@ (8003738 <HAL_RCC_OscConfig+0x26c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a77      	ldr	r2, [pc, #476]	@ (8003738 <HAL_RCC_OscConfig+0x26c>)
 800355c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	e01d      	b.n	80035a0 <HAL_RCC_OscConfig+0xd4>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800356c:	d10c      	bne.n	8003588 <HAL_RCC_OscConfig+0xbc>
 800356e:	4b72      	ldr	r3, [pc, #456]	@ (8003738 <HAL_RCC_OscConfig+0x26c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a71      	ldr	r2, [pc, #452]	@ (8003738 <HAL_RCC_OscConfig+0x26c>)
 8003574:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	4b6f      	ldr	r3, [pc, #444]	@ (8003738 <HAL_RCC_OscConfig+0x26c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a6e      	ldr	r2, [pc, #440]	@ (8003738 <HAL_RCC_OscConfig+0x26c>)
 8003580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	e00b      	b.n	80035a0 <HAL_RCC_OscConfig+0xd4>
 8003588:	4b6b      	ldr	r3, [pc, #428]	@ (8003738 <HAL_RCC_OscConfig+0x26c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a6a      	ldr	r2, [pc, #424]	@ (8003738 <HAL_RCC_OscConfig+0x26c>)
 800358e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003592:	6013      	str	r3, [r2, #0]
 8003594:	4b68      	ldr	r3, [pc, #416]	@ (8003738 <HAL_RCC_OscConfig+0x26c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a67      	ldr	r2, [pc, #412]	@ (8003738 <HAL_RCC_OscConfig+0x26c>)
 800359a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800359e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d013      	beq.n	80035d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a8:	f7fe f9a8 	bl	80018fc <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035b0:	f7fe f9a4 	bl	80018fc <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b64      	cmp	r3, #100	@ 0x64
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e200      	b.n	80039c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003738 <HAL_RCC_OscConfig+0x26c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0f0      	beq.n	80035b0 <HAL_RCC_OscConfig+0xe4>
 80035ce:	e014      	b.n	80035fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d0:	f7fe f994 	bl	80018fc <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d8:	f7fe f990 	bl	80018fc <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b64      	cmp	r3, #100	@ 0x64
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e1ec      	b.n	80039c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ea:	4b53      	ldr	r3, [pc, #332]	@ (8003738 <HAL_RCC_OscConfig+0x26c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1f0      	bne.n	80035d8 <HAL_RCC_OscConfig+0x10c>
 80035f6:	e000      	b.n	80035fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d063      	beq.n	80036ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003606:	4b4c      	ldr	r3, [pc, #304]	@ (8003738 <HAL_RCC_OscConfig+0x26c>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f003 030c 	and.w	r3, r3, #12
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00b      	beq.n	800362a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003612:	4b49      	ldr	r3, [pc, #292]	@ (8003738 <HAL_RCC_OscConfig+0x26c>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f003 030c 	and.w	r3, r3, #12
 800361a:	2b08      	cmp	r3, #8
 800361c:	d11c      	bne.n	8003658 <HAL_RCC_OscConfig+0x18c>
 800361e:	4b46      	ldr	r3, [pc, #280]	@ (8003738 <HAL_RCC_OscConfig+0x26c>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d116      	bne.n	8003658 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800362a:	4b43      	ldr	r3, [pc, #268]	@ (8003738 <HAL_RCC_OscConfig+0x26c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d005      	beq.n	8003642 <HAL_RCC_OscConfig+0x176>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d001      	beq.n	8003642 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e1c0      	b.n	80039c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003642:	4b3d      	ldr	r3, [pc, #244]	@ (8003738 <HAL_RCC_OscConfig+0x26c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	4939      	ldr	r1, [pc, #228]	@ (8003738 <HAL_RCC_OscConfig+0x26c>)
 8003652:	4313      	orrs	r3, r2
 8003654:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003656:	e03a      	b.n	80036ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d020      	beq.n	80036a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003660:	4b36      	ldr	r3, [pc, #216]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 8003662:	2201      	movs	r2, #1
 8003664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003666:	f7fe f949 	bl	80018fc <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800366e:	f7fe f945 	bl	80018fc <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e1a1      	b.n	80039c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003680:	4b2d      	ldr	r3, [pc, #180]	@ (8003738 <HAL_RCC_OscConfig+0x26c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0f0      	beq.n	800366e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800368c:	4b2a      	ldr	r3, [pc, #168]	@ (8003738 <HAL_RCC_OscConfig+0x26c>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	4927      	ldr	r1, [pc, #156]	@ (8003738 <HAL_RCC_OscConfig+0x26c>)
 800369c:	4313      	orrs	r3, r2
 800369e:	600b      	str	r3, [r1, #0]
 80036a0:	e015      	b.n	80036ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036a2:	4b26      	ldr	r3, [pc, #152]	@ (800373c <HAL_RCC_OscConfig+0x270>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a8:	f7fe f928 	bl	80018fc <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b0:	f7fe f924 	bl	80018fc <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e180      	b.n	80039c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036c2:	4b1d      	ldr	r3, [pc, #116]	@ (8003738 <HAL_RCC_OscConfig+0x26c>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1f0      	bne.n	80036b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d03a      	beq.n	8003750 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d019      	beq.n	8003716 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036e2:	4b17      	ldr	r3, [pc, #92]	@ (8003740 <HAL_RCC_OscConfig+0x274>)
 80036e4:	2201      	movs	r2, #1
 80036e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e8:	f7fe f908 	bl	80018fc <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036f0:	f7fe f904 	bl	80018fc <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e160      	b.n	80039c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003702:	4b0d      	ldr	r3, [pc, #52]	@ (8003738 <HAL_RCC_OscConfig+0x26c>)
 8003704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0f0      	beq.n	80036f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800370e:	2001      	movs	r0, #1
 8003710:	f000 face 	bl	8003cb0 <RCC_Delay>
 8003714:	e01c      	b.n	8003750 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003716:	4b0a      	ldr	r3, [pc, #40]	@ (8003740 <HAL_RCC_OscConfig+0x274>)
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800371c:	f7fe f8ee 	bl	80018fc <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003722:	e00f      	b.n	8003744 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003724:	f7fe f8ea 	bl	80018fc <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d908      	bls.n	8003744 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e146      	b.n	80039c4 <HAL_RCC_OscConfig+0x4f8>
 8003736:	bf00      	nop
 8003738:	40021000 	.word	0x40021000
 800373c:	42420000 	.word	0x42420000
 8003740:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003744:	4b92      	ldr	r3, [pc, #584]	@ (8003990 <HAL_RCC_OscConfig+0x4c4>)
 8003746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1e9      	bne.n	8003724 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b00      	cmp	r3, #0
 800375a:	f000 80a6 	beq.w	80038aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800375e:	2300      	movs	r3, #0
 8003760:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003762:	4b8b      	ldr	r3, [pc, #556]	@ (8003990 <HAL_RCC_OscConfig+0x4c4>)
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10d      	bne.n	800378a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800376e:	4b88      	ldr	r3, [pc, #544]	@ (8003990 <HAL_RCC_OscConfig+0x4c4>)
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	4a87      	ldr	r2, [pc, #540]	@ (8003990 <HAL_RCC_OscConfig+0x4c4>)
 8003774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003778:	61d3      	str	r3, [r2, #28]
 800377a:	4b85      	ldr	r3, [pc, #532]	@ (8003990 <HAL_RCC_OscConfig+0x4c4>)
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003782:	60bb      	str	r3, [r7, #8]
 8003784:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003786:	2301      	movs	r3, #1
 8003788:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378a:	4b82      	ldr	r3, [pc, #520]	@ (8003994 <HAL_RCC_OscConfig+0x4c8>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003792:	2b00      	cmp	r3, #0
 8003794:	d118      	bne.n	80037c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003796:	4b7f      	ldr	r3, [pc, #508]	@ (8003994 <HAL_RCC_OscConfig+0x4c8>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a7e      	ldr	r2, [pc, #504]	@ (8003994 <HAL_RCC_OscConfig+0x4c8>)
 800379c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037a2:	f7fe f8ab 	bl	80018fc <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037aa:	f7fe f8a7 	bl	80018fc <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b64      	cmp	r3, #100	@ 0x64
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e103      	b.n	80039c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037bc:	4b75      	ldr	r3, [pc, #468]	@ (8003994 <HAL_RCC_OscConfig+0x4c8>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0f0      	beq.n	80037aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d106      	bne.n	80037de <HAL_RCC_OscConfig+0x312>
 80037d0:	4b6f      	ldr	r3, [pc, #444]	@ (8003990 <HAL_RCC_OscConfig+0x4c4>)
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	4a6e      	ldr	r2, [pc, #440]	@ (8003990 <HAL_RCC_OscConfig+0x4c4>)
 80037d6:	f043 0301 	orr.w	r3, r3, #1
 80037da:	6213      	str	r3, [r2, #32]
 80037dc:	e02d      	b.n	800383a <HAL_RCC_OscConfig+0x36e>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10c      	bne.n	8003800 <HAL_RCC_OscConfig+0x334>
 80037e6:	4b6a      	ldr	r3, [pc, #424]	@ (8003990 <HAL_RCC_OscConfig+0x4c4>)
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	4a69      	ldr	r2, [pc, #420]	@ (8003990 <HAL_RCC_OscConfig+0x4c4>)
 80037ec:	f023 0301 	bic.w	r3, r3, #1
 80037f0:	6213      	str	r3, [r2, #32]
 80037f2:	4b67      	ldr	r3, [pc, #412]	@ (8003990 <HAL_RCC_OscConfig+0x4c4>)
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	4a66      	ldr	r2, [pc, #408]	@ (8003990 <HAL_RCC_OscConfig+0x4c4>)
 80037f8:	f023 0304 	bic.w	r3, r3, #4
 80037fc:	6213      	str	r3, [r2, #32]
 80037fe:	e01c      	b.n	800383a <HAL_RCC_OscConfig+0x36e>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	2b05      	cmp	r3, #5
 8003806:	d10c      	bne.n	8003822 <HAL_RCC_OscConfig+0x356>
 8003808:	4b61      	ldr	r3, [pc, #388]	@ (8003990 <HAL_RCC_OscConfig+0x4c4>)
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	4a60      	ldr	r2, [pc, #384]	@ (8003990 <HAL_RCC_OscConfig+0x4c4>)
 800380e:	f043 0304 	orr.w	r3, r3, #4
 8003812:	6213      	str	r3, [r2, #32]
 8003814:	4b5e      	ldr	r3, [pc, #376]	@ (8003990 <HAL_RCC_OscConfig+0x4c4>)
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	4a5d      	ldr	r2, [pc, #372]	@ (8003990 <HAL_RCC_OscConfig+0x4c4>)
 800381a:	f043 0301 	orr.w	r3, r3, #1
 800381e:	6213      	str	r3, [r2, #32]
 8003820:	e00b      	b.n	800383a <HAL_RCC_OscConfig+0x36e>
 8003822:	4b5b      	ldr	r3, [pc, #364]	@ (8003990 <HAL_RCC_OscConfig+0x4c4>)
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	4a5a      	ldr	r2, [pc, #360]	@ (8003990 <HAL_RCC_OscConfig+0x4c4>)
 8003828:	f023 0301 	bic.w	r3, r3, #1
 800382c:	6213      	str	r3, [r2, #32]
 800382e:	4b58      	ldr	r3, [pc, #352]	@ (8003990 <HAL_RCC_OscConfig+0x4c4>)
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	4a57      	ldr	r2, [pc, #348]	@ (8003990 <HAL_RCC_OscConfig+0x4c4>)
 8003834:	f023 0304 	bic.w	r3, r3, #4
 8003838:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d015      	beq.n	800386e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003842:	f7fe f85b 	bl	80018fc <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003848:	e00a      	b.n	8003860 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800384a:	f7fe f857 	bl	80018fc <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003858:	4293      	cmp	r3, r2
 800385a:	d901      	bls.n	8003860 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e0b1      	b.n	80039c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003860:	4b4b      	ldr	r3, [pc, #300]	@ (8003990 <HAL_RCC_OscConfig+0x4c4>)
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0ee      	beq.n	800384a <HAL_RCC_OscConfig+0x37e>
 800386c:	e014      	b.n	8003898 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800386e:	f7fe f845 	bl	80018fc <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003874:	e00a      	b.n	800388c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003876:	f7fe f841 	bl	80018fc <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003884:	4293      	cmp	r3, r2
 8003886:	d901      	bls.n	800388c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e09b      	b.n	80039c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800388c:	4b40      	ldr	r3, [pc, #256]	@ (8003990 <HAL_RCC_OscConfig+0x4c4>)
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1ee      	bne.n	8003876 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003898:	7dfb      	ldrb	r3, [r7, #23]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d105      	bne.n	80038aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800389e:	4b3c      	ldr	r3, [pc, #240]	@ (8003990 <HAL_RCC_OscConfig+0x4c4>)
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	4a3b      	ldr	r2, [pc, #236]	@ (8003990 <HAL_RCC_OscConfig+0x4c4>)
 80038a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 8087 	beq.w	80039c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038b4:	4b36      	ldr	r3, [pc, #216]	@ (8003990 <HAL_RCC_OscConfig+0x4c4>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f003 030c 	and.w	r3, r3, #12
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d061      	beq.n	8003984 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d146      	bne.n	8003956 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c8:	4b33      	ldr	r3, [pc, #204]	@ (8003998 <HAL_RCC_OscConfig+0x4cc>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ce:	f7fe f815 	bl	80018fc <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d6:	f7fe f811 	bl	80018fc <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e06d      	b.n	80039c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038e8:	4b29      	ldr	r3, [pc, #164]	@ (8003990 <HAL_RCC_OscConfig+0x4c4>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1f0      	bne.n	80038d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038fc:	d108      	bne.n	8003910 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038fe:	4b24      	ldr	r3, [pc, #144]	@ (8003990 <HAL_RCC_OscConfig+0x4c4>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	4921      	ldr	r1, [pc, #132]	@ (8003990 <HAL_RCC_OscConfig+0x4c4>)
 800390c:	4313      	orrs	r3, r2
 800390e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003910:	4b1f      	ldr	r3, [pc, #124]	@ (8003990 <HAL_RCC_OscConfig+0x4c4>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a19      	ldr	r1, [r3, #32]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003920:	430b      	orrs	r3, r1
 8003922:	491b      	ldr	r1, [pc, #108]	@ (8003990 <HAL_RCC_OscConfig+0x4c4>)
 8003924:	4313      	orrs	r3, r2
 8003926:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003928:	4b1b      	ldr	r3, [pc, #108]	@ (8003998 <HAL_RCC_OscConfig+0x4cc>)
 800392a:	2201      	movs	r2, #1
 800392c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392e:	f7fd ffe5 	bl	80018fc <HAL_GetTick>
 8003932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003934:	e008      	b.n	8003948 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003936:	f7fd ffe1 	bl	80018fc <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e03d      	b.n	80039c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003948:	4b11      	ldr	r3, [pc, #68]	@ (8003990 <HAL_RCC_OscConfig+0x4c4>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0f0      	beq.n	8003936 <HAL_RCC_OscConfig+0x46a>
 8003954:	e035      	b.n	80039c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003956:	4b10      	ldr	r3, [pc, #64]	@ (8003998 <HAL_RCC_OscConfig+0x4cc>)
 8003958:	2200      	movs	r2, #0
 800395a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395c:	f7fd ffce 	bl	80018fc <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003964:	f7fd ffca 	bl	80018fc <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e026      	b.n	80039c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003976:	4b06      	ldr	r3, [pc, #24]	@ (8003990 <HAL_RCC_OscConfig+0x4c4>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1f0      	bne.n	8003964 <HAL_RCC_OscConfig+0x498>
 8003982:	e01e      	b.n	80039c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d107      	bne.n	800399c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e019      	b.n	80039c4 <HAL_RCC_OscConfig+0x4f8>
 8003990:	40021000 	.word	0x40021000
 8003994:	40007000 	.word	0x40007000
 8003998:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800399c:	4b0b      	ldr	r3, [pc, #44]	@ (80039cc <HAL_RCC_OscConfig+0x500>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d106      	bne.n	80039be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d001      	beq.n	80039c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e000      	b.n	80039c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40021000 	.word	0x40021000

080039d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e0d0      	b.n	8003b86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039e4:	4b6a      	ldr	r3, [pc, #424]	@ (8003b90 <HAL_RCC_ClockConfig+0x1c0>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d910      	bls.n	8003a14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f2:	4b67      	ldr	r3, [pc, #412]	@ (8003b90 <HAL_RCC_ClockConfig+0x1c0>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f023 0207 	bic.w	r2, r3, #7
 80039fa:	4965      	ldr	r1, [pc, #404]	@ (8003b90 <HAL_RCC_ClockConfig+0x1c0>)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a02:	4b63      	ldr	r3, [pc, #396]	@ (8003b90 <HAL_RCC_ClockConfig+0x1c0>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d001      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e0b8      	b.n	8003b86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d020      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a2c:	4b59      	ldr	r3, [pc, #356]	@ (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	4a58      	ldr	r2, [pc, #352]	@ (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003a32:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0308 	and.w	r3, r3, #8
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d005      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a44:	4b53      	ldr	r3, [pc, #332]	@ (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	4a52      	ldr	r2, [pc, #328]	@ (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003a4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a50:	4b50      	ldr	r3, [pc, #320]	@ (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	494d      	ldr	r1, [pc, #308]	@ (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d040      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d107      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a76:	4b47      	ldr	r3, [pc, #284]	@ (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d115      	bne.n	8003aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e07f      	b.n	8003b86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d107      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a8e:	4b41      	ldr	r3, [pc, #260]	@ (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d109      	bne.n	8003aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e073      	b.n	8003b86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a9e:	4b3d      	ldr	r3, [pc, #244]	@ (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e06b      	b.n	8003b86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aae:	4b39      	ldr	r3, [pc, #228]	@ (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f023 0203 	bic.w	r2, r3, #3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	4936      	ldr	r1, [pc, #216]	@ (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ac0:	f7fd ff1c 	bl	80018fc <HAL_GetTick>
 8003ac4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac6:	e00a      	b.n	8003ade <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac8:	f7fd ff18 	bl	80018fc <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e053      	b.n	8003b86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ade:	4b2d      	ldr	r3, [pc, #180]	@ (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f003 020c 	and.w	r2, r3, #12
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d1eb      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003af0:	4b27      	ldr	r3, [pc, #156]	@ (8003b90 <HAL_RCC_ClockConfig+0x1c0>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d210      	bcs.n	8003b20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003afe:	4b24      	ldr	r3, [pc, #144]	@ (8003b90 <HAL_RCC_ClockConfig+0x1c0>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f023 0207 	bic.w	r2, r3, #7
 8003b06:	4922      	ldr	r1, [pc, #136]	@ (8003b90 <HAL_RCC_ClockConfig+0x1c0>)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b0e:	4b20      	ldr	r3, [pc, #128]	@ (8003b90 <HAL_RCC_ClockConfig+0x1c0>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d001      	beq.n	8003b20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e032      	b.n	8003b86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d008      	beq.n	8003b3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b2c:	4b19      	ldr	r3, [pc, #100]	@ (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	4916      	ldr	r1, [pc, #88]	@ (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d009      	beq.n	8003b5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b4a:	4b12      	ldr	r3, [pc, #72]	@ (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	490e      	ldr	r1, [pc, #56]	@ (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b5e:	f000 f821 	bl	8003ba4 <HAL_RCC_GetSysClockFreq>
 8003b62:	4602      	mov	r2, r0
 8003b64:	4b0b      	ldr	r3, [pc, #44]	@ (8003b94 <HAL_RCC_ClockConfig+0x1c4>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	091b      	lsrs	r3, r3, #4
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	490a      	ldr	r1, [pc, #40]	@ (8003b98 <HAL_RCC_ClockConfig+0x1c8>)
 8003b70:	5ccb      	ldrb	r3, [r1, r3]
 8003b72:	fa22 f303 	lsr.w	r3, r2, r3
 8003b76:	4a09      	ldr	r2, [pc, #36]	@ (8003b9c <HAL_RCC_ClockConfig+0x1cc>)
 8003b78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b7a:	4b09      	ldr	r3, [pc, #36]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1d0>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fd fe7a 	bl	8001878 <HAL_InitTick>

  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40022000 	.word	0x40022000
 8003b94:	40021000 	.word	0x40021000
 8003b98:	08007974 	.word	0x08007974
 8003b9c:	2000000c 	.word	0x2000000c
 8003ba0:	20000010 	.word	0x20000010

08003ba4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b087      	sub	sp, #28
 8003ba8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	60fb      	str	r3, [r7, #12]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60bb      	str	r3, [r7, #8]
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	617b      	str	r3, [r7, #20]
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003bbe:	4b1e      	ldr	r3, [pc, #120]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0x94>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f003 030c 	and.w	r3, r3, #12
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d002      	beq.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x30>
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d003      	beq.n	8003bda <HAL_RCC_GetSysClockFreq+0x36>
 8003bd2:	e027      	b.n	8003c24 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bd4:	4b19      	ldr	r3, [pc, #100]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x98>)
 8003bd6:	613b      	str	r3, [r7, #16]
      break;
 8003bd8:	e027      	b.n	8003c2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	0c9b      	lsrs	r3, r3, #18
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	4a17      	ldr	r2, [pc, #92]	@ (8003c40 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003be4:	5cd3      	ldrb	r3, [r2, r3]
 8003be6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d010      	beq.n	8003c14 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bf2:	4b11      	ldr	r3, [pc, #68]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0x94>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	0c5b      	lsrs	r3, r3, #17
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	4a11      	ldr	r2, [pc, #68]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003bfe:	5cd3      	ldrb	r3, [r2, r3]
 8003c00:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a0d      	ldr	r2, [pc, #52]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x98>)
 8003c06:	fb03 f202 	mul.w	r2, r3, r2
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c10:	617b      	str	r3, [r7, #20]
 8003c12:	e004      	b.n	8003c1e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a0c      	ldr	r2, [pc, #48]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c18:	fb02 f303 	mul.w	r3, r2, r3
 8003c1c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	613b      	str	r3, [r7, #16]
      break;
 8003c22:	e002      	b.n	8003c2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c24:	4b05      	ldr	r3, [pc, #20]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x98>)
 8003c26:	613b      	str	r3, [r7, #16]
      break;
 8003c28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c2a:	693b      	ldr	r3, [r7, #16]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	371c      	adds	r7, #28
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bc80      	pop	{r7}
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	007a1200 	.word	0x007a1200
 8003c40:	0800798c 	.word	0x0800798c
 8003c44:	0800799c 	.word	0x0800799c
 8003c48:	003d0900 	.word	0x003d0900

08003c4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c50:	4b02      	ldr	r3, [pc, #8]	@ (8003c5c <HAL_RCC_GetHCLKFreq+0x10>)
 8003c52:	681b      	ldr	r3, [r3, #0]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr
 8003c5c:	2000000c 	.word	0x2000000c

08003c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c64:	f7ff fff2 	bl	8003c4c <HAL_RCC_GetHCLKFreq>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	4b05      	ldr	r3, [pc, #20]	@ (8003c80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	0a1b      	lsrs	r3, r3, #8
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	4903      	ldr	r1, [pc, #12]	@ (8003c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c76:	5ccb      	ldrb	r3, [r1, r3]
 8003c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40021000 	.word	0x40021000
 8003c84:	08007984 	.word	0x08007984

08003c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c8c:	f7ff ffde 	bl	8003c4c <HAL_RCC_GetHCLKFreq>
 8003c90:	4602      	mov	r2, r0
 8003c92:	4b05      	ldr	r3, [pc, #20]	@ (8003ca8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	0adb      	lsrs	r3, r3, #11
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	4903      	ldr	r1, [pc, #12]	@ (8003cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	08007984 	.word	0x08007984

08003cb0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ce4 <RCC_Delay+0x34>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a0a      	ldr	r2, [pc, #40]	@ (8003ce8 <RCC_Delay+0x38>)
 8003cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc2:	0a5b      	lsrs	r3, r3, #9
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	fb02 f303 	mul.w	r3, r2, r3
 8003cca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ccc:	bf00      	nop
  }
  while (Delay --);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	1e5a      	subs	r2, r3, #1
 8003cd2:	60fa      	str	r2, [r7, #12]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1f9      	bne.n	8003ccc <RCC_Delay+0x1c>
}
 8003cd8:	bf00      	nop
 8003cda:	bf00      	nop
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr
 8003ce4:	2000000c 	.word	0x2000000c
 8003ce8:	10624dd3 	.word	0x10624dd3

08003cec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e042      	b.n	8003d84 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d106      	bne.n	8003d18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7fd fbd6 	bl	80014c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2224      	movs	r2, #36	@ 0x24
 8003d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 ff53 	bl	8004bdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	691a      	ldr	r2, [r3, #16]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695a      	ldr	r2, [r3, #20]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b08a      	sub	sp, #40	@ 0x28
 8003d90:	af02      	add	r7, sp, #8
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	603b      	str	r3, [r7, #0]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b20      	cmp	r3, #32
 8003daa:	d16d      	bne.n	8003e88 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d002      	beq.n	8003db8 <HAL_UART_Transmit+0x2c>
 8003db2:	88fb      	ldrh	r3, [r7, #6]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e066      	b.n	8003e8a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2221      	movs	r2, #33	@ 0x21
 8003dc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dca:	f7fd fd97 	bl	80018fc <HAL_GetTick>
 8003dce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	88fa      	ldrh	r2, [r7, #6]
 8003dd4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	88fa      	ldrh	r2, [r7, #6]
 8003dda:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003de4:	d108      	bne.n	8003df8 <HAL_UART_Transmit+0x6c>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d104      	bne.n	8003df8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003dee:	2300      	movs	r3, #0
 8003df0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	61bb      	str	r3, [r7, #24]
 8003df6:	e003      	b.n	8003e00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e00:	e02a      	b.n	8003e58 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	2180      	movs	r1, #128	@ 0x80
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 fc1b 	bl	8004648 <UART_WaitOnFlagUntilTimeout>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e036      	b.n	8003e8a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10b      	bne.n	8003e3a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	881b      	ldrh	r3, [r3, #0]
 8003e26:	461a      	mov	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	3302      	adds	r3, #2
 8003e36:	61bb      	str	r3, [r7, #24]
 8003e38:	e007      	b.n	8003e4a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	781a      	ldrb	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	3301      	adds	r3, #1
 8003e48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1cf      	bne.n	8003e02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	2140      	movs	r1, #64	@ 0x40
 8003e6c:	68f8      	ldr	r0, [r7, #12]
 8003e6e:	f000 fbeb 	bl	8004648 <UART_WaitOnFlagUntilTimeout>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e006      	b.n	8003e8a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003e84:	2300      	movs	r3, #0
 8003e86:	e000      	b.n	8003e8a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003e88:	2302      	movs	r3, #2
  }
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3720      	adds	r7, #32
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b084      	sub	sp, #16
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	60f8      	str	r0, [r7, #12]
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b20      	cmp	r3, #32
 8003eaa:	d112      	bne.n	8003ed2 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d002      	beq.n	8003eb8 <HAL_UART_Receive_DMA+0x26>
 8003eb2:	88fb      	ldrh	r3, [r7, #6]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d101      	bne.n	8003ebc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e00b      	b.n	8003ed4 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003ec2:	88fb      	ldrh	r3, [r7, #6]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	68b9      	ldr	r1, [r7, #8]
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 fc2b 	bl	8004724 <UART_Start_Receive_DMA>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	e000      	b.n	8003ed4 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003ed2:	2302      	movs	r3, #2
  }
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b0ba      	sub	sp, #232	@ 0xe8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f12:	f003 030f 	and.w	r3, r3, #15
 8003f16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003f1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10f      	bne.n	8003f42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f26:	f003 0320 	and.w	r3, r3, #32
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d009      	beq.n	8003f42 <HAL_UART_IRQHandler+0x66>
 8003f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f32:	f003 0320 	and.w	r3, r3, #32
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fd90 	bl	8004a60 <UART_Receive_IT>
      return;
 8003f40:	e25b      	b.n	80043fa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 80de 	beq.w	8004108 <HAL_UART_IRQHandler+0x22c>
 8003f4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d106      	bne.n	8003f66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f5c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 80d1 	beq.w	8004108 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00b      	beq.n	8003f8a <HAL_UART_IRQHandler+0xae>
 8003f72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d005      	beq.n	8003f8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f82:	f043 0201 	orr.w	r2, r3, #1
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f8e:	f003 0304 	and.w	r3, r3, #4
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00b      	beq.n	8003fae <HAL_UART_IRQHandler+0xd2>
 8003f96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d005      	beq.n	8003fae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa6:	f043 0202 	orr.w	r2, r3, #2
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00b      	beq.n	8003fd2 <HAL_UART_IRQHandler+0xf6>
 8003fba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d005      	beq.n	8003fd2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fca:	f043 0204 	orr.w	r2, r3, #4
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fd6:	f003 0308 	and.w	r3, r3, #8
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d011      	beq.n	8004002 <HAL_UART_IRQHandler+0x126>
 8003fde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fe2:	f003 0320 	and.w	r3, r3, #32
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d105      	bne.n	8003ff6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003fea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d005      	beq.n	8004002 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffa:	f043 0208 	orr.w	r2, r3, #8
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004006:	2b00      	cmp	r3, #0
 8004008:	f000 81f2 	beq.w	80043f0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800400c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004010:	f003 0320 	and.w	r3, r3, #32
 8004014:	2b00      	cmp	r3, #0
 8004016:	d008      	beq.n	800402a <HAL_UART_IRQHandler+0x14e>
 8004018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800401c:	f003 0320 	and.w	r3, r3, #32
 8004020:	2b00      	cmp	r3, #0
 8004022:	d002      	beq.n	800402a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 fd1b 	bl	8004a60 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004034:	2b00      	cmp	r3, #0
 8004036:	bf14      	ite	ne
 8004038:	2301      	movne	r3, #1
 800403a:	2300      	moveq	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	2b00      	cmp	r3, #0
 800404c:	d103      	bne.n	8004056 <HAL_UART_IRQHandler+0x17a>
 800404e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004052:	2b00      	cmp	r3, #0
 8004054:	d04f      	beq.n	80040f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 fc25 	bl	80048a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004066:	2b00      	cmp	r3, #0
 8004068:	d041      	beq.n	80040ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	3314      	adds	r3, #20
 8004070:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004074:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004078:	e853 3f00 	ldrex	r3, [r3]
 800407c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004080:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004084:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004088:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	3314      	adds	r3, #20
 8004092:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004096:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800409a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80040a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80040a6:	e841 2300 	strex	r3, r2, [r1]
 80040aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80040ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1d9      	bne.n	800406a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d013      	beq.n	80040e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c2:	4a7e      	ldr	r2, [pc, #504]	@ (80042bc <HAL_UART_IRQHandler+0x3e0>)
 80040c4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fd fe48 	bl	8001d60 <HAL_DMA_Abort_IT>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d016      	beq.n	8004104 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80040e0:	4610      	mov	r0, r2
 80040e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e4:	e00e      	b.n	8004104 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f99c 	bl	8004424 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ec:	e00a      	b.n	8004104 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f998 	bl	8004424 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f4:	e006      	b.n	8004104 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f994 	bl	8004424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004102:	e175      	b.n	80043f0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004104:	bf00      	nop
    return;
 8004106:	e173      	b.n	80043f0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800410c:	2b01      	cmp	r3, #1
 800410e:	f040 814f 	bne.w	80043b0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004116:	f003 0310 	and.w	r3, r3, #16
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 8148 	beq.w	80043b0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004124:	f003 0310 	and.w	r3, r3, #16
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 8141 	beq.w	80043b0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800412e:	2300      	movs	r3, #0
 8004130:	60bb      	str	r3, [r7, #8]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	60bb      	str	r3, [r7, #8]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	60bb      	str	r3, [r7, #8]
 8004142:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800414e:	2b00      	cmp	r3, #0
 8004150:	f000 80b6 	beq.w	80042c0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004160:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 8145 	beq.w	80043f4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800416e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004172:	429a      	cmp	r2, r3
 8004174:	f080 813e 	bcs.w	80043f4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800417e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	2b20      	cmp	r3, #32
 8004188:	f000 8088 	beq.w	800429c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	330c      	adds	r3, #12
 8004192:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004196:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800419a:	e853 3f00 	ldrex	r3, [r3]
 800419e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80041a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80041a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	330c      	adds	r3, #12
 80041b4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80041b8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80041bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80041c4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80041c8:	e841 2300 	strex	r3, r2, [r1]
 80041cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80041d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1d9      	bne.n	800418c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	3314      	adds	r3, #20
 80041de:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041e2:	e853 3f00 	ldrex	r3, [r3]
 80041e6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80041e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041ea:	f023 0301 	bic.w	r3, r3, #1
 80041ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	3314      	adds	r3, #20
 80041f8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80041fc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004200:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004202:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004204:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004208:	e841 2300 	strex	r3, r2, [r1]
 800420c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800420e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1e1      	bne.n	80041d8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	3314      	adds	r3, #20
 800421a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800421e:	e853 3f00 	ldrex	r3, [r3]
 8004222:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004224:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004226:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800422a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	3314      	adds	r3, #20
 8004234:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004238:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800423a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800423e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004240:	e841 2300 	strex	r3, r2, [r1]
 8004244:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004246:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1e3      	bne.n	8004214 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2220      	movs	r2, #32
 8004250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	330c      	adds	r3, #12
 8004260:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004262:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004264:	e853 3f00 	ldrex	r3, [r3]
 8004268:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800426a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800426c:	f023 0310 	bic.w	r3, r3, #16
 8004270:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	330c      	adds	r3, #12
 800427a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800427e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004280:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004282:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004284:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004286:	e841 2300 	strex	r3, r2, [r1]
 800428a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800428c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1e3      	bne.n	800425a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004296:	4618      	mov	r0, r3
 8004298:	f7fd fd26 	bl	8001ce8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	4619      	mov	r1, r3
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f8bf 	bl	8004436 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042b8:	e09c      	b.n	80043f4 <HAL_UART_IRQHandler+0x518>
 80042ba:	bf00      	nop
 80042bc:	0800496b 	.word	0x0800496b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 808e 	beq.w	80043f8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80042dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 8089 	beq.w	80043f8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	330c      	adds	r3, #12
 80042ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042f0:	e853 3f00 	ldrex	r3, [r3]
 80042f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	330c      	adds	r3, #12
 8004306:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800430a:	647a      	str	r2, [r7, #68]	@ 0x44
 800430c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004310:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004312:	e841 2300 	strex	r3, r2, [r1]
 8004316:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004318:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1e3      	bne.n	80042e6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	3314      	adds	r3, #20
 8004324:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004328:	e853 3f00 	ldrex	r3, [r3]
 800432c:	623b      	str	r3, [r7, #32]
   return(result);
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	f023 0301 	bic.w	r3, r3, #1
 8004334:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	3314      	adds	r3, #20
 800433e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004342:	633a      	str	r2, [r7, #48]	@ 0x30
 8004344:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004346:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004348:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800434a:	e841 2300 	strex	r3, r2, [r1]
 800434e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1e3      	bne.n	800431e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2220      	movs	r2, #32
 800435a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	330c      	adds	r3, #12
 800436a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	e853 3f00 	ldrex	r3, [r3]
 8004372:	60fb      	str	r3, [r7, #12]
   return(result);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f023 0310 	bic.w	r3, r3, #16
 800437a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	330c      	adds	r3, #12
 8004384:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004388:	61fa      	str	r2, [r7, #28]
 800438a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438c:	69b9      	ldr	r1, [r7, #24]
 800438e:	69fa      	ldr	r2, [r7, #28]
 8004390:	e841 2300 	strex	r3, r2, [r1]
 8004394:	617b      	str	r3, [r7, #20]
   return(result);
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1e3      	bne.n	8004364 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043a6:	4619      	mov	r1, r3
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f844 	bl	8004436 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043ae:	e023      	b.n	80043f8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d009      	beq.n	80043d0 <HAL_UART_IRQHandler+0x4f4>
 80043bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d003      	beq.n	80043d0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 fae2 	bl	8004992 <UART_Transmit_IT>
    return;
 80043ce:	e014      	b.n	80043fa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00e      	beq.n	80043fa <HAL_UART_IRQHandler+0x51e>
 80043dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d008      	beq.n	80043fa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 fb21 	bl	8004a30 <UART_EndTransmit_IT>
    return;
 80043ee:	e004      	b.n	80043fa <HAL_UART_IRQHandler+0x51e>
    return;
 80043f0:	bf00      	nop
 80043f2:	e002      	b.n	80043fa <HAL_UART_IRQHandler+0x51e>
      return;
 80043f4:	bf00      	nop
 80043f6:	e000      	b.n	80043fa <HAL_UART_IRQHandler+0x51e>
      return;
 80043f8:	bf00      	nop
  }
}
 80043fa:	37e8      	adds	r7, #232	@ 0xe8
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	bc80      	pop	{r7}
 8004410:	4770      	bx	lr

08004412 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004412:	b480      	push	{r7}
 8004414:	b083      	sub	sp, #12
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800441a:	bf00      	nop
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	bc80      	pop	{r7}
 8004422:	4770      	bx	lr

08004424 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	bc80      	pop	{r7}
 8004434:	4770      	bx	lr

08004436 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
 800443e:	460b      	mov	r3, r1
 8004440:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004442:	bf00      	nop
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	bc80      	pop	{r7}
 800444a:	4770      	bx	lr

0800444c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b09c      	sub	sp, #112	@ 0x70
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004458:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0320 	and.w	r3, r3, #32
 8004464:	2b00      	cmp	r3, #0
 8004466:	d172      	bne.n	800454e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004468:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800446a:	2200      	movs	r2, #0
 800446c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800446e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	330c      	adds	r3, #12
 8004474:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004476:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004478:	e853 3f00 	ldrex	r3, [r3]
 800447c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800447e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004480:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004484:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004486:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	330c      	adds	r3, #12
 800448c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800448e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004490:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004492:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004494:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004496:	e841 2300 	strex	r3, r2, [r1]
 800449a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800449c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1e5      	bne.n	800446e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	3314      	adds	r3, #20
 80044a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ac:	e853 3f00 	ldrex	r3, [r3]
 80044b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044b4:	f023 0301 	bic.w	r3, r3, #1
 80044b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80044ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	3314      	adds	r3, #20
 80044c0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80044c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80044c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80044c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044ca:	e841 2300 	strex	r3, r2, [r1]
 80044ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1e5      	bne.n	80044a2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	3314      	adds	r3, #20
 80044dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e0:	e853 3f00 	ldrex	r3, [r3]
 80044e4:	623b      	str	r3, [r7, #32]
   return(result);
 80044e6:	6a3b      	ldr	r3, [r7, #32]
 80044e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80044ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	3314      	adds	r3, #20
 80044f4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80044f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80044f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80044fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044fe:	e841 2300 	strex	r3, r2, [r1]
 8004502:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1e5      	bne.n	80044d6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800450a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800450c:	2220      	movs	r2, #32
 800450e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004512:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004516:	2b01      	cmp	r3, #1
 8004518:	d119      	bne.n	800454e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800451a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	330c      	adds	r3, #12
 8004520:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	e853 3f00 	ldrex	r3, [r3]
 8004528:	60fb      	str	r3, [r7, #12]
   return(result);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f023 0310 	bic.w	r3, r3, #16
 8004530:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004532:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	330c      	adds	r3, #12
 8004538:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800453a:	61fa      	str	r2, [r7, #28]
 800453c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453e:	69b9      	ldr	r1, [r7, #24]
 8004540:	69fa      	ldr	r2, [r7, #28]
 8004542:	e841 2300 	strex	r3, r2, [r1]
 8004546:	617b      	str	r3, [r7, #20]
   return(result);
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1e5      	bne.n	800451a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800454e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004550:	2200      	movs	r2, #0
 8004552:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004554:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004558:	2b01      	cmp	r3, #1
 800455a:	d106      	bne.n	800456a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800455c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800455e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004560:	4619      	mov	r1, r3
 8004562:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004564:	f7ff ff67 	bl	8004436 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004568:	e002      	b.n	8004570 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800456a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800456c:	f7fc fd42 	bl	8000ff4 <HAL_UART_RxCpltCallback>
}
 8004570:	bf00      	nop
 8004572:	3770      	adds	r7, #112	@ 0x70
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004584:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2201      	movs	r2, #1
 800458a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004590:	2b01      	cmp	r3, #1
 8004592:	d108      	bne.n	80045a6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004598:	085b      	lsrs	r3, r3, #1
 800459a:	b29b      	uxth	r3, r3
 800459c:	4619      	mov	r1, r3
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f7ff ff49 	bl	8004436 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045a4:	e002      	b.n	80045ac <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f7ff ff33 	bl	8004412 <HAL_UART_RxHalfCpltCallback>
}
 80045ac:	bf00      	nop
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80045bc:	2300      	movs	r3, #0
 80045be:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	bf14      	ite	ne
 80045d4:	2301      	movne	r3, #1
 80045d6:	2300      	moveq	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b21      	cmp	r3, #33	@ 0x21
 80045e6:	d108      	bne.n	80045fa <UART_DMAError+0x46>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d005      	beq.n	80045fa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	2200      	movs	r2, #0
 80045f2:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80045f4:	68b8      	ldr	r0, [r7, #8]
 80045f6:	f000 f92f 	bl	8004858 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004604:	2b00      	cmp	r3, #0
 8004606:	bf14      	ite	ne
 8004608:	2301      	movne	r3, #1
 800460a:	2300      	moveq	r3, #0
 800460c:	b2db      	uxtb	r3, r3
 800460e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b22      	cmp	r3, #34	@ 0x22
 800461a:	d108      	bne.n	800462e <UART_DMAError+0x7a>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d005      	beq.n	800462e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	2200      	movs	r2, #0
 8004626:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004628:	68b8      	ldr	r0, [r7, #8]
 800462a:	f000 f93c 	bl	80048a6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004632:	f043 0210 	orr.w	r2, r3, #16
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800463a:	68b8      	ldr	r0, [r7, #8]
 800463c:	f7ff fef2 	bl	8004424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004640:	bf00      	nop
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b090      	sub	sp, #64	@ 0x40
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	603b      	str	r3, [r7, #0]
 8004654:	4613      	mov	r3, r2
 8004656:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004658:	e050      	b.n	80046fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800465a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800465c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004660:	d04c      	beq.n	80046fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004662:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004664:	2b00      	cmp	r3, #0
 8004666:	d007      	beq.n	8004678 <UART_WaitOnFlagUntilTimeout+0x30>
 8004668:	f7fd f948 	bl	80018fc <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004674:	429a      	cmp	r2, r3
 8004676:	d241      	bcs.n	80046fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	330c      	adds	r3, #12
 800467e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004682:	e853 3f00 	ldrex	r3, [r3]
 8004686:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468a:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800468e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	330c      	adds	r3, #12
 8004696:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004698:	637a      	str	r2, [r7, #52]	@ 0x34
 800469a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800469e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80046a0:	e841 2300 	strex	r3, r2, [r1]
 80046a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80046a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1e5      	bne.n	8004678 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	3314      	adds	r3, #20
 80046b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	e853 3f00 	ldrex	r3, [r3]
 80046ba:	613b      	str	r3, [r7, #16]
   return(result);
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	f023 0301 	bic.w	r3, r3, #1
 80046c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	3314      	adds	r3, #20
 80046ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80046cc:	623a      	str	r2, [r7, #32]
 80046ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d0:	69f9      	ldr	r1, [r7, #28]
 80046d2:	6a3a      	ldr	r2, [r7, #32]
 80046d4:	e841 2300 	strex	r3, r2, [r1]
 80046d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1e5      	bne.n	80046ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2220      	movs	r2, #32
 80046ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e00f      	b.n	800471c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	4013      	ands	r3, r2
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	429a      	cmp	r2, r3
 800470a:	bf0c      	ite	eq
 800470c:	2301      	moveq	r3, #1
 800470e:	2300      	movne	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	461a      	mov	r2, r3
 8004714:	79fb      	ldrb	r3, [r7, #7]
 8004716:	429a      	cmp	r2, r3
 8004718:	d09f      	beq.n	800465a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3740      	adds	r7, #64	@ 0x40
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b098      	sub	sp, #96	@ 0x60
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	4613      	mov	r3, r2
 8004730:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	88fa      	ldrh	r2, [r7, #6]
 800473c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2222      	movs	r2, #34	@ 0x22
 8004748:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004750:	4a3e      	ldr	r2, [pc, #248]	@ (800484c <UART_Start_Receive_DMA+0x128>)
 8004752:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004758:	4a3d      	ldr	r2, [pc, #244]	@ (8004850 <UART_Start_Receive_DMA+0x12c>)
 800475a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004760:	4a3c      	ldr	r2, [pc, #240]	@ (8004854 <UART_Start_Receive_DMA+0x130>)
 8004762:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004768:	2200      	movs	r2, #0
 800476a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800476c:	f107 0308 	add.w	r3, r7, #8
 8004770:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	3304      	adds	r3, #4
 800477c:	4619      	mov	r1, r3
 800477e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	88fb      	ldrh	r3, [r7, #6]
 8004784:	f7fd fa50 	bl	8001c28 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004788:	2300      	movs	r3, #0
 800478a:	613b      	str	r3, [r7, #16]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	613b      	str	r3, [r7, #16]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	613b      	str	r3, [r7, #16]
 800479c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d019      	beq.n	80047da <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	330c      	adds	r3, #12
 80047ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047b0:	e853 3f00 	ldrex	r3, [r3]
 80047b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	330c      	adds	r3, #12
 80047c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80047c6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80047c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ca:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80047cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80047ce:	e841 2300 	strex	r3, r2, [r1]
 80047d2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80047d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1e5      	bne.n	80047a6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	3314      	adds	r3, #20
 80047e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e4:	e853 3f00 	ldrex	r3, [r3]
 80047e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ec:	f043 0301 	orr.w	r3, r3, #1
 80047f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	3314      	adds	r3, #20
 80047f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80047fa:	63ba      	str	r2, [r7, #56]	@ 0x38
 80047fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004800:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004802:	e841 2300 	strex	r3, r2, [r1]
 8004806:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1e5      	bne.n	80047da <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3314      	adds	r3, #20
 8004814:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	e853 3f00 	ldrex	r3, [r3]
 800481c:	617b      	str	r3, [r7, #20]
   return(result);
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004824:	653b      	str	r3, [r7, #80]	@ 0x50
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3314      	adds	r3, #20
 800482c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800482e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004830:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004832:	6a39      	ldr	r1, [r7, #32]
 8004834:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004836:	e841 2300 	strex	r3, r2, [r1]
 800483a:	61fb      	str	r3, [r7, #28]
   return(result);
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1e5      	bne.n	800480e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3760      	adds	r7, #96	@ 0x60
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	0800444d 	.word	0x0800444d
 8004850:	08004579 	.word	0x08004579
 8004854:	080045b5 	.word	0x080045b5

08004858 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004858:	b480      	push	{r7}
 800485a:	b089      	sub	sp, #36	@ 0x24
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	330c      	adds	r3, #12
 8004866:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	e853 3f00 	ldrex	r3, [r3]
 800486e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004876:	61fb      	str	r3, [r7, #28]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	330c      	adds	r3, #12
 800487e:	69fa      	ldr	r2, [r7, #28]
 8004880:	61ba      	str	r2, [r7, #24]
 8004882:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004884:	6979      	ldr	r1, [r7, #20]
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	e841 2300 	strex	r3, r2, [r1]
 800488c:	613b      	str	r3, [r7, #16]
   return(result);
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1e5      	bne.n	8004860 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2220      	movs	r2, #32
 8004898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800489c:	bf00      	nop
 800489e:	3724      	adds	r7, #36	@ 0x24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bc80      	pop	{r7}
 80048a4:	4770      	bx	lr

080048a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b095      	sub	sp, #84	@ 0x54
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	330c      	adds	r3, #12
 80048b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048b8:	e853 3f00 	ldrex	r3, [r3]
 80048bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	330c      	adds	r3, #12
 80048cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048ce:	643a      	str	r2, [r7, #64]	@ 0x40
 80048d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048d6:	e841 2300 	strex	r3, r2, [r1]
 80048da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1e5      	bne.n	80048ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	3314      	adds	r3, #20
 80048e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	e853 3f00 	ldrex	r3, [r3]
 80048f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	f023 0301 	bic.w	r3, r3, #1
 80048f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	3314      	adds	r3, #20
 8004900:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004902:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004904:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004906:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004908:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800490a:	e841 2300 	strex	r3, r2, [r1]
 800490e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1e5      	bne.n	80048e2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800491a:	2b01      	cmp	r3, #1
 800491c:	d119      	bne.n	8004952 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	330c      	adds	r3, #12
 8004924:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	e853 3f00 	ldrex	r3, [r3]
 800492c:	60bb      	str	r3, [r7, #8]
   return(result);
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	f023 0310 	bic.w	r3, r3, #16
 8004934:	647b      	str	r3, [r7, #68]	@ 0x44
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	330c      	adds	r3, #12
 800493c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800493e:	61ba      	str	r2, [r7, #24]
 8004940:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004942:	6979      	ldr	r1, [r7, #20]
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	e841 2300 	strex	r3, r2, [r1]
 800494a:	613b      	str	r3, [r7, #16]
   return(result);
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1e5      	bne.n	800491e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2220      	movs	r2, #32
 8004956:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004960:	bf00      	nop
 8004962:	3754      	adds	r7, #84	@ 0x54
 8004964:	46bd      	mov	sp, r7
 8004966:	bc80      	pop	{r7}
 8004968:	4770      	bx	lr

0800496a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b084      	sub	sp, #16
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004976:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f7ff fd4d 	bl	8004424 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800498a:	bf00      	nop
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004992:	b480      	push	{r7}
 8004994:	b085      	sub	sp, #20
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b21      	cmp	r3, #33	@ 0x21
 80049a4:	d13e      	bne.n	8004a24 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049ae:	d114      	bne.n	80049da <UART_Transmit_IT+0x48>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d110      	bne.n	80049da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	461a      	mov	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	1c9a      	adds	r2, r3, #2
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	621a      	str	r2, [r3, #32]
 80049d8:	e008      	b.n	80049ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	1c59      	adds	r1, r3, #1
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	6211      	str	r1, [r2, #32]
 80049e4:	781a      	ldrb	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	3b01      	subs	r3, #1
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	4619      	mov	r1, r3
 80049fa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10f      	bne.n	8004a20 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68da      	ldr	r2, [r3, #12]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a0e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a1e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a20:	2300      	movs	r3, #0
 8004a22:	e000      	b.n	8004a26 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a24:	2302      	movs	r3, #2
  }
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bc80      	pop	{r7}
 8004a2e:	4770      	bx	lr

08004a30 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68da      	ldr	r2, [r3, #12]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a46:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f7ff fcd5 	bl	8004400 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3708      	adds	r7, #8
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b08c      	sub	sp, #48	@ 0x30
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b22      	cmp	r3, #34	@ 0x22
 8004a72:	f040 80ae 	bne.w	8004bd2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a7e:	d117      	bne.n	8004ab0 <UART_Receive_IT+0x50>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d113      	bne.n	8004ab0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a90:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa8:	1c9a      	adds	r2, r3, #2
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	629a      	str	r2, [r3, #40]	@ 0x28
 8004aae:	e026      	b.n	8004afe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ac2:	d007      	beq.n	8004ad4 <UART_Receive_IT+0x74>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10a      	bne.n	8004ae2 <UART_Receive_IT+0x82>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d106      	bne.n	8004ae2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ade:	701a      	strb	r2, [r3, #0]
 8004ae0:	e008      	b.n	8004af4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004af2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af8:	1c5a      	adds	r2, r3, #1
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	3b01      	subs	r3, #1
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d15d      	bne.n	8004bce <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 0220 	bic.w	r2, r2, #32
 8004b20:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68da      	ldr	r2, [r3, #12]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	695a      	ldr	r2, [r3, #20]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 0201 	bic.w	r2, r2, #1
 8004b40:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2220      	movs	r2, #32
 8004b46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d135      	bne.n	8004bc4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	330c      	adds	r3, #12
 8004b64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	e853 3f00 	ldrex	r3, [r3]
 8004b6c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f023 0310 	bic.w	r3, r3, #16
 8004b74:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	330c      	adds	r3, #12
 8004b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b7e:	623a      	str	r2, [r7, #32]
 8004b80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b82:	69f9      	ldr	r1, [r7, #28]
 8004b84:	6a3a      	ldr	r2, [r7, #32]
 8004b86:	e841 2300 	strex	r3, r2, [r1]
 8004b8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1e5      	bne.n	8004b5e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0310 	and.w	r3, r3, #16
 8004b9c:	2b10      	cmp	r3, #16
 8004b9e:	d10a      	bne.n	8004bb6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	60fb      	str	r3, [r7, #12]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	60fb      	str	r3, [r7, #12]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004bba:	4619      	mov	r1, r3
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f7ff fc3a 	bl	8004436 <HAL_UARTEx_RxEventCallback>
 8004bc2:	e002      	b.n	8004bca <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f7fc fa15 	bl	8000ff4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	e002      	b.n	8004bd4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	e000      	b.n	8004bd4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004bd2:	2302      	movs	r3, #2
  }
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3730      	adds	r7, #48	@ 0x30
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68da      	ldr	r2, [r3, #12]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	689a      	ldr	r2, [r3, #8]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	431a      	orrs	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004c16:	f023 030c 	bic.w	r3, r3, #12
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6812      	ldr	r2, [r2, #0]
 8004c1e:	68b9      	ldr	r1, [r7, #8]
 8004c20:	430b      	orrs	r3, r1
 8004c22:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	699a      	ldr	r2, [r3, #24]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a2c      	ldr	r2, [pc, #176]	@ (8004cf0 <UART_SetConfig+0x114>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d103      	bne.n	8004c4c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004c44:	f7ff f820 	bl	8003c88 <HAL_RCC_GetPCLK2Freq>
 8004c48:	60f8      	str	r0, [r7, #12]
 8004c4a:	e002      	b.n	8004c52 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004c4c:	f7ff f808 	bl	8003c60 <HAL_RCC_GetPCLK1Freq>
 8004c50:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	4613      	mov	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	009a      	lsls	r2, r3, #2
 8004c5c:	441a      	add	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c68:	4a22      	ldr	r2, [pc, #136]	@ (8004cf4 <UART_SetConfig+0x118>)
 8004c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6e:	095b      	lsrs	r3, r3, #5
 8004c70:	0119      	lsls	r1, r3, #4
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	4613      	mov	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	009a      	lsls	r2, r3, #2
 8004c7c:	441a      	add	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c88:	4b1a      	ldr	r3, [pc, #104]	@ (8004cf4 <UART_SetConfig+0x118>)
 8004c8a:	fba3 0302 	umull	r0, r3, r3, r2
 8004c8e:	095b      	lsrs	r3, r3, #5
 8004c90:	2064      	movs	r0, #100	@ 0x64
 8004c92:	fb00 f303 	mul.w	r3, r0, r3
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	011b      	lsls	r3, r3, #4
 8004c9a:	3332      	adds	r3, #50	@ 0x32
 8004c9c:	4a15      	ldr	r2, [pc, #84]	@ (8004cf4 <UART_SetConfig+0x118>)
 8004c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca2:	095b      	lsrs	r3, r3, #5
 8004ca4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ca8:	4419      	add	r1, r3
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	4613      	mov	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	009a      	lsls	r2, r3, #2
 8004cb4:	441a      	add	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8004cf4 <UART_SetConfig+0x118>)
 8004cc2:	fba3 0302 	umull	r0, r3, r3, r2
 8004cc6:	095b      	lsrs	r3, r3, #5
 8004cc8:	2064      	movs	r0, #100	@ 0x64
 8004cca:	fb00 f303 	mul.w	r3, r0, r3
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	011b      	lsls	r3, r3, #4
 8004cd2:	3332      	adds	r3, #50	@ 0x32
 8004cd4:	4a07      	ldr	r2, [pc, #28]	@ (8004cf4 <UART_SetConfig+0x118>)
 8004cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cda:	095b      	lsrs	r3, r3, #5
 8004cdc:	f003 020f 	and.w	r2, r3, #15
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	440a      	add	r2, r1
 8004ce6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ce8:	bf00      	nop
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	40013800 	.word	0x40013800
 8004cf4:	51eb851f 	.word	0x51eb851f

08004cf8 <malloc>:
 8004cf8:	4b02      	ldr	r3, [pc, #8]	@ (8004d04 <malloc+0xc>)
 8004cfa:	4601      	mov	r1, r0
 8004cfc:	6818      	ldr	r0, [r3, #0]
 8004cfe:	f000 b825 	b.w	8004d4c <_malloc_r>
 8004d02:	bf00      	nop
 8004d04:	20000190 	.word	0x20000190

08004d08 <sbrk_aligned>:
 8004d08:	b570      	push	{r4, r5, r6, lr}
 8004d0a:	4e0f      	ldr	r6, [pc, #60]	@ (8004d48 <sbrk_aligned+0x40>)
 8004d0c:	460c      	mov	r4, r1
 8004d0e:	6831      	ldr	r1, [r6, #0]
 8004d10:	4605      	mov	r5, r0
 8004d12:	b911      	cbnz	r1, 8004d1a <sbrk_aligned+0x12>
 8004d14:	f000 ff4c 	bl	8005bb0 <_sbrk_r>
 8004d18:	6030      	str	r0, [r6, #0]
 8004d1a:	4621      	mov	r1, r4
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	f000 ff47 	bl	8005bb0 <_sbrk_r>
 8004d22:	1c43      	adds	r3, r0, #1
 8004d24:	d103      	bne.n	8004d2e <sbrk_aligned+0x26>
 8004d26:	f04f 34ff 	mov.w	r4, #4294967295
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	bd70      	pop	{r4, r5, r6, pc}
 8004d2e:	1cc4      	adds	r4, r0, #3
 8004d30:	f024 0403 	bic.w	r4, r4, #3
 8004d34:	42a0      	cmp	r0, r4
 8004d36:	d0f8      	beq.n	8004d2a <sbrk_aligned+0x22>
 8004d38:	1a21      	subs	r1, r4, r0
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	f000 ff38 	bl	8005bb0 <_sbrk_r>
 8004d40:	3001      	adds	r0, #1
 8004d42:	d1f2      	bne.n	8004d2a <sbrk_aligned+0x22>
 8004d44:	e7ef      	b.n	8004d26 <sbrk_aligned+0x1e>
 8004d46:	bf00      	nop
 8004d48:	20000534 	.word	0x20000534

08004d4c <_malloc_r>:
 8004d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d50:	1ccd      	adds	r5, r1, #3
 8004d52:	f025 0503 	bic.w	r5, r5, #3
 8004d56:	3508      	adds	r5, #8
 8004d58:	2d0c      	cmp	r5, #12
 8004d5a:	bf38      	it	cc
 8004d5c:	250c      	movcc	r5, #12
 8004d5e:	2d00      	cmp	r5, #0
 8004d60:	4606      	mov	r6, r0
 8004d62:	db01      	blt.n	8004d68 <_malloc_r+0x1c>
 8004d64:	42a9      	cmp	r1, r5
 8004d66:	d904      	bls.n	8004d72 <_malloc_r+0x26>
 8004d68:	230c      	movs	r3, #12
 8004d6a:	6033      	str	r3, [r6, #0]
 8004d6c:	2000      	movs	r0, #0
 8004d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004e48 <_malloc_r+0xfc>
 8004d76:	f000 f869 	bl	8004e4c <__malloc_lock>
 8004d7a:	f8d8 3000 	ldr.w	r3, [r8]
 8004d7e:	461c      	mov	r4, r3
 8004d80:	bb44      	cbnz	r4, 8004dd4 <_malloc_r+0x88>
 8004d82:	4629      	mov	r1, r5
 8004d84:	4630      	mov	r0, r6
 8004d86:	f7ff ffbf 	bl	8004d08 <sbrk_aligned>
 8004d8a:	1c43      	adds	r3, r0, #1
 8004d8c:	4604      	mov	r4, r0
 8004d8e:	d158      	bne.n	8004e42 <_malloc_r+0xf6>
 8004d90:	f8d8 4000 	ldr.w	r4, [r8]
 8004d94:	4627      	mov	r7, r4
 8004d96:	2f00      	cmp	r7, #0
 8004d98:	d143      	bne.n	8004e22 <_malloc_r+0xd6>
 8004d9a:	2c00      	cmp	r4, #0
 8004d9c:	d04b      	beq.n	8004e36 <_malloc_r+0xea>
 8004d9e:	6823      	ldr	r3, [r4, #0]
 8004da0:	4639      	mov	r1, r7
 8004da2:	4630      	mov	r0, r6
 8004da4:	eb04 0903 	add.w	r9, r4, r3
 8004da8:	f000 ff02 	bl	8005bb0 <_sbrk_r>
 8004dac:	4581      	cmp	r9, r0
 8004dae:	d142      	bne.n	8004e36 <_malloc_r+0xea>
 8004db0:	6821      	ldr	r1, [r4, #0]
 8004db2:	4630      	mov	r0, r6
 8004db4:	1a6d      	subs	r5, r5, r1
 8004db6:	4629      	mov	r1, r5
 8004db8:	f7ff ffa6 	bl	8004d08 <sbrk_aligned>
 8004dbc:	3001      	adds	r0, #1
 8004dbe:	d03a      	beq.n	8004e36 <_malloc_r+0xea>
 8004dc0:	6823      	ldr	r3, [r4, #0]
 8004dc2:	442b      	add	r3, r5
 8004dc4:	6023      	str	r3, [r4, #0]
 8004dc6:	f8d8 3000 	ldr.w	r3, [r8]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	bb62      	cbnz	r2, 8004e28 <_malloc_r+0xdc>
 8004dce:	f8c8 7000 	str.w	r7, [r8]
 8004dd2:	e00f      	b.n	8004df4 <_malloc_r+0xa8>
 8004dd4:	6822      	ldr	r2, [r4, #0]
 8004dd6:	1b52      	subs	r2, r2, r5
 8004dd8:	d420      	bmi.n	8004e1c <_malloc_r+0xd0>
 8004dda:	2a0b      	cmp	r2, #11
 8004ddc:	d917      	bls.n	8004e0e <_malloc_r+0xc2>
 8004dde:	1961      	adds	r1, r4, r5
 8004de0:	42a3      	cmp	r3, r4
 8004de2:	6025      	str	r5, [r4, #0]
 8004de4:	bf18      	it	ne
 8004de6:	6059      	strne	r1, [r3, #4]
 8004de8:	6863      	ldr	r3, [r4, #4]
 8004dea:	bf08      	it	eq
 8004dec:	f8c8 1000 	streq.w	r1, [r8]
 8004df0:	5162      	str	r2, [r4, r5]
 8004df2:	604b      	str	r3, [r1, #4]
 8004df4:	4630      	mov	r0, r6
 8004df6:	f000 f82f 	bl	8004e58 <__malloc_unlock>
 8004dfa:	f104 000b 	add.w	r0, r4, #11
 8004dfe:	1d23      	adds	r3, r4, #4
 8004e00:	f020 0007 	bic.w	r0, r0, #7
 8004e04:	1ac2      	subs	r2, r0, r3
 8004e06:	bf1c      	itt	ne
 8004e08:	1a1b      	subne	r3, r3, r0
 8004e0a:	50a3      	strne	r3, [r4, r2]
 8004e0c:	e7af      	b.n	8004d6e <_malloc_r+0x22>
 8004e0e:	6862      	ldr	r2, [r4, #4]
 8004e10:	42a3      	cmp	r3, r4
 8004e12:	bf0c      	ite	eq
 8004e14:	f8c8 2000 	streq.w	r2, [r8]
 8004e18:	605a      	strne	r2, [r3, #4]
 8004e1a:	e7eb      	b.n	8004df4 <_malloc_r+0xa8>
 8004e1c:	4623      	mov	r3, r4
 8004e1e:	6864      	ldr	r4, [r4, #4]
 8004e20:	e7ae      	b.n	8004d80 <_malloc_r+0x34>
 8004e22:	463c      	mov	r4, r7
 8004e24:	687f      	ldr	r7, [r7, #4]
 8004e26:	e7b6      	b.n	8004d96 <_malloc_r+0x4a>
 8004e28:	461a      	mov	r2, r3
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	42a3      	cmp	r3, r4
 8004e2e:	d1fb      	bne.n	8004e28 <_malloc_r+0xdc>
 8004e30:	2300      	movs	r3, #0
 8004e32:	6053      	str	r3, [r2, #4]
 8004e34:	e7de      	b.n	8004df4 <_malloc_r+0xa8>
 8004e36:	230c      	movs	r3, #12
 8004e38:	4630      	mov	r0, r6
 8004e3a:	6033      	str	r3, [r6, #0]
 8004e3c:	f000 f80c 	bl	8004e58 <__malloc_unlock>
 8004e40:	e794      	b.n	8004d6c <_malloc_r+0x20>
 8004e42:	6005      	str	r5, [r0, #0]
 8004e44:	e7d6      	b.n	8004df4 <_malloc_r+0xa8>
 8004e46:	bf00      	nop
 8004e48:	20000538 	.word	0x20000538

08004e4c <__malloc_lock>:
 8004e4c:	4801      	ldr	r0, [pc, #4]	@ (8004e54 <__malloc_lock+0x8>)
 8004e4e:	f000 befc 	b.w	8005c4a <__retarget_lock_acquire_recursive>
 8004e52:	bf00      	nop
 8004e54:	2000067c 	.word	0x2000067c

08004e58 <__malloc_unlock>:
 8004e58:	4801      	ldr	r0, [pc, #4]	@ (8004e60 <__malloc_unlock+0x8>)
 8004e5a:	f000 bef7 	b.w	8005c4c <__retarget_lock_release_recursive>
 8004e5e:	bf00      	nop
 8004e60:	2000067c 	.word	0x2000067c

08004e64 <__cvt>:
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e6a:	461d      	mov	r5, r3
 8004e6c:	bfbb      	ittet	lt
 8004e6e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004e72:	461d      	movlt	r5, r3
 8004e74:	2300      	movge	r3, #0
 8004e76:	232d      	movlt	r3, #45	@ 0x2d
 8004e78:	b088      	sub	sp, #32
 8004e7a:	4614      	mov	r4, r2
 8004e7c:	bfb8      	it	lt
 8004e7e:	4614      	movlt	r4, r2
 8004e80:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004e82:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004e84:	7013      	strb	r3, [r2, #0]
 8004e86:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004e88:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004e8c:	f023 0820 	bic.w	r8, r3, #32
 8004e90:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004e94:	d005      	beq.n	8004ea2 <__cvt+0x3e>
 8004e96:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004e9a:	d100      	bne.n	8004e9e <__cvt+0x3a>
 8004e9c:	3601      	adds	r6, #1
 8004e9e:	2302      	movs	r3, #2
 8004ea0:	e000      	b.n	8004ea4 <__cvt+0x40>
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	aa07      	add	r2, sp, #28
 8004ea6:	9204      	str	r2, [sp, #16]
 8004ea8:	aa06      	add	r2, sp, #24
 8004eaa:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004eae:	e9cd 3600 	strd	r3, r6, [sp]
 8004eb2:	4622      	mov	r2, r4
 8004eb4:	462b      	mov	r3, r5
 8004eb6:	f000 ff8f 	bl	8005dd8 <_dtoa_r>
 8004eba:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004ebe:	4607      	mov	r7, r0
 8004ec0:	d119      	bne.n	8004ef6 <__cvt+0x92>
 8004ec2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004ec4:	07db      	lsls	r3, r3, #31
 8004ec6:	d50e      	bpl.n	8004ee6 <__cvt+0x82>
 8004ec8:	eb00 0906 	add.w	r9, r0, r6
 8004ecc:	2200      	movs	r2, #0
 8004ece:	2300      	movs	r3, #0
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	4629      	mov	r1, r5
 8004ed4:	f7fb fd68 	bl	80009a8 <__aeabi_dcmpeq>
 8004ed8:	b108      	cbz	r0, 8004ede <__cvt+0x7a>
 8004eda:	f8cd 901c 	str.w	r9, [sp, #28]
 8004ede:	2230      	movs	r2, #48	@ 0x30
 8004ee0:	9b07      	ldr	r3, [sp, #28]
 8004ee2:	454b      	cmp	r3, r9
 8004ee4:	d31e      	bcc.n	8004f24 <__cvt+0xc0>
 8004ee6:	4638      	mov	r0, r7
 8004ee8:	9b07      	ldr	r3, [sp, #28]
 8004eea:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004eec:	1bdb      	subs	r3, r3, r7
 8004eee:	6013      	str	r3, [r2, #0]
 8004ef0:	b008      	add	sp, #32
 8004ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ef6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004efa:	eb00 0906 	add.w	r9, r0, r6
 8004efe:	d1e5      	bne.n	8004ecc <__cvt+0x68>
 8004f00:	7803      	ldrb	r3, [r0, #0]
 8004f02:	2b30      	cmp	r3, #48	@ 0x30
 8004f04:	d10a      	bne.n	8004f1c <__cvt+0xb8>
 8004f06:	2200      	movs	r2, #0
 8004f08:	2300      	movs	r3, #0
 8004f0a:	4620      	mov	r0, r4
 8004f0c:	4629      	mov	r1, r5
 8004f0e:	f7fb fd4b 	bl	80009a8 <__aeabi_dcmpeq>
 8004f12:	b918      	cbnz	r0, 8004f1c <__cvt+0xb8>
 8004f14:	f1c6 0601 	rsb	r6, r6, #1
 8004f18:	f8ca 6000 	str.w	r6, [sl]
 8004f1c:	f8da 3000 	ldr.w	r3, [sl]
 8004f20:	4499      	add	r9, r3
 8004f22:	e7d3      	b.n	8004ecc <__cvt+0x68>
 8004f24:	1c59      	adds	r1, r3, #1
 8004f26:	9107      	str	r1, [sp, #28]
 8004f28:	701a      	strb	r2, [r3, #0]
 8004f2a:	e7d9      	b.n	8004ee0 <__cvt+0x7c>

08004f2c <__exponent>:
 8004f2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f2e:	2900      	cmp	r1, #0
 8004f30:	bfb6      	itet	lt
 8004f32:	232d      	movlt	r3, #45	@ 0x2d
 8004f34:	232b      	movge	r3, #43	@ 0x2b
 8004f36:	4249      	neglt	r1, r1
 8004f38:	2909      	cmp	r1, #9
 8004f3a:	7002      	strb	r2, [r0, #0]
 8004f3c:	7043      	strb	r3, [r0, #1]
 8004f3e:	dd29      	ble.n	8004f94 <__exponent+0x68>
 8004f40:	f10d 0307 	add.w	r3, sp, #7
 8004f44:	461d      	mov	r5, r3
 8004f46:	270a      	movs	r7, #10
 8004f48:	fbb1 f6f7 	udiv	r6, r1, r7
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	fb07 1416 	mls	r4, r7, r6, r1
 8004f52:	3430      	adds	r4, #48	@ 0x30
 8004f54:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004f58:	460c      	mov	r4, r1
 8004f5a:	2c63      	cmp	r4, #99	@ 0x63
 8004f5c:	4631      	mov	r1, r6
 8004f5e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004f62:	dcf1      	bgt.n	8004f48 <__exponent+0x1c>
 8004f64:	3130      	adds	r1, #48	@ 0x30
 8004f66:	1e94      	subs	r4, r2, #2
 8004f68:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004f6c:	4623      	mov	r3, r4
 8004f6e:	1c41      	adds	r1, r0, #1
 8004f70:	42ab      	cmp	r3, r5
 8004f72:	d30a      	bcc.n	8004f8a <__exponent+0x5e>
 8004f74:	f10d 0309 	add.w	r3, sp, #9
 8004f78:	1a9b      	subs	r3, r3, r2
 8004f7a:	42ac      	cmp	r4, r5
 8004f7c:	bf88      	it	hi
 8004f7e:	2300      	movhi	r3, #0
 8004f80:	3302      	adds	r3, #2
 8004f82:	4403      	add	r3, r0
 8004f84:	1a18      	subs	r0, r3, r0
 8004f86:	b003      	add	sp, #12
 8004f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f8a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004f8e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004f92:	e7ed      	b.n	8004f70 <__exponent+0x44>
 8004f94:	2330      	movs	r3, #48	@ 0x30
 8004f96:	3130      	adds	r1, #48	@ 0x30
 8004f98:	7083      	strb	r3, [r0, #2]
 8004f9a:	70c1      	strb	r1, [r0, #3]
 8004f9c:	1d03      	adds	r3, r0, #4
 8004f9e:	e7f1      	b.n	8004f84 <__exponent+0x58>

08004fa0 <_printf_float>:
 8004fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa4:	b091      	sub	sp, #68	@ 0x44
 8004fa6:	460c      	mov	r4, r1
 8004fa8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004fac:	4616      	mov	r6, r2
 8004fae:	461f      	mov	r7, r3
 8004fb0:	4605      	mov	r5, r0
 8004fb2:	f000 fdc5 	bl	8005b40 <_localeconv_r>
 8004fb6:	6803      	ldr	r3, [r0, #0]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	9308      	str	r3, [sp, #32]
 8004fbc:	f7fb f8c8 	bl	8000150 <strlen>
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	930e      	str	r3, [sp, #56]	@ 0x38
 8004fc4:	f8d8 3000 	ldr.w	r3, [r8]
 8004fc8:	9009      	str	r0, [sp, #36]	@ 0x24
 8004fca:	3307      	adds	r3, #7
 8004fcc:	f023 0307 	bic.w	r3, r3, #7
 8004fd0:	f103 0208 	add.w	r2, r3, #8
 8004fd4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004fd8:	f8d4 b000 	ldr.w	fp, [r4]
 8004fdc:	f8c8 2000 	str.w	r2, [r8]
 8004fe0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004fe4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004fe8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004fea:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004fee:	f04f 32ff 	mov.w	r2, #4294967295
 8004ff2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004ff6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004ffa:	4b9c      	ldr	r3, [pc, #624]	@ (800526c <_printf_float+0x2cc>)
 8004ffc:	f7fb fd06 	bl	8000a0c <__aeabi_dcmpun>
 8005000:	bb70      	cbnz	r0, 8005060 <_printf_float+0xc0>
 8005002:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005006:	f04f 32ff 	mov.w	r2, #4294967295
 800500a:	4b98      	ldr	r3, [pc, #608]	@ (800526c <_printf_float+0x2cc>)
 800500c:	f7fb fce0 	bl	80009d0 <__aeabi_dcmple>
 8005010:	bb30      	cbnz	r0, 8005060 <_printf_float+0xc0>
 8005012:	2200      	movs	r2, #0
 8005014:	2300      	movs	r3, #0
 8005016:	4640      	mov	r0, r8
 8005018:	4649      	mov	r1, r9
 800501a:	f7fb fccf 	bl	80009bc <__aeabi_dcmplt>
 800501e:	b110      	cbz	r0, 8005026 <_printf_float+0x86>
 8005020:	232d      	movs	r3, #45	@ 0x2d
 8005022:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005026:	4a92      	ldr	r2, [pc, #584]	@ (8005270 <_printf_float+0x2d0>)
 8005028:	4b92      	ldr	r3, [pc, #584]	@ (8005274 <_printf_float+0x2d4>)
 800502a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800502e:	bf94      	ite	ls
 8005030:	4690      	movls	r8, r2
 8005032:	4698      	movhi	r8, r3
 8005034:	2303      	movs	r3, #3
 8005036:	f04f 0900 	mov.w	r9, #0
 800503a:	6123      	str	r3, [r4, #16]
 800503c:	f02b 0304 	bic.w	r3, fp, #4
 8005040:	6023      	str	r3, [r4, #0]
 8005042:	4633      	mov	r3, r6
 8005044:	4621      	mov	r1, r4
 8005046:	4628      	mov	r0, r5
 8005048:	9700      	str	r7, [sp, #0]
 800504a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800504c:	f000 f9d4 	bl	80053f8 <_printf_common>
 8005050:	3001      	adds	r0, #1
 8005052:	f040 8090 	bne.w	8005176 <_printf_float+0x1d6>
 8005056:	f04f 30ff 	mov.w	r0, #4294967295
 800505a:	b011      	add	sp, #68	@ 0x44
 800505c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005060:	4642      	mov	r2, r8
 8005062:	464b      	mov	r3, r9
 8005064:	4640      	mov	r0, r8
 8005066:	4649      	mov	r1, r9
 8005068:	f7fb fcd0 	bl	8000a0c <__aeabi_dcmpun>
 800506c:	b148      	cbz	r0, 8005082 <_printf_float+0xe2>
 800506e:	464b      	mov	r3, r9
 8005070:	2b00      	cmp	r3, #0
 8005072:	bfb8      	it	lt
 8005074:	232d      	movlt	r3, #45	@ 0x2d
 8005076:	4a80      	ldr	r2, [pc, #512]	@ (8005278 <_printf_float+0x2d8>)
 8005078:	bfb8      	it	lt
 800507a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800507e:	4b7f      	ldr	r3, [pc, #508]	@ (800527c <_printf_float+0x2dc>)
 8005080:	e7d3      	b.n	800502a <_printf_float+0x8a>
 8005082:	6863      	ldr	r3, [r4, #4]
 8005084:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	d13f      	bne.n	800510c <_printf_float+0x16c>
 800508c:	2306      	movs	r3, #6
 800508e:	6063      	str	r3, [r4, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005096:	6023      	str	r3, [r4, #0]
 8005098:	9206      	str	r2, [sp, #24]
 800509a:	aa0e      	add	r2, sp, #56	@ 0x38
 800509c:	e9cd a204 	strd	sl, r2, [sp, #16]
 80050a0:	aa0d      	add	r2, sp, #52	@ 0x34
 80050a2:	9203      	str	r2, [sp, #12]
 80050a4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80050a8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80050ac:	6863      	ldr	r3, [r4, #4]
 80050ae:	4642      	mov	r2, r8
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	4628      	mov	r0, r5
 80050b4:	464b      	mov	r3, r9
 80050b6:	910a      	str	r1, [sp, #40]	@ 0x28
 80050b8:	f7ff fed4 	bl	8004e64 <__cvt>
 80050bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80050be:	4680      	mov	r8, r0
 80050c0:	2947      	cmp	r1, #71	@ 0x47
 80050c2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80050c4:	d128      	bne.n	8005118 <_printf_float+0x178>
 80050c6:	1cc8      	adds	r0, r1, #3
 80050c8:	db02      	blt.n	80050d0 <_printf_float+0x130>
 80050ca:	6863      	ldr	r3, [r4, #4]
 80050cc:	4299      	cmp	r1, r3
 80050ce:	dd40      	ble.n	8005152 <_printf_float+0x1b2>
 80050d0:	f1aa 0a02 	sub.w	sl, sl, #2
 80050d4:	fa5f fa8a 	uxtb.w	sl, sl
 80050d8:	4652      	mov	r2, sl
 80050da:	3901      	subs	r1, #1
 80050dc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80050e0:	910d      	str	r1, [sp, #52]	@ 0x34
 80050e2:	f7ff ff23 	bl	8004f2c <__exponent>
 80050e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80050e8:	4681      	mov	r9, r0
 80050ea:	1813      	adds	r3, r2, r0
 80050ec:	2a01      	cmp	r2, #1
 80050ee:	6123      	str	r3, [r4, #16]
 80050f0:	dc02      	bgt.n	80050f8 <_printf_float+0x158>
 80050f2:	6822      	ldr	r2, [r4, #0]
 80050f4:	07d2      	lsls	r2, r2, #31
 80050f6:	d501      	bpl.n	80050fc <_printf_float+0x15c>
 80050f8:	3301      	adds	r3, #1
 80050fa:	6123      	str	r3, [r4, #16]
 80050fc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005100:	2b00      	cmp	r3, #0
 8005102:	d09e      	beq.n	8005042 <_printf_float+0xa2>
 8005104:	232d      	movs	r3, #45	@ 0x2d
 8005106:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800510a:	e79a      	b.n	8005042 <_printf_float+0xa2>
 800510c:	2947      	cmp	r1, #71	@ 0x47
 800510e:	d1bf      	bne.n	8005090 <_printf_float+0xf0>
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1bd      	bne.n	8005090 <_printf_float+0xf0>
 8005114:	2301      	movs	r3, #1
 8005116:	e7ba      	b.n	800508e <_printf_float+0xee>
 8005118:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800511c:	d9dc      	bls.n	80050d8 <_printf_float+0x138>
 800511e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005122:	d118      	bne.n	8005156 <_printf_float+0x1b6>
 8005124:	2900      	cmp	r1, #0
 8005126:	6863      	ldr	r3, [r4, #4]
 8005128:	dd0b      	ble.n	8005142 <_printf_float+0x1a2>
 800512a:	6121      	str	r1, [r4, #16]
 800512c:	b913      	cbnz	r3, 8005134 <_printf_float+0x194>
 800512e:	6822      	ldr	r2, [r4, #0]
 8005130:	07d0      	lsls	r0, r2, #31
 8005132:	d502      	bpl.n	800513a <_printf_float+0x19a>
 8005134:	3301      	adds	r3, #1
 8005136:	440b      	add	r3, r1
 8005138:	6123      	str	r3, [r4, #16]
 800513a:	f04f 0900 	mov.w	r9, #0
 800513e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005140:	e7dc      	b.n	80050fc <_printf_float+0x15c>
 8005142:	b913      	cbnz	r3, 800514a <_printf_float+0x1aa>
 8005144:	6822      	ldr	r2, [r4, #0]
 8005146:	07d2      	lsls	r2, r2, #31
 8005148:	d501      	bpl.n	800514e <_printf_float+0x1ae>
 800514a:	3302      	adds	r3, #2
 800514c:	e7f4      	b.n	8005138 <_printf_float+0x198>
 800514e:	2301      	movs	r3, #1
 8005150:	e7f2      	b.n	8005138 <_printf_float+0x198>
 8005152:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005156:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005158:	4299      	cmp	r1, r3
 800515a:	db05      	blt.n	8005168 <_printf_float+0x1c8>
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	6121      	str	r1, [r4, #16]
 8005160:	07d8      	lsls	r0, r3, #31
 8005162:	d5ea      	bpl.n	800513a <_printf_float+0x19a>
 8005164:	1c4b      	adds	r3, r1, #1
 8005166:	e7e7      	b.n	8005138 <_printf_float+0x198>
 8005168:	2900      	cmp	r1, #0
 800516a:	bfcc      	ite	gt
 800516c:	2201      	movgt	r2, #1
 800516e:	f1c1 0202 	rsble	r2, r1, #2
 8005172:	4413      	add	r3, r2
 8005174:	e7e0      	b.n	8005138 <_printf_float+0x198>
 8005176:	6823      	ldr	r3, [r4, #0]
 8005178:	055a      	lsls	r2, r3, #21
 800517a:	d407      	bmi.n	800518c <_printf_float+0x1ec>
 800517c:	6923      	ldr	r3, [r4, #16]
 800517e:	4642      	mov	r2, r8
 8005180:	4631      	mov	r1, r6
 8005182:	4628      	mov	r0, r5
 8005184:	47b8      	blx	r7
 8005186:	3001      	adds	r0, #1
 8005188:	d12b      	bne.n	80051e2 <_printf_float+0x242>
 800518a:	e764      	b.n	8005056 <_printf_float+0xb6>
 800518c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005190:	f240 80dc 	bls.w	800534c <_printf_float+0x3ac>
 8005194:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005198:	2200      	movs	r2, #0
 800519a:	2300      	movs	r3, #0
 800519c:	f7fb fc04 	bl	80009a8 <__aeabi_dcmpeq>
 80051a0:	2800      	cmp	r0, #0
 80051a2:	d033      	beq.n	800520c <_printf_float+0x26c>
 80051a4:	2301      	movs	r3, #1
 80051a6:	4631      	mov	r1, r6
 80051a8:	4628      	mov	r0, r5
 80051aa:	4a35      	ldr	r2, [pc, #212]	@ (8005280 <_printf_float+0x2e0>)
 80051ac:	47b8      	blx	r7
 80051ae:	3001      	adds	r0, #1
 80051b0:	f43f af51 	beq.w	8005056 <_printf_float+0xb6>
 80051b4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80051b8:	4543      	cmp	r3, r8
 80051ba:	db02      	blt.n	80051c2 <_printf_float+0x222>
 80051bc:	6823      	ldr	r3, [r4, #0]
 80051be:	07d8      	lsls	r0, r3, #31
 80051c0:	d50f      	bpl.n	80051e2 <_printf_float+0x242>
 80051c2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80051c6:	4631      	mov	r1, r6
 80051c8:	4628      	mov	r0, r5
 80051ca:	47b8      	blx	r7
 80051cc:	3001      	adds	r0, #1
 80051ce:	f43f af42 	beq.w	8005056 <_printf_float+0xb6>
 80051d2:	f04f 0900 	mov.w	r9, #0
 80051d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80051da:	f104 0a1a 	add.w	sl, r4, #26
 80051de:	45c8      	cmp	r8, r9
 80051e0:	dc09      	bgt.n	80051f6 <_printf_float+0x256>
 80051e2:	6823      	ldr	r3, [r4, #0]
 80051e4:	079b      	lsls	r3, r3, #30
 80051e6:	f100 8102 	bmi.w	80053ee <_printf_float+0x44e>
 80051ea:	68e0      	ldr	r0, [r4, #12]
 80051ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80051ee:	4298      	cmp	r0, r3
 80051f0:	bfb8      	it	lt
 80051f2:	4618      	movlt	r0, r3
 80051f4:	e731      	b.n	800505a <_printf_float+0xba>
 80051f6:	2301      	movs	r3, #1
 80051f8:	4652      	mov	r2, sl
 80051fa:	4631      	mov	r1, r6
 80051fc:	4628      	mov	r0, r5
 80051fe:	47b8      	blx	r7
 8005200:	3001      	adds	r0, #1
 8005202:	f43f af28 	beq.w	8005056 <_printf_float+0xb6>
 8005206:	f109 0901 	add.w	r9, r9, #1
 800520a:	e7e8      	b.n	80051de <_printf_float+0x23e>
 800520c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800520e:	2b00      	cmp	r3, #0
 8005210:	dc38      	bgt.n	8005284 <_printf_float+0x2e4>
 8005212:	2301      	movs	r3, #1
 8005214:	4631      	mov	r1, r6
 8005216:	4628      	mov	r0, r5
 8005218:	4a19      	ldr	r2, [pc, #100]	@ (8005280 <_printf_float+0x2e0>)
 800521a:	47b8      	blx	r7
 800521c:	3001      	adds	r0, #1
 800521e:	f43f af1a 	beq.w	8005056 <_printf_float+0xb6>
 8005222:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005226:	ea59 0303 	orrs.w	r3, r9, r3
 800522a:	d102      	bne.n	8005232 <_printf_float+0x292>
 800522c:	6823      	ldr	r3, [r4, #0]
 800522e:	07d9      	lsls	r1, r3, #31
 8005230:	d5d7      	bpl.n	80051e2 <_printf_float+0x242>
 8005232:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005236:	4631      	mov	r1, r6
 8005238:	4628      	mov	r0, r5
 800523a:	47b8      	blx	r7
 800523c:	3001      	adds	r0, #1
 800523e:	f43f af0a 	beq.w	8005056 <_printf_float+0xb6>
 8005242:	f04f 0a00 	mov.w	sl, #0
 8005246:	f104 0b1a 	add.w	fp, r4, #26
 800524a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800524c:	425b      	negs	r3, r3
 800524e:	4553      	cmp	r3, sl
 8005250:	dc01      	bgt.n	8005256 <_printf_float+0x2b6>
 8005252:	464b      	mov	r3, r9
 8005254:	e793      	b.n	800517e <_printf_float+0x1de>
 8005256:	2301      	movs	r3, #1
 8005258:	465a      	mov	r2, fp
 800525a:	4631      	mov	r1, r6
 800525c:	4628      	mov	r0, r5
 800525e:	47b8      	blx	r7
 8005260:	3001      	adds	r0, #1
 8005262:	f43f aef8 	beq.w	8005056 <_printf_float+0xb6>
 8005266:	f10a 0a01 	add.w	sl, sl, #1
 800526a:	e7ee      	b.n	800524a <_printf_float+0x2aa>
 800526c:	7fefffff 	.word	0x7fefffff
 8005270:	08007a9f 	.word	0x08007a9f
 8005274:	08007aa3 	.word	0x08007aa3
 8005278:	08007aa7 	.word	0x08007aa7
 800527c:	08007aab 	.word	0x08007aab
 8005280:	08007aaf 	.word	0x08007aaf
 8005284:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005286:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800528a:	4553      	cmp	r3, sl
 800528c:	bfa8      	it	ge
 800528e:	4653      	movge	r3, sl
 8005290:	2b00      	cmp	r3, #0
 8005292:	4699      	mov	r9, r3
 8005294:	dc36      	bgt.n	8005304 <_printf_float+0x364>
 8005296:	f04f 0b00 	mov.w	fp, #0
 800529a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800529e:	f104 021a 	add.w	r2, r4, #26
 80052a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80052a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80052a6:	eba3 0309 	sub.w	r3, r3, r9
 80052aa:	455b      	cmp	r3, fp
 80052ac:	dc31      	bgt.n	8005312 <_printf_float+0x372>
 80052ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80052b0:	459a      	cmp	sl, r3
 80052b2:	dc3a      	bgt.n	800532a <_printf_float+0x38a>
 80052b4:	6823      	ldr	r3, [r4, #0]
 80052b6:	07da      	lsls	r2, r3, #31
 80052b8:	d437      	bmi.n	800532a <_printf_float+0x38a>
 80052ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80052bc:	ebaa 0903 	sub.w	r9, sl, r3
 80052c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052c2:	ebaa 0303 	sub.w	r3, sl, r3
 80052c6:	4599      	cmp	r9, r3
 80052c8:	bfa8      	it	ge
 80052ca:	4699      	movge	r9, r3
 80052cc:	f1b9 0f00 	cmp.w	r9, #0
 80052d0:	dc33      	bgt.n	800533a <_printf_float+0x39a>
 80052d2:	f04f 0800 	mov.w	r8, #0
 80052d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052da:	f104 0b1a 	add.w	fp, r4, #26
 80052de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80052e0:	ebaa 0303 	sub.w	r3, sl, r3
 80052e4:	eba3 0309 	sub.w	r3, r3, r9
 80052e8:	4543      	cmp	r3, r8
 80052ea:	f77f af7a 	ble.w	80051e2 <_printf_float+0x242>
 80052ee:	2301      	movs	r3, #1
 80052f0:	465a      	mov	r2, fp
 80052f2:	4631      	mov	r1, r6
 80052f4:	4628      	mov	r0, r5
 80052f6:	47b8      	blx	r7
 80052f8:	3001      	adds	r0, #1
 80052fa:	f43f aeac 	beq.w	8005056 <_printf_float+0xb6>
 80052fe:	f108 0801 	add.w	r8, r8, #1
 8005302:	e7ec      	b.n	80052de <_printf_float+0x33e>
 8005304:	4642      	mov	r2, r8
 8005306:	4631      	mov	r1, r6
 8005308:	4628      	mov	r0, r5
 800530a:	47b8      	blx	r7
 800530c:	3001      	adds	r0, #1
 800530e:	d1c2      	bne.n	8005296 <_printf_float+0x2f6>
 8005310:	e6a1      	b.n	8005056 <_printf_float+0xb6>
 8005312:	2301      	movs	r3, #1
 8005314:	4631      	mov	r1, r6
 8005316:	4628      	mov	r0, r5
 8005318:	920a      	str	r2, [sp, #40]	@ 0x28
 800531a:	47b8      	blx	r7
 800531c:	3001      	adds	r0, #1
 800531e:	f43f ae9a 	beq.w	8005056 <_printf_float+0xb6>
 8005322:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005324:	f10b 0b01 	add.w	fp, fp, #1
 8005328:	e7bb      	b.n	80052a2 <_printf_float+0x302>
 800532a:	4631      	mov	r1, r6
 800532c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005330:	4628      	mov	r0, r5
 8005332:	47b8      	blx	r7
 8005334:	3001      	adds	r0, #1
 8005336:	d1c0      	bne.n	80052ba <_printf_float+0x31a>
 8005338:	e68d      	b.n	8005056 <_printf_float+0xb6>
 800533a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800533c:	464b      	mov	r3, r9
 800533e:	4631      	mov	r1, r6
 8005340:	4628      	mov	r0, r5
 8005342:	4442      	add	r2, r8
 8005344:	47b8      	blx	r7
 8005346:	3001      	adds	r0, #1
 8005348:	d1c3      	bne.n	80052d2 <_printf_float+0x332>
 800534a:	e684      	b.n	8005056 <_printf_float+0xb6>
 800534c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005350:	f1ba 0f01 	cmp.w	sl, #1
 8005354:	dc01      	bgt.n	800535a <_printf_float+0x3ba>
 8005356:	07db      	lsls	r3, r3, #31
 8005358:	d536      	bpl.n	80053c8 <_printf_float+0x428>
 800535a:	2301      	movs	r3, #1
 800535c:	4642      	mov	r2, r8
 800535e:	4631      	mov	r1, r6
 8005360:	4628      	mov	r0, r5
 8005362:	47b8      	blx	r7
 8005364:	3001      	adds	r0, #1
 8005366:	f43f ae76 	beq.w	8005056 <_printf_float+0xb6>
 800536a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800536e:	4631      	mov	r1, r6
 8005370:	4628      	mov	r0, r5
 8005372:	47b8      	blx	r7
 8005374:	3001      	adds	r0, #1
 8005376:	f43f ae6e 	beq.w	8005056 <_printf_float+0xb6>
 800537a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800537e:	2200      	movs	r2, #0
 8005380:	2300      	movs	r3, #0
 8005382:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005386:	f7fb fb0f 	bl	80009a8 <__aeabi_dcmpeq>
 800538a:	b9c0      	cbnz	r0, 80053be <_printf_float+0x41e>
 800538c:	4653      	mov	r3, sl
 800538e:	f108 0201 	add.w	r2, r8, #1
 8005392:	4631      	mov	r1, r6
 8005394:	4628      	mov	r0, r5
 8005396:	47b8      	blx	r7
 8005398:	3001      	adds	r0, #1
 800539a:	d10c      	bne.n	80053b6 <_printf_float+0x416>
 800539c:	e65b      	b.n	8005056 <_printf_float+0xb6>
 800539e:	2301      	movs	r3, #1
 80053a0:	465a      	mov	r2, fp
 80053a2:	4631      	mov	r1, r6
 80053a4:	4628      	mov	r0, r5
 80053a6:	47b8      	blx	r7
 80053a8:	3001      	adds	r0, #1
 80053aa:	f43f ae54 	beq.w	8005056 <_printf_float+0xb6>
 80053ae:	f108 0801 	add.w	r8, r8, #1
 80053b2:	45d0      	cmp	r8, sl
 80053b4:	dbf3      	blt.n	800539e <_printf_float+0x3fe>
 80053b6:	464b      	mov	r3, r9
 80053b8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80053bc:	e6e0      	b.n	8005180 <_printf_float+0x1e0>
 80053be:	f04f 0800 	mov.w	r8, #0
 80053c2:	f104 0b1a 	add.w	fp, r4, #26
 80053c6:	e7f4      	b.n	80053b2 <_printf_float+0x412>
 80053c8:	2301      	movs	r3, #1
 80053ca:	4642      	mov	r2, r8
 80053cc:	e7e1      	b.n	8005392 <_printf_float+0x3f2>
 80053ce:	2301      	movs	r3, #1
 80053d0:	464a      	mov	r2, r9
 80053d2:	4631      	mov	r1, r6
 80053d4:	4628      	mov	r0, r5
 80053d6:	47b8      	blx	r7
 80053d8:	3001      	adds	r0, #1
 80053da:	f43f ae3c 	beq.w	8005056 <_printf_float+0xb6>
 80053de:	f108 0801 	add.w	r8, r8, #1
 80053e2:	68e3      	ldr	r3, [r4, #12]
 80053e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80053e6:	1a5b      	subs	r3, r3, r1
 80053e8:	4543      	cmp	r3, r8
 80053ea:	dcf0      	bgt.n	80053ce <_printf_float+0x42e>
 80053ec:	e6fd      	b.n	80051ea <_printf_float+0x24a>
 80053ee:	f04f 0800 	mov.w	r8, #0
 80053f2:	f104 0919 	add.w	r9, r4, #25
 80053f6:	e7f4      	b.n	80053e2 <_printf_float+0x442>

080053f8 <_printf_common>:
 80053f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053fc:	4616      	mov	r6, r2
 80053fe:	4698      	mov	r8, r3
 8005400:	688a      	ldr	r2, [r1, #8]
 8005402:	690b      	ldr	r3, [r1, #16]
 8005404:	4607      	mov	r7, r0
 8005406:	4293      	cmp	r3, r2
 8005408:	bfb8      	it	lt
 800540a:	4613      	movlt	r3, r2
 800540c:	6033      	str	r3, [r6, #0]
 800540e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005412:	460c      	mov	r4, r1
 8005414:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005418:	b10a      	cbz	r2, 800541e <_printf_common+0x26>
 800541a:	3301      	adds	r3, #1
 800541c:	6033      	str	r3, [r6, #0]
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	0699      	lsls	r1, r3, #26
 8005422:	bf42      	ittt	mi
 8005424:	6833      	ldrmi	r3, [r6, #0]
 8005426:	3302      	addmi	r3, #2
 8005428:	6033      	strmi	r3, [r6, #0]
 800542a:	6825      	ldr	r5, [r4, #0]
 800542c:	f015 0506 	ands.w	r5, r5, #6
 8005430:	d106      	bne.n	8005440 <_printf_common+0x48>
 8005432:	f104 0a19 	add.w	sl, r4, #25
 8005436:	68e3      	ldr	r3, [r4, #12]
 8005438:	6832      	ldr	r2, [r6, #0]
 800543a:	1a9b      	subs	r3, r3, r2
 800543c:	42ab      	cmp	r3, r5
 800543e:	dc2b      	bgt.n	8005498 <_printf_common+0xa0>
 8005440:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005444:	6822      	ldr	r2, [r4, #0]
 8005446:	3b00      	subs	r3, #0
 8005448:	bf18      	it	ne
 800544a:	2301      	movne	r3, #1
 800544c:	0692      	lsls	r2, r2, #26
 800544e:	d430      	bmi.n	80054b2 <_printf_common+0xba>
 8005450:	4641      	mov	r1, r8
 8005452:	4638      	mov	r0, r7
 8005454:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005458:	47c8      	blx	r9
 800545a:	3001      	adds	r0, #1
 800545c:	d023      	beq.n	80054a6 <_printf_common+0xae>
 800545e:	6823      	ldr	r3, [r4, #0]
 8005460:	6922      	ldr	r2, [r4, #16]
 8005462:	f003 0306 	and.w	r3, r3, #6
 8005466:	2b04      	cmp	r3, #4
 8005468:	bf14      	ite	ne
 800546a:	2500      	movne	r5, #0
 800546c:	6833      	ldreq	r3, [r6, #0]
 800546e:	f04f 0600 	mov.w	r6, #0
 8005472:	bf08      	it	eq
 8005474:	68e5      	ldreq	r5, [r4, #12]
 8005476:	f104 041a 	add.w	r4, r4, #26
 800547a:	bf08      	it	eq
 800547c:	1aed      	subeq	r5, r5, r3
 800547e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005482:	bf08      	it	eq
 8005484:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005488:	4293      	cmp	r3, r2
 800548a:	bfc4      	itt	gt
 800548c:	1a9b      	subgt	r3, r3, r2
 800548e:	18ed      	addgt	r5, r5, r3
 8005490:	42b5      	cmp	r5, r6
 8005492:	d11a      	bne.n	80054ca <_printf_common+0xd2>
 8005494:	2000      	movs	r0, #0
 8005496:	e008      	b.n	80054aa <_printf_common+0xb2>
 8005498:	2301      	movs	r3, #1
 800549a:	4652      	mov	r2, sl
 800549c:	4641      	mov	r1, r8
 800549e:	4638      	mov	r0, r7
 80054a0:	47c8      	blx	r9
 80054a2:	3001      	adds	r0, #1
 80054a4:	d103      	bne.n	80054ae <_printf_common+0xb6>
 80054a6:	f04f 30ff 	mov.w	r0, #4294967295
 80054aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054ae:	3501      	adds	r5, #1
 80054b0:	e7c1      	b.n	8005436 <_printf_common+0x3e>
 80054b2:	2030      	movs	r0, #48	@ 0x30
 80054b4:	18e1      	adds	r1, r4, r3
 80054b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80054ba:	1c5a      	adds	r2, r3, #1
 80054bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80054c0:	4422      	add	r2, r4
 80054c2:	3302      	adds	r3, #2
 80054c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80054c8:	e7c2      	b.n	8005450 <_printf_common+0x58>
 80054ca:	2301      	movs	r3, #1
 80054cc:	4622      	mov	r2, r4
 80054ce:	4641      	mov	r1, r8
 80054d0:	4638      	mov	r0, r7
 80054d2:	47c8      	blx	r9
 80054d4:	3001      	adds	r0, #1
 80054d6:	d0e6      	beq.n	80054a6 <_printf_common+0xae>
 80054d8:	3601      	adds	r6, #1
 80054da:	e7d9      	b.n	8005490 <_printf_common+0x98>

080054dc <_printf_i>:
 80054dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054e0:	7e0f      	ldrb	r7, [r1, #24]
 80054e2:	4691      	mov	r9, r2
 80054e4:	2f78      	cmp	r7, #120	@ 0x78
 80054e6:	4680      	mov	r8, r0
 80054e8:	460c      	mov	r4, r1
 80054ea:	469a      	mov	sl, r3
 80054ec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80054ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80054f2:	d807      	bhi.n	8005504 <_printf_i+0x28>
 80054f4:	2f62      	cmp	r7, #98	@ 0x62
 80054f6:	d80a      	bhi.n	800550e <_printf_i+0x32>
 80054f8:	2f00      	cmp	r7, #0
 80054fa:	f000 80d3 	beq.w	80056a4 <_printf_i+0x1c8>
 80054fe:	2f58      	cmp	r7, #88	@ 0x58
 8005500:	f000 80ba 	beq.w	8005678 <_printf_i+0x19c>
 8005504:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005508:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800550c:	e03a      	b.n	8005584 <_printf_i+0xa8>
 800550e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005512:	2b15      	cmp	r3, #21
 8005514:	d8f6      	bhi.n	8005504 <_printf_i+0x28>
 8005516:	a101      	add	r1, pc, #4	@ (adr r1, 800551c <_printf_i+0x40>)
 8005518:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800551c:	08005575 	.word	0x08005575
 8005520:	08005589 	.word	0x08005589
 8005524:	08005505 	.word	0x08005505
 8005528:	08005505 	.word	0x08005505
 800552c:	08005505 	.word	0x08005505
 8005530:	08005505 	.word	0x08005505
 8005534:	08005589 	.word	0x08005589
 8005538:	08005505 	.word	0x08005505
 800553c:	08005505 	.word	0x08005505
 8005540:	08005505 	.word	0x08005505
 8005544:	08005505 	.word	0x08005505
 8005548:	0800568b 	.word	0x0800568b
 800554c:	080055b3 	.word	0x080055b3
 8005550:	08005645 	.word	0x08005645
 8005554:	08005505 	.word	0x08005505
 8005558:	08005505 	.word	0x08005505
 800555c:	080056ad 	.word	0x080056ad
 8005560:	08005505 	.word	0x08005505
 8005564:	080055b3 	.word	0x080055b3
 8005568:	08005505 	.word	0x08005505
 800556c:	08005505 	.word	0x08005505
 8005570:	0800564d 	.word	0x0800564d
 8005574:	6833      	ldr	r3, [r6, #0]
 8005576:	1d1a      	adds	r2, r3, #4
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6032      	str	r2, [r6, #0]
 800557c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005580:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005584:	2301      	movs	r3, #1
 8005586:	e09e      	b.n	80056c6 <_printf_i+0x1ea>
 8005588:	6833      	ldr	r3, [r6, #0]
 800558a:	6820      	ldr	r0, [r4, #0]
 800558c:	1d19      	adds	r1, r3, #4
 800558e:	6031      	str	r1, [r6, #0]
 8005590:	0606      	lsls	r6, r0, #24
 8005592:	d501      	bpl.n	8005598 <_printf_i+0xbc>
 8005594:	681d      	ldr	r5, [r3, #0]
 8005596:	e003      	b.n	80055a0 <_printf_i+0xc4>
 8005598:	0645      	lsls	r5, r0, #25
 800559a:	d5fb      	bpl.n	8005594 <_printf_i+0xb8>
 800559c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80055a0:	2d00      	cmp	r5, #0
 80055a2:	da03      	bge.n	80055ac <_printf_i+0xd0>
 80055a4:	232d      	movs	r3, #45	@ 0x2d
 80055a6:	426d      	negs	r5, r5
 80055a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055ac:	230a      	movs	r3, #10
 80055ae:	4859      	ldr	r0, [pc, #356]	@ (8005714 <_printf_i+0x238>)
 80055b0:	e011      	b.n	80055d6 <_printf_i+0xfa>
 80055b2:	6821      	ldr	r1, [r4, #0]
 80055b4:	6833      	ldr	r3, [r6, #0]
 80055b6:	0608      	lsls	r0, r1, #24
 80055b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80055bc:	d402      	bmi.n	80055c4 <_printf_i+0xe8>
 80055be:	0649      	lsls	r1, r1, #25
 80055c0:	bf48      	it	mi
 80055c2:	b2ad      	uxthmi	r5, r5
 80055c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80055c6:	6033      	str	r3, [r6, #0]
 80055c8:	bf14      	ite	ne
 80055ca:	230a      	movne	r3, #10
 80055cc:	2308      	moveq	r3, #8
 80055ce:	4851      	ldr	r0, [pc, #324]	@ (8005714 <_printf_i+0x238>)
 80055d0:	2100      	movs	r1, #0
 80055d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80055d6:	6866      	ldr	r6, [r4, #4]
 80055d8:	2e00      	cmp	r6, #0
 80055da:	bfa8      	it	ge
 80055dc:	6821      	ldrge	r1, [r4, #0]
 80055de:	60a6      	str	r6, [r4, #8]
 80055e0:	bfa4      	itt	ge
 80055e2:	f021 0104 	bicge.w	r1, r1, #4
 80055e6:	6021      	strge	r1, [r4, #0]
 80055e8:	b90d      	cbnz	r5, 80055ee <_printf_i+0x112>
 80055ea:	2e00      	cmp	r6, #0
 80055ec:	d04b      	beq.n	8005686 <_printf_i+0x1aa>
 80055ee:	4616      	mov	r6, r2
 80055f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80055f4:	fb03 5711 	mls	r7, r3, r1, r5
 80055f8:	5dc7      	ldrb	r7, [r0, r7]
 80055fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80055fe:	462f      	mov	r7, r5
 8005600:	42bb      	cmp	r3, r7
 8005602:	460d      	mov	r5, r1
 8005604:	d9f4      	bls.n	80055f0 <_printf_i+0x114>
 8005606:	2b08      	cmp	r3, #8
 8005608:	d10b      	bne.n	8005622 <_printf_i+0x146>
 800560a:	6823      	ldr	r3, [r4, #0]
 800560c:	07df      	lsls	r7, r3, #31
 800560e:	d508      	bpl.n	8005622 <_printf_i+0x146>
 8005610:	6923      	ldr	r3, [r4, #16]
 8005612:	6861      	ldr	r1, [r4, #4]
 8005614:	4299      	cmp	r1, r3
 8005616:	bfde      	ittt	le
 8005618:	2330      	movle	r3, #48	@ 0x30
 800561a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800561e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005622:	1b92      	subs	r2, r2, r6
 8005624:	6122      	str	r2, [r4, #16]
 8005626:	464b      	mov	r3, r9
 8005628:	4621      	mov	r1, r4
 800562a:	4640      	mov	r0, r8
 800562c:	f8cd a000 	str.w	sl, [sp]
 8005630:	aa03      	add	r2, sp, #12
 8005632:	f7ff fee1 	bl	80053f8 <_printf_common>
 8005636:	3001      	adds	r0, #1
 8005638:	d14a      	bne.n	80056d0 <_printf_i+0x1f4>
 800563a:	f04f 30ff 	mov.w	r0, #4294967295
 800563e:	b004      	add	sp, #16
 8005640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005644:	6823      	ldr	r3, [r4, #0]
 8005646:	f043 0320 	orr.w	r3, r3, #32
 800564a:	6023      	str	r3, [r4, #0]
 800564c:	2778      	movs	r7, #120	@ 0x78
 800564e:	4832      	ldr	r0, [pc, #200]	@ (8005718 <_printf_i+0x23c>)
 8005650:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005654:	6823      	ldr	r3, [r4, #0]
 8005656:	6831      	ldr	r1, [r6, #0]
 8005658:	061f      	lsls	r7, r3, #24
 800565a:	f851 5b04 	ldr.w	r5, [r1], #4
 800565e:	d402      	bmi.n	8005666 <_printf_i+0x18a>
 8005660:	065f      	lsls	r7, r3, #25
 8005662:	bf48      	it	mi
 8005664:	b2ad      	uxthmi	r5, r5
 8005666:	6031      	str	r1, [r6, #0]
 8005668:	07d9      	lsls	r1, r3, #31
 800566a:	bf44      	itt	mi
 800566c:	f043 0320 	orrmi.w	r3, r3, #32
 8005670:	6023      	strmi	r3, [r4, #0]
 8005672:	b11d      	cbz	r5, 800567c <_printf_i+0x1a0>
 8005674:	2310      	movs	r3, #16
 8005676:	e7ab      	b.n	80055d0 <_printf_i+0xf4>
 8005678:	4826      	ldr	r0, [pc, #152]	@ (8005714 <_printf_i+0x238>)
 800567a:	e7e9      	b.n	8005650 <_printf_i+0x174>
 800567c:	6823      	ldr	r3, [r4, #0]
 800567e:	f023 0320 	bic.w	r3, r3, #32
 8005682:	6023      	str	r3, [r4, #0]
 8005684:	e7f6      	b.n	8005674 <_printf_i+0x198>
 8005686:	4616      	mov	r6, r2
 8005688:	e7bd      	b.n	8005606 <_printf_i+0x12a>
 800568a:	6833      	ldr	r3, [r6, #0]
 800568c:	6825      	ldr	r5, [r4, #0]
 800568e:	1d18      	adds	r0, r3, #4
 8005690:	6961      	ldr	r1, [r4, #20]
 8005692:	6030      	str	r0, [r6, #0]
 8005694:	062e      	lsls	r6, r5, #24
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	d501      	bpl.n	800569e <_printf_i+0x1c2>
 800569a:	6019      	str	r1, [r3, #0]
 800569c:	e002      	b.n	80056a4 <_printf_i+0x1c8>
 800569e:	0668      	lsls	r0, r5, #25
 80056a0:	d5fb      	bpl.n	800569a <_printf_i+0x1be>
 80056a2:	8019      	strh	r1, [r3, #0]
 80056a4:	2300      	movs	r3, #0
 80056a6:	4616      	mov	r6, r2
 80056a8:	6123      	str	r3, [r4, #16]
 80056aa:	e7bc      	b.n	8005626 <_printf_i+0x14a>
 80056ac:	6833      	ldr	r3, [r6, #0]
 80056ae:	2100      	movs	r1, #0
 80056b0:	1d1a      	adds	r2, r3, #4
 80056b2:	6032      	str	r2, [r6, #0]
 80056b4:	681e      	ldr	r6, [r3, #0]
 80056b6:	6862      	ldr	r2, [r4, #4]
 80056b8:	4630      	mov	r0, r6
 80056ba:	f000 fac8 	bl	8005c4e <memchr>
 80056be:	b108      	cbz	r0, 80056c4 <_printf_i+0x1e8>
 80056c0:	1b80      	subs	r0, r0, r6
 80056c2:	6060      	str	r0, [r4, #4]
 80056c4:	6863      	ldr	r3, [r4, #4]
 80056c6:	6123      	str	r3, [r4, #16]
 80056c8:	2300      	movs	r3, #0
 80056ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056ce:	e7aa      	b.n	8005626 <_printf_i+0x14a>
 80056d0:	4632      	mov	r2, r6
 80056d2:	4649      	mov	r1, r9
 80056d4:	4640      	mov	r0, r8
 80056d6:	6923      	ldr	r3, [r4, #16]
 80056d8:	47d0      	blx	sl
 80056da:	3001      	adds	r0, #1
 80056dc:	d0ad      	beq.n	800563a <_printf_i+0x15e>
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	079b      	lsls	r3, r3, #30
 80056e2:	d413      	bmi.n	800570c <_printf_i+0x230>
 80056e4:	68e0      	ldr	r0, [r4, #12]
 80056e6:	9b03      	ldr	r3, [sp, #12]
 80056e8:	4298      	cmp	r0, r3
 80056ea:	bfb8      	it	lt
 80056ec:	4618      	movlt	r0, r3
 80056ee:	e7a6      	b.n	800563e <_printf_i+0x162>
 80056f0:	2301      	movs	r3, #1
 80056f2:	4632      	mov	r2, r6
 80056f4:	4649      	mov	r1, r9
 80056f6:	4640      	mov	r0, r8
 80056f8:	47d0      	blx	sl
 80056fa:	3001      	adds	r0, #1
 80056fc:	d09d      	beq.n	800563a <_printf_i+0x15e>
 80056fe:	3501      	adds	r5, #1
 8005700:	68e3      	ldr	r3, [r4, #12]
 8005702:	9903      	ldr	r1, [sp, #12]
 8005704:	1a5b      	subs	r3, r3, r1
 8005706:	42ab      	cmp	r3, r5
 8005708:	dcf2      	bgt.n	80056f0 <_printf_i+0x214>
 800570a:	e7eb      	b.n	80056e4 <_printf_i+0x208>
 800570c:	2500      	movs	r5, #0
 800570e:	f104 0619 	add.w	r6, r4, #25
 8005712:	e7f5      	b.n	8005700 <_printf_i+0x224>
 8005714:	08007ab1 	.word	0x08007ab1
 8005718:	08007ac2 	.word	0x08007ac2

0800571c <std>:
 800571c:	2300      	movs	r3, #0
 800571e:	b510      	push	{r4, lr}
 8005720:	4604      	mov	r4, r0
 8005722:	e9c0 3300 	strd	r3, r3, [r0]
 8005726:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800572a:	6083      	str	r3, [r0, #8]
 800572c:	8181      	strh	r1, [r0, #12]
 800572e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005730:	81c2      	strh	r2, [r0, #14]
 8005732:	6183      	str	r3, [r0, #24]
 8005734:	4619      	mov	r1, r3
 8005736:	2208      	movs	r2, #8
 8005738:	305c      	adds	r0, #92	@ 0x5c
 800573a:	f000 f9f9 	bl	8005b30 <memset>
 800573e:	4b0d      	ldr	r3, [pc, #52]	@ (8005774 <std+0x58>)
 8005740:	6224      	str	r4, [r4, #32]
 8005742:	6263      	str	r3, [r4, #36]	@ 0x24
 8005744:	4b0c      	ldr	r3, [pc, #48]	@ (8005778 <std+0x5c>)
 8005746:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005748:	4b0c      	ldr	r3, [pc, #48]	@ (800577c <std+0x60>)
 800574a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800574c:	4b0c      	ldr	r3, [pc, #48]	@ (8005780 <std+0x64>)
 800574e:	6323      	str	r3, [r4, #48]	@ 0x30
 8005750:	4b0c      	ldr	r3, [pc, #48]	@ (8005784 <std+0x68>)
 8005752:	429c      	cmp	r4, r3
 8005754:	d006      	beq.n	8005764 <std+0x48>
 8005756:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800575a:	4294      	cmp	r4, r2
 800575c:	d002      	beq.n	8005764 <std+0x48>
 800575e:	33d0      	adds	r3, #208	@ 0xd0
 8005760:	429c      	cmp	r4, r3
 8005762:	d105      	bne.n	8005770 <std+0x54>
 8005764:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800576c:	f000 ba6c 	b.w	8005c48 <__retarget_lock_init_recursive>
 8005770:	bd10      	pop	{r4, pc}
 8005772:	bf00      	nop
 8005774:	08005981 	.word	0x08005981
 8005778:	080059a3 	.word	0x080059a3
 800577c:	080059db 	.word	0x080059db
 8005780:	080059ff 	.word	0x080059ff
 8005784:	2000053c 	.word	0x2000053c

08005788 <stdio_exit_handler>:
 8005788:	4a02      	ldr	r2, [pc, #8]	@ (8005794 <stdio_exit_handler+0xc>)
 800578a:	4903      	ldr	r1, [pc, #12]	@ (8005798 <stdio_exit_handler+0x10>)
 800578c:	4803      	ldr	r0, [pc, #12]	@ (800579c <stdio_exit_handler+0x14>)
 800578e:	f000 b869 	b.w	8005864 <_fwalk_sglue>
 8005792:	bf00      	nop
 8005794:	20000018 	.word	0x20000018
 8005798:	080074b5 	.word	0x080074b5
 800579c:	20000194 	.word	0x20000194

080057a0 <cleanup_stdio>:
 80057a0:	6841      	ldr	r1, [r0, #4]
 80057a2:	4b0c      	ldr	r3, [pc, #48]	@ (80057d4 <cleanup_stdio+0x34>)
 80057a4:	b510      	push	{r4, lr}
 80057a6:	4299      	cmp	r1, r3
 80057a8:	4604      	mov	r4, r0
 80057aa:	d001      	beq.n	80057b0 <cleanup_stdio+0x10>
 80057ac:	f001 fe82 	bl	80074b4 <_fflush_r>
 80057b0:	68a1      	ldr	r1, [r4, #8]
 80057b2:	4b09      	ldr	r3, [pc, #36]	@ (80057d8 <cleanup_stdio+0x38>)
 80057b4:	4299      	cmp	r1, r3
 80057b6:	d002      	beq.n	80057be <cleanup_stdio+0x1e>
 80057b8:	4620      	mov	r0, r4
 80057ba:	f001 fe7b 	bl	80074b4 <_fflush_r>
 80057be:	68e1      	ldr	r1, [r4, #12]
 80057c0:	4b06      	ldr	r3, [pc, #24]	@ (80057dc <cleanup_stdio+0x3c>)
 80057c2:	4299      	cmp	r1, r3
 80057c4:	d004      	beq.n	80057d0 <cleanup_stdio+0x30>
 80057c6:	4620      	mov	r0, r4
 80057c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057cc:	f001 be72 	b.w	80074b4 <_fflush_r>
 80057d0:	bd10      	pop	{r4, pc}
 80057d2:	bf00      	nop
 80057d4:	2000053c 	.word	0x2000053c
 80057d8:	200005a4 	.word	0x200005a4
 80057dc:	2000060c 	.word	0x2000060c

080057e0 <global_stdio_init.part.0>:
 80057e0:	b510      	push	{r4, lr}
 80057e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005810 <global_stdio_init.part.0+0x30>)
 80057e4:	4c0b      	ldr	r4, [pc, #44]	@ (8005814 <global_stdio_init.part.0+0x34>)
 80057e6:	4a0c      	ldr	r2, [pc, #48]	@ (8005818 <global_stdio_init.part.0+0x38>)
 80057e8:	4620      	mov	r0, r4
 80057ea:	601a      	str	r2, [r3, #0]
 80057ec:	2104      	movs	r1, #4
 80057ee:	2200      	movs	r2, #0
 80057f0:	f7ff ff94 	bl	800571c <std>
 80057f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80057f8:	2201      	movs	r2, #1
 80057fa:	2109      	movs	r1, #9
 80057fc:	f7ff ff8e 	bl	800571c <std>
 8005800:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005804:	2202      	movs	r2, #2
 8005806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800580a:	2112      	movs	r1, #18
 800580c:	f7ff bf86 	b.w	800571c <std>
 8005810:	20000674 	.word	0x20000674
 8005814:	2000053c 	.word	0x2000053c
 8005818:	08005789 	.word	0x08005789

0800581c <__sfp_lock_acquire>:
 800581c:	4801      	ldr	r0, [pc, #4]	@ (8005824 <__sfp_lock_acquire+0x8>)
 800581e:	f000 ba14 	b.w	8005c4a <__retarget_lock_acquire_recursive>
 8005822:	bf00      	nop
 8005824:	2000067d 	.word	0x2000067d

08005828 <__sfp_lock_release>:
 8005828:	4801      	ldr	r0, [pc, #4]	@ (8005830 <__sfp_lock_release+0x8>)
 800582a:	f000 ba0f 	b.w	8005c4c <__retarget_lock_release_recursive>
 800582e:	bf00      	nop
 8005830:	2000067d 	.word	0x2000067d

08005834 <__sinit>:
 8005834:	b510      	push	{r4, lr}
 8005836:	4604      	mov	r4, r0
 8005838:	f7ff fff0 	bl	800581c <__sfp_lock_acquire>
 800583c:	6a23      	ldr	r3, [r4, #32]
 800583e:	b11b      	cbz	r3, 8005848 <__sinit+0x14>
 8005840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005844:	f7ff bff0 	b.w	8005828 <__sfp_lock_release>
 8005848:	4b04      	ldr	r3, [pc, #16]	@ (800585c <__sinit+0x28>)
 800584a:	6223      	str	r3, [r4, #32]
 800584c:	4b04      	ldr	r3, [pc, #16]	@ (8005860 <__sinit+0x2c>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1f5      	bne.n	8005840 <__sinit+0xc>
 8005854:	f7ff ffc4 	bl	80057e0 <global_stdio_init.part.0>
 8005858:	e7f2      	b.n	8005840 <__sinit+0xc>
 800585a:	bf00      	nop
 800585c:	080057a1 	.word	0x080057a1
 8005860:	20000674 	.word	0x20000674

08005864 <_fwalk_sglue>:
 8005864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005868:	4607      	mov	r7, r0
 800586a:	4688      	mov	r8, r1
 800586c:	4614      	mov	r4, r2
 800586e:	2600      	movs	r6, #0
 8005870:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005874:	f1b9 0901 	subs.w	r9, r9, #1
 8005878:	d505      	bpl.n	8005886 <_fwalk_sglue+0x22>
 800587a:	6824      	ldr	r4, [r4, #0]
 800587c:	2c00      	cmp	r4, #0
 800587e:	d1f7      	bne.n	8005870 <_fwalk_sglue+0xc>
 8005880:	4630      	mov	r0, r6
 8005882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005886:	89ab      	ldrh	r3, [r5, #12]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d907      	bls.n	800589c <_fwalk_sglue+0x38>
 800588c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005890:	3301      	adds	r3, #1
 8005892:	d003      	beq.n	800589c <_fwalk_sglue+0x38>
 8005894:	4629      	mov	r1, r5
 8005896:	4638      	mov	r0, r7
 8005898:	47c0      	blx	r8
 800589a:	4306      	orrs	r6, r0
 800589c:	3568      	adds	r5, #104	@ 0x68
 800589e:	e7e9      	b.n	8005874 <_fwalk_sglue+0x10>

080058a0 <iprintf>:
 80058a0:	b40f      	push	{r0, r1, r2, r3}
 80058a2:	b507      	push	{r0, r1, r2, lr}
 80058a4:	4906      	ldr	r1, [pc, #24]	@ (80058c0 <iprintf+0x20>)
 80058a6:	ab04      	add	r3, sp, #16
 80058a8:	6808      	ldr	r0, [r1, #0]
 80058aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80058ae:	6881      	ldr	r1, [r0, #8]
 80058b0:	9301      	str	r3, [sp, #4]
 80058b2:	f001 fc67 	bl	8007184 <_vfiprintf_r>
 80058b6:	b003      	add	sp, #12
 80058b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80058bc:	b004      	add	sp, #16
 80058be:	4770      	bx	lr
 80058c0:	20000190 	.word	0x20000190

080058c4 <_puts_r>:
 80058c4:	6a03      	ldr	r3, [r0, #32]
 80058c6:	b570      	push	{r4, r5, r6, lr}
 80058c8:	4605      	mov	r5, r0
 80058ca:	460e      	mov	r6, r1
 80058cc:	6884      	ldr	r4, [r0, #8]
 80058ce:	b90b      	cbnz	r3, 80058d4 <_puts_r+0x10>
 80058d0:	f7ff ffb0 	bl	8005834 <__sinit>
 80058d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80058d6:	07db      	lsls	r3, r3, #31
 80058d8:	d405      	bmi.n	80058e6 <_puts_r+0x22>
 80058da:	89a3      	ldrh	r3, [r4, #12]
 80058dc:	0598      	lsls	r0, r3, #22
 80058de:	d402      	bmi.n	80058e6 <_puts_r+0x22>
 80058e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80058e2:	f000 f9b2 	bl	8005c4a <__retarget_lock_acquire_recursive>
 80058e6:	89a3      	ldrh	r3, [r4, #12]
 80058e8:	0719      	lsls	r1, r3, #28
 80058ea:	d502      	bpl.n	80058f2 <_puts_r+0x2e>
 80058ec:	6923      	ldr	r3, [r4, #16]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d135      	bne.n	800595e <_puts_r+0x9a>
 80058f2:	4621      	mov	r1, r4
 80058f4:	4628      	mov	r0, r5
 80058f6:	f000 f8c5 	bl	8005a84 <__swsetup_r>
 80058fa:	b380      	cbz	r0, 800595e <_puts_r+0x9a>
 80058fc:	f04f 35ff 	mov.w	r5, #4294967295
 8005900:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005902:	07da      	lsls	r2, r3, #31
 8005904:	d405      	bmi.n	8005912 <_puts_r+0x4e>
 8005906:	89a3      	ldrh	r3, [r4, #12]
 8005908:	059b      	lsls	r3, r3, #22
 800590a:	d402      	bmi.n	8005912 <_puts_r+0x4e>
 800590c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800590e:	f000 f99d 	bl	8005c4c <__retarget_lock_release_recursive>
 8005912:	4628      	mov	r0, r5
 8005914:	bd70      	pop	{r4, r5, r6, pc}
 8005916:	2b00      	cmp	r3, #0
 8005918:	da04      	bge.n	8005924 <_puts_r+0x60>
 800591a:	69a2      	ldr	r2, [r4, #24]
 800591c:	429a      	cmp	r2, r3
 800591e:	dc17      	bgt.n	8005950 <_puts_r+0x8c>
 8005920:	290a      	cmp	r1, #10
 8005922:	d015      	beq.n	8005950 <_puts_r+0x8c>
 8005924:	6823      	ldr	r3, [r4, #0]
 8005926:	1c5a      	adds	r2, r3, #1
 8005928:	6022      	str	r2, [r4, #0]
 800592a:	7019      	strb	r1, [r3, #0]
 800592c:	68a3      	ldr	r3, [r4, #8]
 800592e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005932:	3b01      	subs	r3, #1
 8005934:	60a3      	str	r3, [r4, #8]
 8005936:	2900      	cmp	r1, #0
 8005938:	d1ed      	bne.n	8005916 <_puts_r+0x52>
 800593a:	2b00      	cmp	r3, #0
 800593c:	da11      	bge.n	8005962 <_puts_r+0x9e>
 800593e:	4622      	mov	r2, r4
 8005940:	210a      	movs	r1, #10
 8005942:	4628      	mov	r0, r5
 8005944:	f000 f85f 	bl	8005a06 <__swbuf_r>
 8005948:	3001      	adds	r0, #1
 800594a:	d0d7      	beq.n	80058fc <_puts_r+0x38>
 800594c:	250a      	movs	r5, #10
 800594e:	e7d7      	b.n	8005900 <_puts_r+0x3c>
 8005950:	4622      	mov	r2, r4
 8005952:	4628      	mov	r0, r5
 8005954:	f000 f857 	bl	8005a06 <__swbuf_r>
 8005958:	3001      	adds	r0, #1
 800595a:	d1e7      	bne.n	800592c <_puts_r+0x68>
 800595c:	e7ce      	b.n	80058fc <_puts_r+0x38>
 800595e:	3e01      	subs	r6, #1
 8005960:	e7e4      	b.n	800592c <_puts_r+0x68>
 8005962:	6823      	ldr	r3, [r4, #0]
 8005964:	1c5a      	adds	r2, r3, #1
 8005966:	6022      	str	r2, [r4, #0]
 8005968:	220a      	movs	r2, #10
 800596a:	701a      	strb	r2, [r3, #0]
 800596c:	e7ee      	b.n	800594c <_puts_r+0x88>
	...

08005970 <puts>:
 8005970:	4b02      	ldr	r3, [pc, #8]	@ (800597c <puts+0xc>)
 8005972:	4601      	mov	r1, r0
 8005974:	6818      	ldr	r0, [r3, #0]
 8005976:	f7ff bfa5 	b.w	80058c4 <_puts_r>
 800597a:	bf00      	nop
 800597c:	20000190 	.word	0x20000190

08005980 <__sread>:
 8005980:	b510      	push	{r4, lr}
 8005982:	460c      	mov	r4, r1
 8005984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005988:	f000 f900 	bl	8005b8c <_read_r>
 800598c:	2800      	cmp	r0, #0
 800598e:	bfab      	itete	ge
 8005990:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005992:	89a3      	ldrhlt	r3, [r4, #12]
 8005994:	181b      	addge	r3, r3, r0
 8005996:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800599a:	bfac      	ite	ge
 800599c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800599e:	81a3      	strhlt	r3, [r4, #12]
 80059a0:	bd10      	pop	{r4, pc}

080059a2 <__swrite>:
 80059a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059a6:	461f      	mov	r7, r3
 80059a8:	898b      	ldrh	r3, [r1, #12]
 80059aa:	4605      	mov	r5, r0
 80059ac:	05db      	lsls	r3, r3, #23
 80059ae:	460c      	mov	r4, r1
 80059b0:	4616      	mov	r6, r2
 80059b2:	d505      	bpl.n	80059c0 <__swrite+0x1e>
 80059b4:	2302      	movs	r3, #2
 80059b6:	2200      	movs	r2, #0
 80059b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059bc:	f000 f8d4 	bl	8005b68 <_lseek_r>
 80059c0:	89a3      	ldrh	r3, [r4, #12]
 80059c2:	4632      	mov	r2, r6
 80059c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059c8:	81a3      	strh	r3, [r4, #12]
 80059ca:	4628      	mov	r0, r5
 80059cc:	463b      	mov	r3, r7
 80059ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059d6:	f000 b8fb 	b.w	8005bd0 <_write_r>

080059da <__sseek>:
 80059da:	b510      	push	{r4, lr}
 80059dc:	460c      	mov	r4, r1
 80059de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059e2:	f000 f8c1 	bl	8005b68 <_lseek_r>
 80059e6:	1c43      	adds	r3, r0, #1
 80059e8:	89a3      	ldrh	r3, [r4, #12]
 80059ea:	bf15      	itete	ne
 80059ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80059ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80059f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80059f6:	81a3      	strheq	r3, [r4, #12]
 80059f8:	bf18      	it	ne
 80059fa:	81a3      	strhne	r3, [r4, #12]
 80059fc:	bd10      	pop	{r4, pc}

080059fe <__sclose>:
 80059fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a02:	f000 b8a1 	b.w	8005b48 <_close_r>

08005a06 <__swbuf_r>:
 8005a06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a08:	460e      	mov	r6, r1
 8005a0a:	4614      	mov	r4, r2
 8005a0c:	4605      	mov	r5, r0
 8005a0e:	b118      	cbz	r0, 8005a18 <__swbuf_r+0x12>
 8005a10:	6a03      	ldr	r3, [r0, #32]
 8005a12:	b90b      	cbnz	r3, 8005a18 <__swbuf_r+0x12>
 8005a14:	f7ff ff0e 	bl	8005834 <__sinit>
 8005a18:	69a3      	ldr	r3, [r4, #24]
 8005a1a:	60a3      	str	r3, [r4, #8]
 8005a1c:	89a3      	ldrh	r3, [r4, #12]
 8005a1e:	071a      	lsls	r2, r3, #28
 8005a20:	d501      	bpl.n	8005a26 <__swbuf_r+0x20>
 8005a22:	6923      	ldr	r3, [r4, #16]
 8005a24:	b943      	cbnz	r3, 8005a38 <__swbuf_r+0x32>
 8005a26:	4621      	mov	r1, r4
 8005a28:	4628      	mov	r0, r5
 8005a2a:	f000 f82b 	bl	8005a84 <__swsetup_r>
 8005a2e:	b118      	cbz	r0, 8005a38 <__swbuf_r+0x32>
 8005a30:	f04f 37ff 	mov.w	r7, #4294967295
 8005a34:	4638      	mov	r0, r7
 8005a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a38:	6823      	ldr	r3, [r4, #0]
 8005a3a:	6922      	ldr	r2, [r4, #16]
 8005a3c:	b2f6      	uxtb	r6, r6
 8005a3e:	1a98      	subs	r0, r3, r2
 8005a40:	6963      	ldr	r3, [r4, #20]
 8005a42:	4637      	mov	r7, r6
 8005a44:	4283      	cmp	r3, r0
 8005a46:	dc05      	bgt.n	8005a54 <__swbuf_r+0x4e>
 8005a48:	4621      	mov	r1, r4
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	f001 fd32 	bl	80074b4 <_fflush_r>
 8005a50:	2800      	cmp	r0, #0
 8005a52:	d1ed      	bne.n	8005a30 <__swbuf_r+0x2a>
 8005a54:	68a3      	ldr	r3, [r4, #8]
 8005a56:	3b01      	subs	r3, #1
 8005a58:	60a3      	str	r3, [r4, #8]
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	1c5a      	adds	r2, r3, #1
 8005a5e:	6022      	str	r2, [r4, #0]
 8005a60:	701e      	strb	r6, [r3, #0]
 8005a62:	6962      	ldr	r2, [r4, #20]
 8005a64:	1c43      	adds	r3, r0, #1
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d004      	beq.n	8005a74 <__swbuf_r+0x6e>
 8005a6a:	89a3      	ldrh	r3, [r4, #12]
 8005a6c:	07db      	lsls	r3, r3, #31
 8005a6e:	d5e1      	bpl.n	8005a34 <__swbuf_r+0x2e>
 8005a70:	2e0a      	cmp	r6, #10
 8005a72:	d1df      	bne.n	8005a34 <__swbuf_r+0x2e>
 8005a74:	4621      	mov	r1, r4
 8005a76:	4628      	mov	r0, r5
 8005a78:	f001 fd1c 	bl	80074b4 <_fflush_r>
 8005a7c:	2800      	cmp	r0, #0
 8005a7e:	d0d9      	beq.n	8005a34 <__swbuf_r+0x2e>
 8005a80:	e7d6      	b.n	8005a30 <__swbuf_r+0x2a>
	...

08005a84 <__swsetup_r>:
 8005a84:	b538      	push	{r3, r4, r5, lr}
 8005a86:	4b29      	ldr	r3, [pc, #164]	@ (8005b2c <__swsetup_r+0xa8>)
 8005a88:	4605      	mov	r5, r0
 8005a8a:	6818      	ldr	r0, [r3, #0]
 8005a8c:	460c      	mov	r4, r1
 8005a8e:	b118      	cbz	r0, 8005a98 <__swsetup_r+0x14>
 8005a90:	6a03      	ldr	r3, [r0, #32]
 8005a92:	b90b      	cbnz	r3, 8005a98 <__swsetup_r+0x14>
 8005a94:	f7ff fece 	bl	8005834 <__sinit>
 8005a98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a9c:	0719      	lsls	r1, r3, #28
 8005a9e:	d422      	bmi.n	8005ae6 <__swsetup_r+0x62>
 8005aa0:	06da      	lsls	r2, r3, #27
 8005aa2:	d407      	bmi.n	8005ab4 <__swsetup_r+0x30>
 8005aa4:	2209      	movs	r2, #9
 8005aa6:	602a      	str	r2, [r5, #0]
 8005aa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005aac:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab0:	81a3      	strh	r3, [r4, #12]
 8005ab2:	e033      	b.n	8005b1c <__swsetup_r+0x98>
 8005ab4:	0758      	lsls	r0, r3, #29
 8005ab6:	d512      	bpl.n	8005ade <__swsetup_r+0x5a>
 8005ab8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005aba:	b141      	cbz	r1, 8005ace <__swsetup_r+0x4a>
 8005abc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ac0:	4299      	cmp	r1, r3
 8005ac2:	d002      	beq.n	8005aca <__swsetup_r+0x46>
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	f000 ff4f 	bl	8006968 <_free_r>
 8005aca:	2300      	movs	r3, #0
 8005acc:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ace:	89a3      	ldrh	r3, [r4, #12]
 8005ad0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005ad4:	81a3      	strh	r3, [r4, #12]
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	6063      	str	r3, [r4, #4]
 8005ada:	6923      	ldr	r3, [r4, #16]
 8005adc:	6023      	str	r3, [r4, #0]
 8005ade:	89a3      	ldrh	r3, [r4, #12]
 8005ae0:	f043 0308 	orr.w	r3, r3, #8
 8005ae4:	81a3      	strh	r3, [r4, #12]
 8005ae6:	6923      	ldr	r3, [r4, #16]
 8005ae8:	b94b      	cbnz	r3, 8005afe <__swsetup_r+0x7a>
 8005aea:	89a3      	ldrh	r3, [r4, #12]
 8005aec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005af0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005af4:	d003      	beq.n	8005afe <__swsetup_r+0x7a>
 8005af6:	4621      	mov	r1, r4
 8005af8:	4628      	mov	r0, r5
 8005afa:	f001 fd3a 	bl	8007572 <__smakebuf_r>
 8005afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b02:	f013 0201 	ands.w	r2, r3, #1
 8005b06:	d00a      	beq.n	8005b1e <__swsetup_r+0x9a>
 8005b08:	2200      	movs	r2, #0
 8005b0a:	60a2      	str	r2, [r4, #8]
 8005b0c:	6962      	ldr	r2, [r4, #20]
 8005b0e:	4252      	negs	r2, r2
 8005b10:	61a2      	str	r2, [r4, #24]
 8005b12:	6922      	ldr	r2, [r4, #16]
 8005b14:	b942      	cbnz	r2, 8005b28 <__swsetup_r+0xa4>
 8005b16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005b1a:	d1c5      	bne.n	8005aa8 <__swsetup_r+0x24>
 8005b1c:	bd38      	pop	{r3, r4, r5, pc}
 8005b1e:	0799      	lsls	r1, r3, #30
 8005b20:	bf58      	it	pl
 8005b22:	6962      	ldrpl	r2, [r4, #20]
 8005b24:	60a2      	str	r2, [r4, #8]
 8005b26:	e7f4      	b.n	8005b12 <__swsetup_r+0x8e>
 8005b28:	2000      	movs	r0, #0
 8005b2a:	e7f7      	b.n	8005b1c <__swsetup_r+0x98>
 8005b2c:	20000190 	.word	0x20000190

08005b30 <memset>:
 8005b30:	4603      	mov	r3, r0
 8005b32:	4402      	add	r2, r0
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d100      	bne.n	8005b3a <memset+0xa>
 8005b38:	4770      	bx	lr
 8005b3a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b3e:	e7f9      	b.n	8005b34 <memset+0x4>

08005b40 <_localeconv_r>:
 8005b40:	4800      	ldr	r0, [pc, #0]	@ (8005b44 <_localeconv_r+0x4>)
 8005b42:	4770      	bx	lr
 8005b44:	20000114 	.word	0x20000114

08005b48 <_close_r>:
 8005b48:	b538      	push	{r3, r4, r5, lr}
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	4d05      	ldr	r5, [pc, #20]	@ (8005b64 <_close_r+0x1c>)
 8005b4e:	4604      	mov	r4, r0
 8005b50:	4608      	mov	r0, r1
 8005b52:	602b      	str	r3, [r5, #0]
 8005b54:	f7fb fde7 	bl	8001726 <_close>
 8005b58:	1c43      	adds	r3, r0, #1
 8005b5a:	d102      	bne.n	8005b62 <_close_r+0x1a>
 8005b5c:	682b      	ldr	r3, [r5, #0]
 8005b5e:	b103      	cbz	r3, 8005b62 <_close_r+0x1a>
 8005b60:	6023      	str	r3, [r4, #0]
 8005b62:	bd38      	pop	{r3, r4, r5, pc}
 8005b64:	20000678 	.word	0x20000678

08005b68 <_lseek_r>:
 8005b68:	b538      	push	{r3, r4, r5, lr}
 8005b6a:	4604      	mov	r4, r0
 8005b6c:	4608      	mov	r0, r1
 8005b6e:	4611      	mov	r1, r2
 8005b70:	2200      	movs	r2, #0
 8005b72:	4d05      	ldr	r5, [pc, #20]	@ (8005b88 <_lseek_r+0x20>)
 8005b74:	602a      	str	r2, [r5, #0]
 8005b76:	461a      	mov	r2, r3
 8005b78:	f7fb fdf9 	bl	800176e <_lseek>
 8005b7c:	1c43      	adds	r3, r0, #1
 8005b7e:	d102      	bne.n	8005b86 <_lseek_r+0x1e>
 8005b80:	682b      	ldr	r3, [r5, #0]
 8005b82:	b103      	cbz	r3, 8005b86 <_lseek_r+0x1e>
 8005b84:	6023      	str	r3, [r4, #0]
 8005b86:	bd38      	pop	{r3, r4, r5, pc}
 8005b88:	20000678 	.word	0x20000678

08005b8c <_read_r>:
 8005b8c:	b538      	push	{r3, r4, r5, lr}
 8005b8e:	4604      	mov	r4, r0
 8005b90:	4608      	mov	r0, r1
 8005b92:	4611      	mov	r1, r2
 8005b94:	2200      	movs	r2, #0
 8005b96:	4d05      	ldr	r5, [pc, #20]	@ (8005bac <_read_r+0x20>)
 8005b98:	602a      	str	r2, [r5, #0]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	f7fb fda6 	bl	80016ec <_read>
 8005ba0:	1c43      	adds	r3, r0, #1
 8005ba2:	d102      	bne.n	8005baa <_read_r+0x1e>
 8005ba4:	682b      	ldr	r3, [r5, #0]
 8005ba6:	b103      	cbz	r3, 8005baa <_read_r+0x1e>
 8005ba8:	6023      	str	r3, [r4, #0]
 8005baa:	bd38      	pop	{r3, r4, r5, pc}
 8005bac:	20000678 	.word	0x20000678

08005bb0 <_sbrk_r>:
 8005bb0:	b538      	push	{r3, r4, r5, lr}
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	4d05      	ldr	r5, [pc, #20]	@ (8005bcc <_sbrk_r+0x1c>)
 8005bb6:	4604      	mov	r4, r0
 8005bb8:	4608      	mov	r0, r1
 8005bba:	602b      	str	r3, [r5, #0]
 8005bbc:	f7fb fde4 	bl	8001788 <_sbrk>
 8005bc0:	1c43      	adds	r3, r0, #1
 8005bc2:	d102      	bne.n	8005bca <_sbrk_r+0x1a>
 8005bc4:	682b      	ldr	r3, [r5, #0]
 8005bc6:	b103      	cbz	r3, 8005bca <_sbrk_r+0x1a>
 8005bc8:	6023      	str	r3, [r4, #0]
 8005bca:	bd38      	pop	{r3, r4, r5, pc}
 8005bcc:	20000678 	.word	0x20000678

08005bd0 <_write_r>:
 8005bd0:	b538      	push	{r3, r4, r5, lr}
 8005bd2:	4604      	mov	r4, r0
 8005bd4:	4608      	mov	r0, r1
 8005bd6:	4611      	mov	r1, r2
 8005bd8:	2200      	movs	r2, #0
 8005bda:	4d05      	ldr	r5, [pc, #20]	@ (8005bf0 <_write_r+0x20>)
 8005bdc:	602a      	str	r2, [r5, #0]
 8005bde:	461a      	mov	r2, r3
 8005be0:	f7fb fa16 	bl	8001010 <_write>
 8005be4:	1c43      	adds	r3, r0, #1
 8005be6:	d102      	bne.n	8005bee <_write_r+0x1e>
 8005be8:	682b      	ldr	r3, [r5, #0]
 8005bea:	b103      	cbz	r3, 8005bee <_write_r+0x1e>
 8005bec:	6023      	str	r3, [r4, #0]
 8005bee:	bd38      	pop	{r3, r4, r5, pc}
 8005bf0:	20000678 	.word	0x20000678

08005bf4 <__errno>:
 8005bf4:	4b01      	ldr	r3, [pc, #4]	@ (8005bfc <__errno+0x8>)
 8005bf6:	6818      	ldr	r0, [r3, #0]
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	20000190 	.word	0x20000190

08005c00 <__libc_init_array>:
 8005c00:	b570      	push	{r4, r5, r6, lr}
 8005c02:	2600      	movs	r6, #0
 8005c04:	4d0c      	ldr	r5, [pc, #48]	@ (8005c38 <__libc_init_array+0x38>)
 8005c06:	4c0d      	ldr	r4, [pc, #52]	@ (8005c3c <__libc_init_array+0x3c>)
 8005c08:	1b64      	subs	r4, r4, r5
 8005c0a:	10a4      	asrs	r4, r4, #2
 8005c0c:	42a6      	cmp	r6, r4
 8005c0e:	d109      	bne.n	8005c24 <__libc_init_array+0x24>
 8005c10:	f001 fd6e 	bl	80076f0 <_init>
 8005c14:	2600      	movs	r6, #0
 8005c16:	4d0a      	ldr	r5, [pc, #40]	@ (8005c40 <__libc_init_array+0x40>)
 8005c18:	4c0a      	ldr	r4, [pc, #40]	@ (8005c44 <__libc_init_array+0x44>)
 8005c1a:	1b64      	subs	r4, r4, r5
 8005c1c:	10a4      	asrs	r4, r4, #2
 8005c1e:	42a6      	cmp	r6, r4
 8005c20:	d105      	bne.n	8005c2e <__libc_init_array+0x2e>
 8005c22:	bd70      	pop	{r4, r5, r6, pc}
 8005c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c28:	4798      	blx	r3
 8005c2a:	3601      	adds	r6, #1
 8005c2c:	e7ee      	b.n	8005c0c <__libc_init_array+0xc>
 8005c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c32:	4798      	blx	r3
 8005c34:	3601      	adds	r6, #1
 8005c36:	e7f2      	b.n	8005c1e <__libc_init_array+0x1e>
 8005c38:	08007d1c 	.word	0x08007d1c
 8005c3c:	08007d1c 	.word	0x08007d1c
 8005c40:	08007d1c 	.word	0x08007d1c
 8005c44:	08007d20 	.word	0x08007d20

08005c48 <__retarget_lock_init_recursive>:
 8005c48:	4770      	bx	lr

08005c4a <__retarget_lock_acquire_recursive>:
 8005c4a:	4770      	bx	lr

08005c4c <__retarget_lock_release_recursive>:
 8005c4c:	4770      	bx	lr

08005c4e <memchr>:
 8005c4e:	4603      	mov	r3, r0
 8005c50:	b510      	push	{r4, lr}
 8005c52:	b2c9      	uxtb	r1, r1
 8005c54:	4402      	add	r2, r0
 8005c56:	4293      	cmp	r3, r2
 8005c58:	4618      	mov	r0, r3
 8005c5a:	d101      	bne.n	8005c60 <memchr+0x12>
 8005c5c:	2000      	movs	r0, #0
 8005c5e:	e003      	b.n	8005c68 <memchr+0x1a>
 8005c60:	7804      	ldrb	r4, [r0, #0]
 8005c62:	3301      	adds	r3, #1
 8005c64:	428c      	cmp	r4, r1
 8005c66:	d1f6      	bne.n	8005c56 <memchr+0x8>
 8005c68:	bd10      	pop	{r4, pc}

08005c6a <memcpy>:
 8005c6a:	440a      	add	r2, r1
 8005c6c:	4291      	cmp	r1, r2
 8005c6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c72:	d100      	bne.n	8005c76 <memcpy+0xc>
 8005c74:	4770      	bx	lr
 8005c76:	b510      	push	{r4, lr}
 8005c78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c7c:	4291      	cmp	r1, r2
 8005c7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c82:	d1f9      	bne.n	8005c78 <memcpy+0xe>
 8005c84:	bd10      	pop	{r4, pc}
	...

08005c88 <__assert_func>:
 8005c88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005c8a:	4614      	mov	r4, r2
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	4b09      	ldr	r3, [pc, #36]	@ (8005cb4 <__assert_func+0x2c>)
 8005c90:	4605      	mov	r5, r0
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68d8      	ldr	r0, [r3, #12]
 8005c96:	b954      	cbnz	r4, 8005cae <__assert_func+0x26>
 8005c98:	4b07      	ldr	r3, [pc, #28]	@ (8005cb8 <__assert_func+0x30>)
 8005c9a:	461c      	mov	r4, r3
 8005c9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005ca0:	9100      	str	r1, [sp, #0]
 8005ca2:	462b      	mov	r3, r5
 8005ca4:	4905      	ldr	r1, [pc, #20]	@ (8005cbc <__assert_func+0x34>)
 8005ca6:	f001 fc2d 	bl	8007504 <fiprintf>
 8005caa:	f001 fcc1 	bl	8007630 <abort>
 8005cae:	4b04      	ldr	r3, [pc, #16]	@ (8005cc0 <__assert_func+0x38>)
 8005cb0:	e7f4      	b.n	8005c9c <__assert_func+0x14>
 8005cb2:	bf00      	nop
 8005cb4:	20000190 	.word	0x20000190
 8005cb8:	08007b18 	.word	0x08007b18
 8005cbc:	08007aea 	.word	0x08007aea
 8005cc0:	08007add 	.word	0x08007add

08005cc4 <quorem>:
 8005cc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc8:	6903      	ldr	r3, [r0, #16]
 8005cca:	690c      	ldr	r4, [r1, #16]
 8005ccc:	4607      	mov	r7, r0
 8005cce:	42a3      	cmp	r3, r4
 8005cd0:	db7e      	blt.n	8005dd0 <quorem+0x10c>
 8005cd2:	3c01      	subs	r4, #1
 8005cd4:	00a3      	lsls	r3, r4, #2
 8005cd6:	f100 0514 	add.w	r5, r0, #20
 8005cda:	f101 0814 	add.w	r8, r1, #20
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ce4:	9301      	str	r3, [sp, #4]
 8005ce6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005cea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	fbb2 f6f3 	udiv	r6, r2, r3
 8005cf6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005cfa:	d32e      	bcc.n	8005d5a <quorem+0x96>
 8005cfc:	f04f 0a00 	mov.w	sl, #0
 8005d00:	46c4      	mov	ip, r8
 8005d02:	46ae      	mov	lr, r5
 8005d04:	46d3      	mov	fp, sl
 8005d06:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005d0a:	b298      	uxth	r0, r3
 8005d0c:	fb06 a000 	mla	r0, r6, r0, sl
 8005d10:	0c1b      	lsrs	r3, r3, #16
 8005d12:	0c02      	lsrs	r2, r0, #16
 8005d14:	fb06 2303 	mla	r3, r6, r3, r2
 8005d18:	f8de 2000 	ldr.w	r2, [lr]
 8005d1c:	b280      	uxth	r0, r0
 8005d1e:	b292      	uxth	r2, r2
 8005d20:	1a12      	subs	r2, r2, r0
 8005d22:	445a      	add	r2, fp
 8005d24:	f8de 0000 	ldr.w	r0, [lr]
 8005d28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005d32:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005d36:	b292      	uxth	r2, r2
 8005d38:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005d3c:	45e1      	cmp	r9, ip
 8005d3e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005d42:	f84e 2b04 	str.w	r2, [lr], #4
 8005d46:	d2de      	bcs.n	8005d06 <quorem+0x42>
 8005d48:	9b00      	ldr	r3, [sp, #0]
 8005d4a:	58eb      	ldr	r3, [r5, r3]
 8005d4c:	b92b      	cbnz	r3, 8005d5a <quorem+0x96>
 8005d4e:	9b01      	ldr	r3, [sp, #4]
 8005d50:	3b04      	subs	r3, #4
 8005d52:	429d      	cmp	r5, r3
 8005d54:	461a      	mov	r2, r3
 8005d56:	d32f      	bcc.n	8005db8 <quorem+0xf4>
 8005d58:	613c      	str	r4, [r7, #16]
 8005d5a:	4638      	mov	r0, r7
 8005d5c:	f001 f8d6 	bl	8006f0c <__mcmp>
 8005d60:	2800      	cmp	r0, #0
 8005d62:	db25      	blt.n	8005db0 <quorem+0xec>
 8005d64:	4629      	mov	r1, r5
 8005d66:	2000      	movs	r0, #0
 8005d68:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d6c:	f8d1 c000 	ldr.w	ip, [r1]
 8005d70:	fa1f fe82 	uxth.w	lr, r2
 8005d74:	fa1f f38c 	uxth.w	r3, ip
 8005d78:	eba3 030e 	sub.w	r3, r3, lr
 8005d7c:	4403      	add	r3, r0
 8005d7e:	0c12      	lsrs	r2, r2, #16
 8005d80:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005d84:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d8e:	45c1      	cmp	r9, r8
 8005d90:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005d94:	f841 3b04 	str.w	r3, [r1], #4
 8005d98:	d2e6      	bcs.n	8005d68 <quorem+0xa4>
 8005d9a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005da2:	b922      	cbnz	r2, 8005dae <quorem+0xea>
 8005da4:	3b04      	subs	r3, #4
 8005da6:	429d      	cmp	r5, r3
 8005da8:	461a      	mov	r2, r3
 8005daa:	d30b      	bcc.n	8005dc4 <quorem+0x100>
 8005dac:	613c      	str	r4, [r7, #16]
 8005dae:	3601      	adds	r6, #1
 8005db0:	4630      	mov	r0, r6
 8005db2:	b003      	add	sp, #12
 8005db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005db8:	6812      	ldr	r2, [r2, #0]
 8005dba:	3b04      	subs	r3, #4
 8005dbc:	2a00      	cmp	r2, #0
 8005dbe:	d1cb      	bne.n	8005d58 <quorem+0x94>
 8005dc0:	3c01      	subs	r4, #1
 8005dc2:	e7c6      	b.n	8005d52 <quorem+0x8e>
 8005dc4:	6812      	ldr	r2, [r2, #0]
 8005dc6:	3b04      	subs	r3, #4
 8005dc8:	2a00      	cmp	r2, #0
 8005dca:	d1ef      	bne.n	8005dac <quorem+0xe8>
 8005dcc:	3c01      	subs	r4, #1
 8005dce:	e7ea      	b.n	8005da6 <quorem+0xe2>
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	e7ee      	b.n	8005db2 <quorem+0xee>
 8005dd4:	0000      	movs	r0, r0
	...

08005dd8 <_dtoa_r>:
 8005dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ddc:	4614      	mov	r4, r2
 8005dde:	461d      	mov	r5, r3
 8005de0:	69c7      	ldr	r7, [r0, #28]
 8005de2:	b097      	sub	sp, #92	@ 0x5c
 8005de4:	4683      	mov	fp, r0
 8005de6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005dea:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005dec:	b97f      	cbnz	r7, 8005e0e <_dtoa_r+0x36>
 8005dee:	2010      	movs	r0, #16
 8005df0:	f7fe ff82 	bl	8004cf8 <malloc>
 8005df4:	4602      	mov	r2, r0
 8005df6:	f8cb 001c 	str.w	r0, [fp, #28]
 8005dfa:	b920      	cbnz	r0, 8005e06 <_dtoa_r+0x2e>
 8005dfc:	21ef      	movs	r1, #239	@ 0xef
 8005dfe:	4ba8      	ldr	r3, [pc, #672]	@ (80060a0 <_dtoa_r+0x2c8>)
 8005e00:	48a8      	ldr	r0, [pc, #672]	@ (80060a4 <_dtoa_r+0x2cc>)
 8005e02:	f7ff ff41 	bl	8005c88 <__assert_func>
 8005e06:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005e0a:	6007      	str	r7, [r0, #0]
 8005e0c:	60c7      	str	r7, [r0, #12]
 8005e0e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005e12:	6819      	ldr	r1, [r3, #0]
 8005e14:	b159      	cbz	r1, 8005e2e <_dtoa_r+0x56>
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	2301      	movs	r3, #1
 8005e1a:	4093      	lsls	r3, r2
 8005e1c:	604a      	str	r2, [r1, #4]
 8005e1e:	608b      	str	r3, [r1, #8]
 8005e20:	4658      	mov	r0, fp
 8005e22:	f000 fe3b 	bl	8006a9c <_Bfree>
 8005e26:	2200      	movs	r2, #0
 8005e28:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005e2c:	601a      	str	r2, [r3, #0]
 8005e2e:	1e2b      	subs	r3, r5, #0
 8005e30:	bfaf      	iteee	ge
 8005e32:	2300      	movge	r3, #0
 8005e34:	2201      	movlt	r2, #1
 8005e36:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005e3a:	9303      	strlt	r3, [sp, #12]
 8005e3c:	bfa8      	it	ge
 8005e3e:	6033      	strge	r3, [r6, #0]
 8005e40:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005e44:	4b98      	ldr	r3, [pc, #608]	@ (80060a8 <_dtoa_r+0x2d0>)
 8005e46:	bfb8      	it	lt
 8005e48:	6032      	strlt	r2, [r6, #0]
 8005e4a:	ea33 0308 	bics.w	r3, r3, r8
 8005e4e:	d112      	bne.n	8005e76 <_dtoa_r+0x9e>
 8005e50:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005e54:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005e56:	6013      	str	r3, [r2, #0]
 8005e58:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005e5c:	4323      	orrs	r3, r4
 8005e5e:	f000 8550 	beq.w	8006902 <_dtoa_r+0xb2a>
 8005e62:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005e64:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80060ac <_dtoa_r+0x2d4>
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f000 8552 	beq.w	8006912 <_dtoa_r+0xb3a>
 8005e6e:	f10a 0303 	add.w	r3, sl, #3
 8005e72:	f000 bd4c 	b.w	800690e <_dtoa_r+0xb36>
 8005e76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e7a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005e7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e82:	2200      	movs	r2, #0
 8005e84:	2300      	movs	r3, #0
 8005e86:	f7fa fd8f 	bl	80009a8 <__aeabi_dcmpeq>
 8005e8a:	4607      	mov	r7, r0
 8005e8c:	b158      	cbz	r0, 8005ea6 <_dtoa_r+0xce>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005e92:	6013      	str	r3, [r2, #0]
 8005e94:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005e96:	b113      	cbz	r3, 8005e9e <_dtoa_r+0xc6>
 8005e98:	4b85      	ldr	r3, [pc, #532]	@ (80060b0 <_dtoa_r+0x2d8>)
 8005e9a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005e9c:	6013      	str	r3, [r2, #0]
 8005e9e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80060b4 <_dtoa_r+0x2dc>
 8005ea2:	f000 bd36 	b.w	8006912 <_dtoa_r+0xb3a>
 8005ea6:	ab14      	add	r3, sp, #80	@ 0x50
 8005ea8:	9301      	str	r3, [sp, #4]
 8005eaa:	ab15      	add	r3, sp, #84	@ 0x54
 8005eac:	9300      	str	r3, [sp, #0]
 8005eae:	4658      	mov	r0, fp
 8005eb0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005eb4:	f001 f8da 	bl	800706c <__d2b>
 8005eb8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005ebc:	4681      	mov	r9, r0
 8005ebe:	2e00      	cmp	r6, #0
 8005ec0:	d077      	beq.n	8005fb2 <_dtoa_r+0x1da>
 8005ec2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005ec6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ec8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005ecc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ed0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005ed4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005ed8:	9712      	str	r7, [sp, #72]	@ 0x48
 8005eda:	4619      	mov	r1, r3
 8005edc:	2200      	movs	r2, #0
 8005ede:	4b76      	ldr	r3, [pc, #472]	@ (80060b8 <_dtoa_r+0x2e0>)
 8005ee0:	f7fa f942 	bl	8000168 <__aeabi_dsub>
 8005ee4:	a368      	add	r3, pc, #416	@ (adr r3, 8006088 <_dtoa_r+0x2b0>)
 8005ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eea:	f7fa faf5 	bl	80004d8 <__aeabi_dmul>
 8005eee:	a368      	add	r3, pc, #416	@ (adr r3, 8006090 <_dtoa_r+0x2b8>)
 8005ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef4:	f7fa f93a 	bl	800016c <__adddf3>
 8005ef8:	4604      	mov	r4, r0
 8005efa:	4630      	mov	r0, r6
 8005efc:	460d      	mov	r5, r1
 8005efe:	f7fa fa81 	bl	8000404 <__aeabi_i2d>
 8005f02:	a365      	add	r3, pc, #404	@ (adr r3, 8006098 <_dtoa_r+0x2c0>)
 8005f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f08:	f7fa fae6 	bl	80004d8 <__aeabi_dmul>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	460b      	mov	r3, r1
 8005f10:	4620      	mov	r0, r4
 8005f12:	4629      	mov	r1, r5
 8005f14:	f7fa f92a 	bl	800016c <__adddf3>
 8005f18:	4604      	mov	r4, r0
 8005f1a:	460d      	mov	r5, r1
 8005f1c:	f7fa fd8c 	bl	8000a38 <__aeabi_d2iz>
 8005f20:	2200      	movs	r2, #0
 8005f22:	4607      	mov	r7, r0
 8005f24:	2300      	movs	r3, #0
 8005f26:	4620      	mov	r0, r4
 8005f28:	4629      	mov	r1, r5
 8005f2a:	f7fa fd47 	bl	80009bc <__aeabi_dcmplt>
 8005f2e:	b140      	cbz	r0, 8005f42 <_dtoa_r+0x16a>
 8005f30:	4638      	mov	r0, r7
 8005f32:	f7fa fa67 	bl	8000404 <__aeabi_i2d>
 8005f36:	4622      	mov	r2, r4
 8005f38:	462b      	mov	r3, r5
 8005f3a:	f7fa fd35 	bl	80009a8 <__aeabi_dcmpeq>
 8005f3e:	b900      	cbnz	r0, 8005f42 <_dtoa_r+0x16a>
 8005f40:	3f01      	subs	r7, #1
 8005f42:	2f16      	cmp	r7, #22
 8005f44:	d853      	bhi.n	8005fee <_dtoa_r+0x216>
 8005f46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f4a:	4b5c      	ldr	r3, [pc, #368]	@ (80060bc <_dtoa_r+0x2e4>)
 8005f4c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f54:	f7fa fd32 	bl	80009bc <__aeabi_dcmplt>
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	d04a      	beq.n	8005ff2 <_dtoa_r+0x21a>
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	3f01      	subs	r7, #1
 8005f60:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005f62:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005f64:	1b9b      	subs	r3, r3, r6
 8005f66:	1e5a      	subs	r2, r3, #1
 8005f68:	bf46      	itte	mi
 8005f6a:	f1c3 0801 	rsbmi	r8, r3, #1
 8005f6e:	2300      	movmi	r3, #0
 8005f70:	f04f 0800 	movpl.w	r8, #0
 8005f74:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f76:	bf48      	it	mi
 8005f78:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005f7a:	2f00      	cmp	r7, #0
 8005f7c:	db3b      	blt.n	8005ff6 <_dtoa_r+0x21e>
 8005f7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f80:	970e      	str	r7, [sp, #56]	@ 0x38
 8005f82:	443b      	add	r3, r7
 8005f84:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f86:	2300      	movs	r3, #0
 8005f88:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f8a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f8c:	2b09      	cmp	r3, #9
 8005f8e:	d866      	bhi.n	800605e <_dtoa_r+0x286>
 8005f90:	2b05      	cmp	r3, #5
 8005f92:	bfc4      	itt	gt
 8005f94:	3b04      	subgt	r3, #4
 8005f96:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005f98:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f9a:	bfc8      	it	gt
 8005f9c:	2400      	movgt	r4, #0
 8005f9e:	f1a3 0302 	sub.w	r3, r3, #2
 8005fa2:	bfd8      	it	le
 8005fa4:	2401      	movle	r4, #1
 8005fa6:	2b03      	cmp	r3, #3
 8005fa8:	d864      	bhi.n	8006074 <_dtoa_r+0x29c>
 8005faa:	e8df f003 	tbb	[pc, r3]
 8005fae:	382b      	.short	0x382b
 8005fb0:	5636      	.short	0x5636
 8005fb2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005fb6:	441e      	add	r6, r3
 8005fb8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005fbc:	2b20      	cmp	r3, #32
 8005fbe:	bfc1      	itttt	gt
 8005fc0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005fc4:	fa08 f803 	lslgt.w	r8, r8, r3
 8005fc8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005fcc:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005fd0:	bfd6      	itet	le
 8005fd2:	f1c3 0320 	rsble	r3, r3, #32
 8005fd6:	ea48 0003 	orrgt.w	r0, r8, r3
 8005fda:	fa04 f003 	lslle.w	r0, r4, r3
 8005fde:	f7fa fa01 	bl	80003e4 <__aeabi_ui2d>
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005fe8:	3e01      	subs	r6, #1
 8005fea:	9212      	str	r2, [sp, #72]	@ 0x48
 8005fec:	e775      	b.n	8005eda <_dtoa_r+0x102>
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e7b6      	b.n	8005f60 <_dtoa_r+0x188>
 8005ff2:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005ff4:	e7b5      	b.n	8005f62 <_dtoa_r+0x18a>
 8005ff6:	427b      	negs	r3, r7
 8005ff8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	eba8 0807 	sub.w	r8, r8, r7
 8006000:	930e      	str	r3, [sp, #56]	@ 0x38
 8006002:	e7c2      	b.n	8005f8a <_dtoa_r+0x1b2>
 8006004:	2300      	movs	r3, #0
 8006006:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006008:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800600a:	2b00      	cmp	r3, #0
 800600c:	dc35      	bgt.n	800607a <_dtoa_r+0x2a2>
 800600e:	2301      	movs	r3, #1
 8006010:	461a      	mov	r2, r3
 8006012:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006016:	9221      	str	r2, [sp, #132]	@ 0x84
 8006018:	e00b      	b.n	8006032 <_dtoa_r+0x25a>
 800601a:	2301      	movs	r3, #1
 800601c:	e7f3      	b.n	8006006 <_dtoa_r+0x22e>
 800601e:	2300      	movs	r3, #0
 8006020:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006022:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006024:	18fb      	adds	r3, r7, r3
 8006026:	9308      	str	r3, [sp, #32]
 8006028:	3301      	adds	r3, #1
 800602a:	2b01      	cmp	r3, #1
 800602c:	9307      	str	r3, [sp, #28]
 800602e:	bfb8      	it	lt
 8006030:	2301      	movlt	r3, #1
 8006032:	2100      	movs	r1, #0
 8006034:	2204      	movs	r2, #4
 8006036:	f8db 001c 	ldr.w	r0, [fp, #28]
 800603a:	f102 0514 	add.w	r5, r2, #20
 800603e:	429d      	cmp	r5, r3
 8006040:	d91f      	bls.n	8006082 <_dtoa_r+0x2aa>
 8006042:	6041      	str	r1, [r0, #4]
 8006044:	4658      	mov	r0, fp
 8006046:	f000 fce9 	bl	8006a1c <_Balloc>
 800604a:	4682      	mov	sl, r0
 800604c:	2800      	cmp	r0, #0
 800604e:	d139      	bne.n	80060c4 <_dtoa_r+0x2ec>
 8006050:	4602      	mov	r2, r0
 8006052:	f240 11af 	movw	r1, #431	@ 0x1af
 8006056:	4b1a      	ldr	r3, [pc, #104]	@ (80060c0 <_dtoa_r+0x2e8>)
 8006058:	e6d2      	b.n	8005e00 <_dtoa_r+0x28>
 800605a:	2301      	movs	r3, #1
 800605c:	e7e0      	b.n	8006020 <_dtoa_r+0x248>
 800605e:	2401      	movs	r4, #1
 8006060:	2300      	movs	r3, #0
 8006062:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006064:	9320      	str	r3, [sp, #128]	@ 0x80
 8006066:	f04f 33ff 	mov.w	r3, #4294967295
 800606a:	2200      	movs	r2, #0
 800606c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006070:	2312      	movs	r3, #18
 8006072:	e7d0      	b.n	8006016 <_dtoa_r+0x23e>
 8006074:	2301      	movs	r3, #1
 8006076:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006078:	e7f5      	b.n	8006066 <_dtoa_r+0x28e>
 800607a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800607c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006080:	e7d7      	b.n	8006032 <_dtoa_r+0x25a>
 8006082:	3101      	adds	r1, #1
 8006084:	0052      	lsls	r2, r2, #1
 8006086:	e7d8      	b.n	800603a <_dtoa_r+0x262>
 8006088:	636f4361 	.word	0x636f4361
 800608c:	3fd287a7 	.word	0x3fd287a7
 8006090:	8b60c8b3 	.word	0x8b60c8b3
 8006094:	3fc68a28 	.word	0x3fc68a28
 8006098:	509f79fb 	.word	0x509f79fb
 800609c:	3fd34413 	.word	0x3fd34413
 80060a0:	08007b26 	.word	0x08007b26
 80060a4:	08007b3d 	.word	0x08007b3d
 80060a8:	7ff00000 	.word	0x7ff00000
 80060ac:	08007b22 	.word	0x08007b22
 80060b0:	08007ab0 	.word	0x08007ab0
 80060b4:	08007aaf 	.word	0x08007aaf
 80060b8:	3ff80000 	.word	0x3ff80000
 80060bc:	08007c38 	.word	0x08007c38
 80060c0:	08007b95 	.word	0x08007b95
 80060c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80060c8:	6018      	str	r0, [r3, #0]
 80060ca:	9b07      	ldr	r3, [sp, #28]
 80060cc:	2b0e      	cmp	r3, #14
 80060ce:	f200 80a4 	bhi.w	800621a <_dtoa_r+0x442>
 80060d2:	2c00      	cmp	r4, #0
 80060d4:	f000 80a1 	beq.w	800621a <_dtoa_r+0x442>
 80060d8:	2f00      	cmp	r7, #0
 80060da:	dd33      	ble.n	8006144 <_dtoa_r+0x36c>
 80060dc:	4b86      	ldr	r3, [pc, #536]	@ (80062f8 <_dtoa_r+0x520>)
 80060de:	f007 020f 	and.w	r2, r7, #15
 80060e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060e6:	05f8      	lsls	r0, r7, #23
 80060e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80060ec:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80060f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80060f4:	d516      	bpl.n	8006124 <_dtoa_r+0x34c>
 80060f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80060fa:	4b80      	ldr	r3, [pc, #512]	@ (80062fc <_dtoa_r+0x524>)
 80060fc:	2603      	movs	r6, #3
 80060fe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006102:	f7fa fb13 	bl	800072c <__aeabi_ddiv>
 8006106:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800610a:	f004 040f 	and.w	r4, r4, #15
 800610e:	4d7b      	ldr	r5, [pc, #492]	@ (80062fc <_dtoa_r+0x524>)
 8006110:	b954      	cbnz	r4, 8006128 <_dtoa_r+0x350>
 8006112:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006116:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800611a:	f7fa fb07 	bl	800072c <__aeabi_ddiv>
 800611e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006122:	e028      	b.n	8006176 <_dtoa_r+0x39e>
 8006124:	2602      	movs	r6, #2
 8006126:	e7f2      	b.n	800610e <_dtoa_r+0x336>
 8006128:	07e1      	lsls	r1, r4, #31
 800612a:	d508      	bpl.n	800613e <_dtoa_r+0x366>
 800612c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006130:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006134:	f7fa f9d0 	bl	80004d8 <__aeabi_dmul>
 8006138:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800613c:	3601      	adds	r6, #1
 800613e:	1064      	asrs	r4, r4, #1
 8006140:	3508      	adds	r5, #8
 8006142:	e7e5      	b.n	8006110 <_dtoa_r+0x338>
 8006144:	f000 80d2 	beq.w	80062ec <_dtoa_r+0x514>
 8006148:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800614c:	427c      	negs	r4, r7
 800614e:	4b6a      	ldr	r3, [pc, #424]	@ (80062f8 <_dtoa_r+0x520>)
 8006150:	f004 020f 	and.w	r2, r4, #15
 8006154:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800615c:	f7fa f9bc 	bl	80004d8 <__aeabi_dmul>
 8006160:	2602      	movs	r6, #2
 8006162:	2300      	movs	r3, #0
 8006164:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006168:	4d64      	ldr	r5, [pc, #400]	@ (80062fc <_dtoa_r+0x524>)
 800616a:	1124      	asrs	r4, r4, #4
 800616c:	2c00      	cmp	r4, #0
 800616e:	f040 80b2 	bne.w	80062d6 <_dtoa_r+0x4fe>
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1d3      	bne.n	800611e <_dtoa_r+0x346>
 8006176:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800617a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 80b7 	beq.w	80062f0 <_dtoa_r+0x518>
 8006182:	2200      	movs	r2, #0
 8006184:	4620      	mov	r0, r4
 8006186:	4629      	mov	r1, r5
 8006188:	4b5d      	ldr	r3, [pc, #372]	@ (8006300 <_dtoa_r+0x528>)
 800618a:	f7fa fc17 	bl	80009bc <__aeabi_dcmplt>
 800618e:	2800      	cmp	r0, #0
 8006190:	f000 80ae 	beq.w	80062f0 <_dtoa_r+0x518>
 8006194:	9b07      	ldr	r3, [sp, #28]
 8006196:	2b00      	cmp	r3, #0
 8006198:	f000 80aa 	beq.w	80062f0 <_dtoa_r+0x518>
 800619c:	9b08      	ldr	r3, [sp, #32]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	dd37      	ble.n	8006212 <_dtoa_r+0x43a>
 80061a2:	1e7b      	subs	r3, r7, #1
 80061a4:	4620      	mov	r0, r4
 80061a6:	9304      	str	r3, [sp, #16]
 80061a8:	2200      	movs	r2, #0
 80061aa:	4629      	mov	r1, r5
 80061ac:	4b55      	ldr	r3, [pc, #340]	@ (8006304 <_dtoa_r+0x52c>)
 80061ae:	f7fa f993 	bl	80004d8 <__aeabi_dmul>
 80061b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061b6:	9c08      	ldr	r4, [sp, #32]
 80061b8:	3601      	adds	r6, #1
 80061ba:	4630      	mov	r0, r6
 80061bc:	f7fa f922 	bl	8000404 <__aeabi_i2d>
 80061c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061c4:	f7fa f988 	bl	80004d8 <__aeabi_dmul>
 80061c8:	2200      	movs	r2, #0
 80061ca:	4b4f      	ldr	r3, [pc, #316]	@ (8006308 <_dtoa_r+0x530>)
 80061cc:	f7f9 ffce 	bl	800016c <__adddf3>
 80061d0:	4605      	mov	r5, r0
 80061d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80061d6:	2c00      	cmp	r4, #0
 80061d8:	f040 809a 	bne.w	8006310 <_dtoa_r+0x538>
 80061dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061e0:	2200      	movs	r2, #0
 80061e2:	4b4a      	ldr	r3, [pc, #296]	@ (800630c <_dtoa_r+0x534>)
 80061e4:	f7f9 ffc0 	bl	8000168 <__aeabi_dsub>
 80061e8:	4602      	mov	r2, r0
 80061ea:	460b      	mov	r3, r1
 80061ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80061f0:	462a      	mov	r2, r5
 80061f2:	4633      	mov	r3, r6
 80061f4:	f7fa fc00 	bl	80009f8 <__aeabi_dcmpgt>
 80061f8:	2800      	cmp	r0, #0
 80061fa:	f040 828e 	bne.w	800671a <_dtoa_r+0x942>
 80061fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006202:	462a      	mov	r2, r5
 8006204:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006208:	f7fa fbd8 	bl	80009bc <__aeabi_dcmplt>
 800620c:	2800      	cmp	r0, #0
 800620e:	f040 8127 	bne.w	8006460 <_dtoa_r+0x688>
 8006212:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006216:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800621a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800621c:	2b00      	cmp	r3, #0
 800621e:	f2c0 8163 	blt.w	80064e8 <_dtoa_r+0x710>
 8006222:	2f0e      	cmp	r7, #14
 8006224:	f300 8160 	bgt.w	80064e8 <_dtoa_r+0x710>
 8006228:	4b33      	ldr	r3, [pc, #204]	@ (80062f8 <_dtoa_r+0x520>)
 800622a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800622e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006232:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006236:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006238:	2b00      	cmp	r3, #0
 800623a:	da03      	bge.n	8006244 <_dtoa_r+0x46c>
 800623c:	9b07      	ldr	r3, [sp, #28]
 800623e:	2b00      	cmp	r3, #0
 8006240:	f340 8100 	ble.w	8006444 <_dtoa_r+0x66c>
 8006244:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006248:	4656      	mov	r6, sl
 800624a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800624e:	4620      	mov	r0, r4
 8006250:	4629      	mov	r1, r5
 8006252:	f7fa fa6b 	bl	800072c <__aeabi_ddiv>
 8006256:	f7fa fbef 	bl	8000a38 <__aeabi_d2iz>
 800625a:	4680      	mov	r8, r0
 800625c:	f7fa f8d2 	bl	8000404 <__aeabi_i2d>
 8006260:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006264:	f7fa f938 	bl	80004d8 <__aeabi_dmul>
 8006268:	4602      	mov	r2, r0
 800626a:	460b      	mov	r3, r1
 800626c:	4620      	mov	r0, r4
 800626e:	4629      	mov	r1, r5
 8006270:	f7f9 ff7a 	bl	8000168 <__aeabi_dsub>
 8006274:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006278:	9d07      	ldr	r5, [sp, #28]
 800627a:	f806 4b01 	strb.w	r4, [r6], #1
 800627e:	eba6 040a 	sub.w	r4, r6, sl
 8006282:	42a5      	cmp	r5, r4
 8006284:	4602      	mov	r2, r0
 8006286:	460b      	mov	r3, r1
 8006288:	f040 8116 	bne.w	80064b8 <_dtoa_r+0x6e0>
 800628c:	f7f9 ff6e 	bl	800016c <__adddf3>
 8006290:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006294:	4604      	mov	r4, r0
 8006296:	460d      	mov	r5, r1
 8006298:	f7fa fbae 	bl	80009f8 <__aeabi_dcmpgt>
 800629c:	2800      	cmp	r0, #0
 800629e:	f040 80f8 	bne.w	8006492 <_dtoa_r+0x6ba>
 80062a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062a6:	4620      	mov	r0, r4
 80062a8:	4629      	mov	r1, r5
 80062aa:	f7fa fb7d 	bl	80009a8 <__aeabi_dcmpeq>
 80062ae:	b118      	cbz	r0, 80062b8 <_dtoa_r+0x4e0>
 80062b0:	f018 0f01 	tst.w	r8, #1
 80062b4:	f040 80ed 	bne.w	8006492 <_dtoa_r+0x6ba>
 80062b8:	4649      	mov	r1, r9
 80062ba:	4658      	mov	r0, fp
 80062bc:	f000 fbee 	bl	8006a9c <_Bfree>
 80062c0:	2300      	movs	r3, #0
 80062c2:	7033      	strb	r3, [r6, #0]
 80062c4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80062c6:	3701      	adds	r7, #1
 80062c8:	601f      	str	r7, [r3, #0]
 80062ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f000 8320 	beq.w	8006912 <_dtoa_r+0xb3a>
 80062d2:	601e      	str	r6, [r3, #0]
 80062d4:	e31d      	b.n	8006912 <_dtoa_r+0xb3a>
 80062d6:	07e2      	lsls	r2, r4, #31
 80062d8:	d505      	bpl.n	80062e6 <_dtoa_r+0x50e>
 80062da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80062de:	f7fa f8fb 	bl	80004d8 <__aeabi_dmul>
 80062e2:	2301      	movs	r3, #1
 80062e4:	3601      	adds	r6, #1
 80062e6:	1064      	asrs	r4, r4, #1
 80062e8:	3508      	adds	r5, #8
 80062ea:	e73f      	b.n	800616c <_dtoa_r+0x394>
 80062ec:	2602      	movs	r6, #2
 80062ee:	e742      	b.n	8006176 <_dtoa_r+0x39e>
 80062f0:	9c07      	ldr	r4, [sp, #28]
 80062f2:	9704      	str	r7, [sp, #16]
 80062f4:	e761      	b.n	80061ba <_dtoa_r+0x3e2>
 80062f6:	bf00      	nop
 80062f8:	08007c38 	.word	0x08007c38
 80062fc:	08007c10 	.word	0x08007c10
 8006300:	3ff00000 	.word	0x3ff00000
 8006304:	40240000 	.word	0x40240000
 8006308:	401c0000 	.word	0x401c0000
 800630c:	40140000 	.word	0x40140000
 8006310:	4b70      	ldr	r3, [pc, #448]	@ (80064d4 <_dtoa_r+0x6fc>)
 8006312:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006314:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006318:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800631c:	4454      	add	r4, sl
 800631e:	2900      	cmp	r1, #0
 8006320:	d045      	beq.n	80063ae <_dtoa_r+0x5d6>
 8006322:	2000      	movs	r0, #0
 8006324:	496c      	ldr	r1, [pc, #432]	@ (80064d8 <_dtoa_r+0x700>)
 8006326:	f7fa fa01 	bl	800072c <__aeabi_ddiv>
 800632a:	4633      	mov	r3, r6
 800632c:	462a      	mov	r2, r5
 800632e:	f7f9 ff1b 	bl	8000168 <__aeabi_dsub>
 8006332:	4656      	mov	r6, sl
 8006334:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006338:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800633c:	f7fa fb7c 	bl	8000a38 <__aeabi_d2iz>
 8006340:	4605      	mov	r5, r0
 8006342:	f7fa f85f 	bl	8000404 <__aeabi_i2d>
 8006346:	4602      	mov	r2, r0
 8006348:	460b      	mov	r3, r1
 800634a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800634e:	f7f9 ff0b 	bl	8000168 <__aeabi_dsub>
 8006352:	4602      	mov	r2, r0
 8006354:	460b      	mov	r3, r1
 8006356:	3530      	adds	r5, #48	@ 0x30
 8006358:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800635c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006360:	f806 5b01 	strb.w	r5, [r6], #1
 8006364:	f7fa fb2a 	bl	80009bc <__aeabi_dcmplt>
 8006368:	2800      	cmp	r0, #0
 800636a:	d163      	bne.n	8006434 <_dtoa_r+0x65c>
 800636c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006370:	2000      	movs	r0, #0
 8006372:	495a      	ldr	r1, [pc, #360]	@ (80064dc <_dtoa_r+0x704>)
 8006374:	f7f9 fef8 	bl	8000168 <__aeabi_dsub>
 8006378:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800637c:	f7fa fb1e 	bl	80009bc <__aeabi_dcmplt>
 8006380:	2800      	cmp	r0, #0
 8006382:	f040 8087 	bne.w	8006494 <_dtoa_r+0x6bc>
 8006386:	42a6      	cmp	r6, r4
 8006388:	f43f af43 	beq.w	8006212 <_dtoa_r+0x43a>
 800638c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006390:	2200      	movs	r2, #0
 8006392:	4b53      	ldr	r3, [pc, #332]	@ (80064e0 <_dtoa_r+0x708>)
 8006394:	f7fa f8a0 	bl	80004d8 <__aeabi_dmul>
 8006398:	2200      	movs	r2, #0
 800639a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800639e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063a2:	4b4f      	ldr	r3, [pc, #316]	@ (80064e0 <_dtoa_r+0x708>)
 80063a4:	f7fa f898 	bl	80004d8 <__aeabi_dmul>
 80063a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063ac:	e7c4      	b.n	8006338 <_dtoa_r+0x560>
 80063ae:	4631      	mov	r1, r6
 80063b0:	4628      	mov	r0, r5
 80063b2:	f7fa f891 	bl	80004d8 <__aeabi_dmul>
 80063b6:	4656      	mov	r6, sl
 80063b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80063bc:	9413      	str	r4, [sp, #76]	@ 0x4c
 80063be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063c2:	f7fa fb39 	bl	8000a38 <__aeabi_d2iz>
 80063c6:	4605      	mov	r5, r0
 80063c8:	f7fa f81c 	bl	8000404 <__aeabi_i2d>
 80063cc:	4602      	mov	r2, r0
 80063ce:	460b      	mov	r3, r1
 80063d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063d4:	f7f9 fec8 	bl	8000168 <__aeabi_dsub>
 80063d8:	4602      	mov	r2, r0
 80063da:	460b      	mov	r3, r1
 80063dc:	3530      	adds	r5, #48	@ 0x30
 80063de:	f806 5b01 	strb.w	r5, [r6], #1
 80063e2:	42a6      	cmp	r6, r4
 80063e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063e8:	f04f 0200 	mov.w	r2, #0
 80063ec:	d124      	bne.n	8006438 <_dtoa_r+0x660>
 80063ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80063f2:	4b39      	ldr	r3, [pc, #228]	@ (80064d8 <_dtoa_r+0x700>)
 80063f4:	f7f9 feba 	bl	800016c <__adddf3>
 80063f8:	4602      	mov	r2, r0
 80063fa:	460b      	mov	r3, r1
 80063fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006400:	f7fa fafa 	bl	80009f8 <__aeabi_dcmpgt>
 8006404:	2800      	cmp	r0, #0
 8006406:	d145      	bne.n	8006494 <_dtoa_r+0x6bc>
 8006408:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800640c:	2000      	movs	r0, #0
 800640e:	4932      	ldr	r1, [pc, #200]	@ (80064d8 <_dtoa_r+0x700>)
 8006410:	f7f9 feaa 	bl	8000168 <__aeabi_dsub>
 8006414:	4602      	mov	r2, r0
 8006416:	460b      	mov	r3, r1
 8006418:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800641c:	f7fa face 	bl	80009bc <__aeabi_dcmplt>
 8006420:	2800      	cmp	r0, #0
 8006422:	f43f aef6 	beq.w	8006212 <_dtoa_r+0x43a>
 8006426:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006428:	1e73      	subs	r3, r6, #1
 800642a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800642c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006430:	2b30      	cmp	r3, #48	@ 0x30
 8006432:	d0f8      	beq.n	8006426 <_dtoa_r+0x64e>
 8006434:	9f04      	ldr	r7, [sp, #16]
 8006436:	e73f      	b.n	80062b8 <_dtoa_r+0x4e0>
 8006438:	4b29      	ldr	r3, [pc, #164]	@ (80064e0 <_dtoa_r+0x708>)
 800643a:	f7fa f84d 	bl	80004d8 <__aeabi_dmul>
 800643e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006442:	e7bc      	b.n	80063be <_dtoa_r+0x5e6>
 8006444:	d10c      	bne.n	8006460 <_dtoa_r+0x688>
 8006446:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800644a:	2200      	movs	r2, #0
 800644c:	4b25      	ldr	r3, [pc, #148]	@ (80064e4 <_dtoa_r+0x70c>)
 800644e:	f7fa f843 	bl	80004d8 <__aeabi_dmul>
 8006452:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006456:	f7fa fac5 	bl	80009e4 <__aeabi_dcmpge>
 800645a:	2800      	cmp	r0, #0
 800645c:	f000 815b 	beq.w	8006716 <_dtoa_r+0x93e>
 8006460:	2400      	movs	r4, #0
 8006462:	4625      	mov	r5, r4
 8006464:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006466:	4656      	mov	r6, sl
 8006468:	43db      	mvns	r3, r3
 800646a:	9304      	str	r3, [sp, #16]
 800646c:	2700      	movs	r7, #0
 800646e:	4621      	mov	r1, r4
 8006470:	4658      	mov	r0, fp
 8006472:	f000 fb13 	bl	8006a9c <_Bfree>
 8006476:	2d00      	cmp	r5, #0
 8006478:	d0dc      	beq.n	8006434 <_dtoa_r+0x65c>
 800647a:	b12f      	cbz	r7, 8006488 <_dtoa_r+0x6b0>
 800647c:	42af      	cmp	r7, r5
 800647e:	d003      	beq.n	8006488 <_dtoa_r+0x6b0>
 8006480:	4639      	mov	r1, r7
 8006482:	4658      	mov	r0, fp
 8006484:	f000 fb0a 	bl	8006a9c <_Bfree>
 8006488:	4629      	mov	r1, r5
 800648a:	4658      	mov	r0, fp
 800648c:	f000 fb06 	bl	8006a9c <_Bfree>
 8006490:	e7d0      	b.n	8006434 <_dtoa_r+0x65c>
 8006492:	9704      	str	r7, [sp, #16]
 8006494:	4633      	mov	r3, r6
 8006496:	461e      	mov	r6, r3
 8006498:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800649c:	2a39      	cmp	r2, #57	@ 0x39
 800649e:	d107      	bne.n	80064b0 <_dtoa_r+0x6d8>
 80064a0:	459a      	cmp	sl, r3
 80064a2:	d1f8      	bne.n	8006496 <_dtoa_r+0x6be>
 80064a4:	9a04      	ldr	r2, [sp, #16]
 80064a6:	3201      	adds	r2, #1
 80064a8:	9204      	str	r2, [sp, #16]
 80064aa:	2230      	movs	r2, #48	@ 0x30
 80064ac:	f88a 2000 	strb.w	r2, [sl]
 80064b0:	781a      	ldrb	r2, [r3, #0]
 80064b2:	3201      	adds	r2, #1
 80064b4:	701a      	strb	r2, [r3, #0]
 80064b6:	e7bd      	b.n	8006434 <_dtoa_r+0x65c>
 80064b8:	2200      	movs	r2, #0
 80064ba:	4b09      	ldr	r3, [pc, #36]	@ (80064e0 <_dtoa_r+0x708>)
 80064bc:	f7fa f80c 	bl	80004d8 <__aeabi_dmul>
 80064c0:	2200      	movs	r2, #0
 80064c2:	2300      	movs	r3, #0
 80064c4:	4604      	mov	r4, r0
 80064c6:	460d      	mov	r5, r1
 80064c8:	f7fa fa6e 	bl	80009a8 <__aeabi_dcmpeq>
 80064cc:	2800      	cmp	r0, #0
 80064ce:	f43f aebc 	beq.w	800624a <_dtoa_r+0x472>
 80064d2:	e6f1      	b.n	80062b8 <_dtoa_r+0x4e0>
 80064d4:	08007c38 	.word	0x08007c38
 80064d8:	3fe00000 	.word	0x3fe00000
 80064dc:	3ff00000 	.word	0x3ff00000
 80064e0:	40240000 	.word	0x40240000
 80064e4:	40140000 	.word	0x40140000
 80064e8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80064ea:	2a00      	cmp	r2, #0
 80064ec:	f000 80db 	beq.w	80066a6 <_dtoa_r+0x8ce>
 80064f0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80064f2:	2a01      	cmp	r2, #1
 80064f4:	f300 80bf 	bgt.w	8006676 <_dtoa_r+0x89e>
 80064f8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80064fa:	2a00      	cmp	r2, #0
 80064fc:	f000 80b7 	beq.w	800666e <_dtoa_r+0x896>
 8006500:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006504:	4646      	mov	r6, r8
 8006506:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006508:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800650a:	2101      	movs	r1, #1
 800650c:	441a      	add	r2, r3
 800650e:	4658      	mov	r0, fp
 8006510:	4498      	add	r8, r3
 8006512:	9209      	str	r2, [sp, #36]	@ 0x24
 8006514:	f000 fb76 	bl	8006c04 <__i2b>
 8006518:	4605      	mov	r5, r0
 800651a:	b15e      	cbz	r6, 8006534 <_dtoa_r+0x75c>
 800651c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800651e:	2b00      	cmp	r3, #0
 8006520:	dd08      	ble.n	8006534 <_dtoa_r+0x75c>
 8006522:	42b3      	cmp	r3, r6
 8006524:	bfa8      	it	ge
 8006526:	4633      	movge	r3, r6
 8006528:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800652a:	eba8 0803 	sub.w	r8, r8, r3
 800652e:	1af6      	subs	r6, r6, r3
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	9309      	str	r3, [sp, #36]	@ 0x24
 8006534:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006536:	b1f3      	cbz	r3, 8006576 <_dtoa_r+0x79e>
 8006538:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800653a:	2b00      	cmp	r3, #0
 800653c:	f000 80b7 	beq.w	80066ae <_dtoa_r+0x8d6>
 8006540:	b18c      	cbz	r4, 8006566 <_dtoa_r+0x78e>
 8006542:	4629      	mov	r1, r5
 8006544:	4622      	mov	r2, r4
 8006546:	4658      	mov	r0, fp
 8006548:	f000 fc1a 	bl	8006d80 <__pow5mult>
 800654c:	464a      	mov	r2, r9
 800654e:	4601      	mov	r1, r0
 8006550:	4605      	mov	r5, r0
 8006552:	4658      	mov	r0, fp
 8006554:	f000 fb6c 	bl	8006c30 <__multiply>
 8006558:	4649      	mov	r1, r9
 800655a:	9004      	str	r0, [sp, #16]
 800655c:	4658      	mov	r0, fp
 800655e:	f000 fa9d 	bl	8006a9c <_Bfree>
 8006562:	9b04      	ldr	r3, [sp, #16]
 8006564:	4699      	mov	r9, r3
 8006566:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006568:	1b1a      	subs	r2, r3, r4
 800656a:	d004      	beq.n	8006576 <_dtoa_r+0x79e>
 800656c:	4649      	mov	r1, r9
 800656e:	4658      	mov	r0, fp
 8006570:	f000 fc06 	bl	8006d80 <__pow5mult>
 8006574:	4681      	mov	r9, r0
 8006576:	2101      	movs	r1, #1
 8006578:	4658      	mov	r0, fp
 800657a:	f000 fb43 	bl	8006c04 <__i2b>
 800657e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006580:	4604      	mov	r4, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	f000 81c9 	beq.w	800691a <_dtoa_r+0xb42>
 8006588:	461a      	mov	r2, r3
 800658a:	4601      	mov	r1, r0
 800658c:	4658      	mov	r0, fp
 800658e:	f000 fbf7 	bl	8006d80 <__pow5mult>
 8006592:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006594:	4604      	mov	r4, r0
 8006596:	2b01      	cmp	r3, #1
 8006598:	f300 808f 	bgt.w	80066ba <_dtoa_r+0x8e2>
 800659c:	9b02      	ldr	r3, [sp, #8]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f040 8087 	bne.w	80066b2 <_dtoa_r+0x8da>
 80065a4:	9b03      	ldr	r3, [sp, #12]
 80065a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f040 8083 	bne.w	80066b6 <_dtoa_r+0x8de>
 80065b0:	9b03      	ldr	r3, [sp, #12]
 80065b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80065b6:	0d1b      	lsrs	r3, r3, #20
 80065b8:	051b      	lsls	r3, r3, #20
 80065ba:	b12b      	cbz	r3, 80065c8 <_dtoa_r+0x7f0>
 80065bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065be:	f108 0801 	add.w	r8, r8, #1
 80065c2:	3301      	adds	r3, #1
 80065c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80065c6:	2301      	movs	r3, #1
 80065c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80065ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f000 81aa 	beq.w	8006926 <_dtoa_r+0xb4e>
 80065d2:	6923      	ldr	r3, [r4, #16]
 80065d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80065d8:	6918      	ldr	r0, [r3, #16]
 80065da:	f000 fac7 	bl	8006b6c <__hi0bits>
 80065de:	f1c0 0020 	rsb	r0, r0, #32
 80065e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065e4:	4418      	add	r0, r3
 80065e6:	f010 001f 	ands.w	r0, r0, #31
 80065ea:	d071      	beq.n	80066d0 <_dtoa_r+0x8f8>
 80065ec:	f1c0 0320 	rsb	r3, r0, #32
 80065f0:	2b04      	cmp	r3, #4
 80065f2:	dd65      	ble.n	80066c0 <_dtoa_r+0x8e8>
 80065f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065f6:	f1c0 001c 	rsb	r0, r0, #28
 80065fa:	4403      	add	r3, r0
 80065fc:	4480      	add	r8, r0
 80065fe:	4406      	add	r6, r0
 8006600:	9309      	str	r3, [sp, #36]	@ 0x24
 8006602:	f1b8 0f00 	cmp.w	r8, #0
 8006606:	dd05      	ble.n	8006614 <_dtoa_r+0x83c>
 8006608:	4649      	mov	r1, r9
 800660a:	4642      	mov	r2, r8
 800660c:	4658      	mov	r0, fp
 800660e:	f000 fc11 	bl	8006e34 <__lshift>
 8006612:	4681      	mov	r9, r0
 8006614:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006616:	2b00      	cmp	r3, #0
 8006618:	dd05      	ble.n	8006626 <_dtoa_r+0x84e>
 800661a:	4621      	mov	r1, r4
 800661c:	461a      	mov	r2, r3
 800661e:	4658      	mov	r0, fp
 8006620:	f000 fc08 	bl	8006e34 <__lshift>
 8006624:	4604      	mov	r4, r0
 8006626:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006628:	2b00      	cmp	r3, #0
 800662a:	d053      	beq.n	80066d4 <_dtoa_r+0x8fc>
 800662c:	4621      	mov	r1, r4
 800662e:	4648      	mov	r0, r9
 8006630:	f000 fc6c 	bl	8006f0c <__mcmp>
 8006634:	2800      	cmp	r0, #0
 8006636:	da4d      	bge.n	80066d4 <_dtoa_r+0x8fc>
 8006638:	1e7b      	subs	r3, r7, #1
 800663a:	4649      	mov	r1, r9
 800663c:	9304      	str	r3, [sp, #16]
 800663e:	220a      	movs	r2, #10
 8006640:	2300      	movs	r3, #0
 8006642:	4658      	mov	r0, fp
 8006644:	f000 fa4c 	bl	8006ae0 <__multadd>
 8006648:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800664a:	4681      	mov	r9, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 816c 	beq.w	800692a <_dtoa_r+0xb52>
 8006652:	2300      	movs	r3, #0
 8006654:	4629      	mov	r1, r5
 8006656:	220a      	movs	r2, #10
 8006658:	4658      	mov	r0, fp
 800665a:	f000 fa41 	bl	8006ae0 <__multadd>
 800665e:	9b08      	ldr	r3, [sp, #32]
 8006660:	4605      	mov	r5, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	dc61      	bgt.n	800672a <_dtoa_r+0x952>
 8006666:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006668:	2b02      	cmp	r3, #2
 800666a:	dc3b      	bgt.n	80066e4 <_dtoa_r+0x90c>
 800666c:	e05d      	b.n	800672a <_dtoa_r+0x952>
 800666e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006670:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006674:	e746      	b.n	8006504 <_dtoa_r+0x72c>
 8006676:	9b07      	ldr	r3, [sp, #28]
 8006678:	1e5c      	subs	r4, r3, #1
 800667a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800667c:	42a3      	cmp	r3, r4
 800667e:	bfbf      	itttt	lt
 8006680:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006682:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006684:	1ae3      	sublt	r3, r4, r3
 8006686:	18d2      	addlt	r2, r2, r3
 8006688:	bfa8      	it	ge
 800668a:	1b1c      	subge	r4, r3, r4
 800668c:	9b07      	ldr	r3, [sp, #28]
 800668e:	bfbe      	ittt	lt
 8006690:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006692:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006694:	2400      	movlt	r4, #0
 8006696:	2b00      	cmp	r3, #0
 8006698:	bfb5      	itete	lt
 800669a:	eba8 0603 	sublt.w	r6, r8, r3
 800669e:	4646      	movge	r6, r8
 80066a0:	2300      	movlt	r3, #0
 80066a2:	9b07      	ldrge	r3, [sp, #28]
 80066a4:	e730      	b.n	8006508 <_dtoa_r+0x730>
 80066a6:	4646      	mov	r6, r8
 80066a8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80066aa:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80066ac:	e735      	b.n	800651a <_dtoa_r+0x742>
 80066ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80066b0:	e75c      	b.n	800656c <_dtoa_r+0x794>
 80066b2:	2300      	movs	r3, #0
 80066b4:	e788      	b.n	80065c8 <_dtoa_r+0x7f0>
 80066b6:	9b02      	ldr	r3, [sp, #8]
 80066b8:	e786      	b.n	80065c8 <_dtoa_r+0x7f0>
 80066ba:	2300      	movs	r3, #0
 80066bc:	930a      	str	r3, [sp, #40]	@ 0x28
 80066be:	e788      	b.n	80065d2 <_dtoa_r+0x7fa>
 80066c0:	d09f      	beq.n	8006602 <_dtoa_r+0x82a>
 80066c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066c4:	331c      	adds	r3, #28
 80066c6:	441a      	add	r2, r3
 80066c8:	4498      	add	r8, r3
 80066ca:	441e      	add	r6, r3
 80066cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80066ce:	e798      	b.n	8006602 <_dtoa_r+0x82a>
 80066d0:	4603      	mov	r3, r0
 80066d2:	e7f6      	b.n	80066c2 <_dtoa_r+0x8ea>
 80066d4:	9b07      	ldr	r3, [sp, #28]
 80066d6:	9704      	str	r7, [sp, #16]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	dc20      	bgt.n	800671e <_dtoa_r+0x946>
 80066dc:	9308      	str	r3, [sp, #32]
 80066de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	dd1e      	ble.n	8006722 <_dtoa_r+0x94a>
 80066e4:	9b08      	ldr	r3, [sp, #32]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f47f aebc 	bne.w	8006464 <_dtoa_r+0x68c>
 80066ec:	4621      	mov	r1, r4
 80066ee:	2205      	movs	r2, #5
 80066f0:	4658      	mov	r0, fp
 80066f2:	f000 f9f5 	bl	8006ae0 <__multadd>
 80066f6:	4601      	mov	r1, r0
 80066f8:	4604      	mov	r4, r0
 80066fa:	4648      	mov	r0, r9
 80066fc:	f000 fc06 	bl	8006f0c <__mcmp>
 8006700:	2800      	cmp	r0, #0
 8006702:	f77f aeaf 	ble.w	8006464 <_dtoa_r+0x68c>
 8006706:	2331      	movs	r3, #49	@ 0x31
 8006708:	4656      	mov	r6, sl
 800670a:	f806 3b01 	strb.w	r3, [r6], #1
 800670e:	9b04      	ldr	r3, [sp, #16]
 8006710:	3301      	adds	r3, #1
 8006712:	9304      	str	r3, [sp, #16]
 8006714:	e6aa      	b.n	800646c <_dtoa_r+0x694>
 8006716:	9c07      	ldr	r4, [sp, #28]
 8006718:	9704      	str	r7, [sp, #16]
 800671a:	4625      	mov	r5, r4
 800671c:	e7f3      	b.n	8006706 <_dtoa_r+0x92e>
 800671e:	9b07      	ldr	r3, [sp, #28]
 8006720:	9308      	str	r3, [sp, #32]
 8006722:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006724:	2b00      	cmp	r3, #0
 8006726:	f000 8104 	beq.w	8006932 <_dtoa_r+0xb5a>
 800672a:	2e00      	cmp	r6, #0
 800672c:	dd05      	ble.n	800673a <_dtoa_r+0x962>
 800672e:	4629      	mov	r1, r5
 8006730:	4632      	mov	r2, r6
 8006732:	4658      	mov	r0, fp
 8006734:	f000 fb7e 	bl	8006e34 <__lshift>
 8006738:	4605      	mov	r5, r0
 800673a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800673c:	2b00      	cmp	r3, #0
 800673e:	d05a      	beq.n	80067f6 <_dtoa_r+0xa1e>
 8006740:	4658      	mov	r0, fp
 8006742:	6869      	ldr	r1, [r5, #4]
 8006744:	f000 f96a 	bl	8006a1c <_Balloc>
 8006748:	4606      	mov	r6, r0
 800674a:	b928      	cbnz	r0, 8006758 <_dtoa_r+0x980>
 800674c:	4602      	mov	r2, r0
 800674e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006752:	4b83      	ldr	r3, [pc, #524]	@ (8006960 <_dtoa_r+0xb88>)
 8006754:	f7ff bb54 	b.w	8005e00 <_dtoa_r+0x28>
 8006758:	692a      	ldr	r2, [r5, #16]
 800675a:	f105 010c 	add.w	r1, r5, #12
 800675e:	3202      	adds	r2, #2
 8006760:	0092      	lsls	r2, r2, #2
 8006762:	300c      	adds	r0, #12
 8006764:	f7ff fa81 	bl	8005c6a <memcpy>
 8006768:	2201      	movs	r2, #1
 800676a:	4631      	mov	r1, r6
 800676c:	4658      	mov	r0, fp
 800676e:	f000 fb61 	bl	8006e34 <__lshift>
 8006772:	462f      	mov	r7, r5
 8006774:	4605      	mov	r5, r0
 8006776:	f10a 0301 	add.w	r3, sl, #1
 800677a:	9307      	str	r3, [sp, #28]
 800677c:	9b08      	ldr	r3, [sp, #32]
 800677e:	4453      	add	r3, sl
 8006780:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006782:	9b02      	ldr	r3, [sp, #8]
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	930a      	str	r3, [sp, #40]	@ 0x28
 800678a:	9b07      	ldr	r3, [sp, #28]
 800678c:	4621      	mov	r1, r4
 800678e:	3b01      	subs	r3, #1
 8006790:	4648      	mov	r0, r9
 8006792:	9302      	str	r3, [sp, #8]
 8006794:	f7ff fa96 	bl	8005cc4 <quorem>
 8006798:	4639      	mov	r1, r7
 800679a:	9008      	str	r0, [sp, #32]
 800679c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80067a0:	4648      	mov	r0, r9
 80067a2:	f000 fbb3 	bl	8006f0c <__mcmp>
 80067a6:	462a      	mov	r2, r5
 80067a8:	9009      	str	r0, [sp, #36]	@ 0x24
 80067aa:	4621      	mov	r1, r4
 80067ac:	4658      	mov	r0, fp
 80067ae:	f000 fbc9 	bl	8006f44 <__mdiff>
 80067b2:	68c2      	ldr	r2, [r0, #12]
 80067b4:	4606      	mov	r6, r0
 80067b6:	bb02      	cbnz	r2, 80067fa <_dtoa_r+0xa22>
 80067b8:	4601      	mov	r1, r0
 80067ba:	4648      	mov	r0, r9
 80067bc:	f000 fba6 	bl	8006f0c <__mcmp>
 80067c0:	4602      	mov	r2, r0
 80067c2:	4631      	mov	r1, r6
 80067c4:	4658      	mov	r0, fp
 80067c6:	920c      	str	r2, [sp, #48]	@ 0x30
 80067c8:	f000 f968 	bl	8006a9c <_Bfree>
 80067cc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80067ce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80067d0:	9e07      	ldr	r6, [sp, #28]
 80067d2:	ea43 0102 	orr.w	r1, r3, r2
 80067d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067d8:	4319      	orrs	r1, r3
 80067da:	d110      	bne.n	80067fe <_dtoa_r+0xa26>
 80067dc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80067e0:	d029      	beq.n	8006836 <_dtoa_r+0xa5e>
 80067e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	dd02      	ble.n	80067ee <_dtoa_r+0xa16>
 80067e8:	9b08      	ldr	r3, [sp, #32]
 80067ea:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80067ee:	9b02      	ldr	r3, [sp, #8]
 80067f0:	f883 8000 	strb.w	r8, [r3]
 80067f4:	e63b      	b.n	800646e <_dtoa_r+0x696>
 80067f6:	4628      	mov	r0, r5
 80067f8:	e7bb      	b.n	8006772 <_dtoa_r+0x99a>
 80067fa:	2201      	movs	r2, #1
 80067fc:	e7e1      	b.n	80067c2 <_dtoa_r+0x9ea>
 80067fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006800:	2b00      	cmp	r3, #0
 8006802:	db04      	blt.n	800680e <_dtoa_r+0xa36>
 8006804:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006806:	430b      	orrs	r3, r1
 8006808:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800680a:	430b      	orrs	r3, r1
 800680c:	d120      	bne.n	8006850 <_dtoa_r+0xa78>
 800680e:	2a00      	cmp	r2, #0
 8006810:	dded      	ble.n	80067ee <_dtoa_r+0xa16>
 8006812:	4649      	mov	r1, r9
 8006814:	2201      	movs	r2, #1
 8006816:	4658      	mov	r0, fp
 8006818:	f000 fb0c 	bl	8006e34 <__lshift>
 800681c:	4621      	mov	r1, r4
 800681e:	4681      	mov	r9, r0
 8006820:	f000 fb74 	bl	8006f0c <__mcmp>
 8006824:	2800      	cmp	r0, #0
 8006826:	dc03      	bgt.n	8006830 <_dtoa_r+0xa58>
 8006828:	d1e1      	bne.n	80067ee <_dtoa_r+0xa16>
 800682a:	f018 0f01 	tst.w	r8, #1
 800682e:	d0de      	beq.n	80067ee <_dtoa_r+0xa16>
 8006830:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006834:	d1d8      	bne.n	80067e8 <_dtoa_r+0xa10>
 8006836:	2339      	movs	r3, #57	@ 0x39
 8006838:	9a02      	ldr	r2, [sp, #8]
 800683a:	7013      	strb	r3, [r2, #0]
 800683c:	4633      	mov	r3, r6
 800683e:	461e      	mov	r6, r3
 8006840:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006844:	3b01      	subs	r3, #1
 8006846:	2a39      	cmp	r2, #57	@ 0x39
 8006848:	d052      	beq.n	80068f0 <_dtoa_r+0xb18>
 800684a:	3201      	adds	r2, #1
 800684c:	701a      	strb	r2, [r3, #0]
 800684e:	e60e      	b.n	800646e <_dtoa_r+0x696>
 8006850:	2a00      	cmp	r2, #0
 8006852:	dd07      	ble.n	8006864 <_dtoa_r+0xa8c>
 8006854:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006858:	d0ed      	beq.n	8006836 <_dtoa_r+0xa5e>
 800685a:	9a02      	ldr	r2, [sp, #8]
 800685c:	f108 0301 	add.w	r3, r8, #1
 8006860:	7013      	strb	r3, [r2, #0]
 8006862:	e604      	b.n	800646e <_dtoa_r+0x696>
 8006864:	9b07      	ldr	r3, [sp, #28]
 8006866:	9a07      	ldr	r2, [sp, #28]
 8006868:	f803 8c01 	strb.w	r8, [r3, #-1]
 800686c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800686e:	4293      	cmp	r3, r2
 8006870:	d028      	beq.n	80068c4 <_dtoa_r+0xaec>
 8006872:	4649      	mov	r1, r9
 8006874:	2300      	movs	r3, #0
 8006876:	220a      	movs	r2, #10
 8006878:	4658      	mov	r0, fp
 800687a:	f000 f931 	bl	8006ae0 <__multadd>
 800687e:	42af      	cmp	r7, r5
 8006880:	4681      	mov	r9, r0
 8006882:	f04f 0300 	mov.w	r3, #0
 8006886:	f04f 020a 	mov.w	r2, #10
 800688a:	4639      	mov	r1, r7
 800688c:	4658      	mov	r0, fp
 800688e:	d107      	bne.n	80068a0 <_dtoa_r+0xac8>
 8006890:	f000 f926 	bl	8006ae0 <__multadd>
 8006894:	4607      	mov	r7, r0
 8006896:	4605      	mov	r5, r0
 8006898:	9b07      	ldr	r3, [sp, #28]
 800689a:	3301      	adds	r3, #1
 800689c:	9307      	str	r3, [sp, #28]
 800689e:	e774      	b.n	800678a <_dtoa_r+0x9b2>
 80068a0:	f000 f91e 	bl	8006ae0 <__multadd>
 80068a4:	4629      	mov	r1, r5
 80068a6:	4607      	mov	r7, r0
 80068a8:	2300      	movs	r3, #0
 80068aa:	220a      	movs	r2, #10
 80068ac:	4658      	mov	r0, fp
 80068ae:	f000 f917 	bl	8006ae0 <__multadd>
 80068b2:	4605      	mov	r5, r0
 80068b4:	e7f0      	b.n	8006898 <_dtoa_r+0xac0>
 80068b6:	9b08      	ldr	r3, [sp, #32]
 80068b8:	2700      	movs	r7, #0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	bfcc      	ite	gt
 80068be:	461e      	movgt	r6, r3
 80068c0:	2601      	movle	r6, #1
 80068c2:	4456      	add	r6, sl
 80068c4:	4649      	mov	r1, r9
 80068c6:	2201      	movs	r2, #1
 80068c8:	4658      	mov	r0, fp
 80068ca:	f000 fab3 	bl	8006e34 <__lshift>
 80068ce:	4621      	mov	r1, r4
 80068d0:	4681      	mov	r9, r0
 80068d2:	f000 fb1b 	bl	8006f0c <__mcmp>
 80068d6:	2800      	cmp	r0, #0
 80068d8:	dcb0      	bgt.n	800683c <_dtoa_r+0xa64>
 80068da:	d102      	bne.n	80068e2 <_dtoa_r+0xb0a>
 80068dc:	f018 0f01 	tst.w	r8, #1
 80068e0:	d1ac      	bne.n	800683c <_dtoa_r+0xa64>
 80068e2:	4633      	mov	r3, r6
 80068e4:	461e      	mov	r6, r3
 80068e6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068ea:	2a30      	cmp	r2, #48	@ 0x30
 80068ec:	d0fa      	beq.n	80068e4 <_dtoa_r+0xb0c>
 80068ee:	e5be      	b.n	800646e <_dtoa_r+0x696>
 80068f0:	459a      	cmp	sl, r3
 80068f2:	d1a4      	bne.n	800683e <_dtoa_r+0xa66>
 80068f4:	9b04      	ldr	r3, [sp, #16]
 80068f6:	3301      	adds	r3, #1
 80068f8:	9304      	str	r3, [sp, #16]
 80068fa:	2331      	movs	r3, #49	@ 0x31
 80068fc:	f88a 3000 	strb.w	r3, [sl]
 8006900:	e5b5      	b.n	800646e <_dtoa_r+0x696>
 8006902:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006904:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006964 <_dtoa_r+0xb8c>
 8006908:	b11b      	cbz	r3, 8006912 <_dtoa_r+0xb3a>
 800690a:	f10a 0308 	add.w	r3, sl, #8
 800690e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006910:	6013      	str	r3, [r2, #0]
 8006912:	4650      	mov	r0, sl
 8006914:	b017      	add	sp, #92	@ 0x5c
 8006916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800691a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800691c:	2b01      	cmp	r3, #1
 800691e:	f77f ae3d 	ble.w	800659c <_dtoa_r+0x7c4>
 8006922:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006924:	930a      	str	r3, [sp, #40]	@ 0x28
 8006926:	2001      	movs	r0, #1
 8006928:	e65b      	b.n	80065e2 <_dtoa_r+0x80a>
 800692a:	9b08      	ldr	r3, [sp, #32]
 800692c:	2b00      	cmp	r3, #0
 800692e:	f77f aed6 	ble.w	80066de <_dtoa_r+0x906>
 8006932:	4656      	mov	r6, sl
 8006934:	4621      	mov	r1, r4
 8006936:	4648      	mov	r0, r9
 8006938:	f7ff f9c4 	bl	8005cc4 <quorem>
 800693c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006940:	9b08      	ldr	r3, [sp, #32]
 8006942:	f806 8b01 	strb.w	r8, [r6], #1
 8006946:	eba6 020a 	sub.w	r2, r6, sl
 800694a:	4293      	cmp	r3, r2
 800694c:	ddb3      	ble.n	80068b6 <_dtoa_r+0xade>
 800694e:	4649      	mov	r1, r9
 8006950:	2300      	movs	r3, #0
 8006952:	220a      	movs	r2, #10
 8006954:	4658      	mov	r0, fp
 8006956:	f000 f8c3 	bl	8006ae0 <__multadd>
 800695a:	4681      	mov	r9, r0
 800695c:	e7ea      	b.n	8006934 <_dtoa_r+0xb5c>
 800695e:	bf00      	nop
 8006960:	08007b95 	.word	0x08007b95
 8006964:	08007b19 	.word	0x08007b19

08006968 <_free_r>:
 8006968:	b538      	push	{r3, r4, r5, lr}
 800696a:	4605      	mov	r5, r0
 800696c:	2900      	cmp	r1, #0
 800696e:	d040      	beq.n	80069f2 <_free_r+0x8a>
 8006970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006974:	1f0c      	subs	r4, r1, #4
 8006976:	2b00      	cmp	r3, #0
 8006978:	bfb8      	it	lt
 800697a:	18e4      	addlt	r4, r4, r3
 800697c:	f7fe fa66 	bl	8004e4c <__malloc_lock>
 8006980:	4a1c      	ldr	r2, [pc, #112]	@ (80069f4 <_free_r+0x8c>)
 8006982:	6813      	ldr	r3, [r2, #0]
 8006984:	b933      	cbnz	r3, 8006994 <_free_r+0x2c>
 8006986:	6063      	str	r3, [r4, #4]
 8006988:	6014      	str	r4, [r2, #0]
 800698a:	4628      	mov	r0, r5
 800698c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006990:	f7fe ba62 	b.w	8004e58 <__malloc_unlock>
 8006994:	42a3      	cmp	r3, r4
 8006996:	d908      	bls.n	80069aa <_free_r+0x42>
 8006998:	6820      	ldr	r0, [r4, #0]
 800699a:	1821      	adds	r1, r4, r0
 800699c:	428b      	cmp	r3, r1
 800699e:	bf01      	itttt	eq
 80069a0:	6819      	ldreq	r1, [r3, #0]
 80069a2:	685b      	ldreq	r3, [r3, #4]
 80069a4:	1809      	addeq	r1, r1, r0
 80069a6:	6021      	streq	r1, [r4, #0]
 80069a8:	e7ed      	b.n	8006986 <_free_r+0x1e>
 80069aa:	461a      	mov	r2, r3
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	b10b      	cbz	r3, 80069b4 <_free_r+0x4c>
 80069b0:	42a3      	cmp	r3, r4
 80069b2:	d9fa      	bls.n	80069aa <_free_r+0x42>
 80069b4:	6811      	ldr	r1, [r2, #0]
 80069b6:	1850      	adds	r0, r2, r1
 80069b8:	42a0      	cmp	r0, r4
 80069ba:	d10b      	bne.n	80069d4 <_free_r+0x6c>
 80069bc:	6820      	ldr	r0, [r4, #0]
 80069be:	4401      	add	r1, r0
 80069c0:	1850      	adds	r0, r2, r1
 80069c2:	4283      	cmp	r3, r0
 80069c4:	6011      	str	r1, [r2, #0]
 80069c6:	d1e0      	bne.n	800698a <_free_r+0x22>
 80069c8:	6818      	ldr	r0, [r3, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	4408      	add	r0, r1
 80069ce:	6010      	str	r0, [r2, #0]
 80069d0:	6053      	str	r3, [r2, #4]
 80069d2:	e7da      	b.n	800698a <_free_r+0x22>
 80069d4:	d902      	bls.n	80069dc <_free_r+0x74>
 80069d6:	230c      	movs	r3, #12
 80069d8:	602b      	str	r3, [r5, #0]
 80069da:	e7d6      	b.n	800698a <_free_r+0x22>
 80069dc:	6820      	ldr	r0, [r4, #0]
 80069de:	1821      	adds	r1, r4, r0
 80069e0:	428b      	cmp	r3, r1
 80069e2:	bf01      	itttt	eq
 80069e4:	6819      	ldreq	r1, [r3, #0]
 80069e6:	685b      	ldreq	r3, [r3, #4]
 80069e8:	1809      	addeq	r1, r1, r0
 80069ea:	6021      	streq	r1, [r4, #0]
 80069ec:	6063      	str	r3, [r4, #4]
 80069ee:	6054      	str	r4, [r2, #4]
 80069f0:	e7cb      	b.n	800698a <_free_r+0x22>
 80069f2:	bd38      	pop	{r3, r4, r5, pc}
 80069f4:	20000538 	.word	0x20000538

080069f8 <__ascii_mbtowc>:
 80069f8:	b082      	sub	sp, #8
 80069fa:	b901      	cbnz	r1, 80069fe <__ascii_mbtowc+0x6>
 80069fc:	a901      	add	r1, sp, #4
 80069fe:	b142      	cbz	r2, 8006a12 <__ascii_mbtowc+0x1a>
 8006a00:	b14b      	cbz	r3, 8006a16 <__ascii_mbtowc+0x1e>
 8006a02:	7813      	ldrb	r3, [r2, #0]
 8006a04:	600b      	str	r3, [r1, #0]
 8006a06:	7812      	ldrb	r2, [r2, #0]
 8006a08:	1e10      	subs	r0, r2, #0
 8006a0a:	bf18      	it	ne
 8006a0c:	2001      	movne	r0, #1
 8006a0e:	b002      	add	sp, #8
 8006a10:	4770      	bx	lr
 8006a12:	4610      	mov	r0, r2
 8006a14:	e7fb      	b.n	8006a0e <__ascii_mbtowc+0x16>
 8006a16:	f06f 0001 	mvn.w	r0, #1
 8006a1a:	e7f8      	b.n	8006a0e <__ascii_mbtowc+0x16>

08006a1c <_Balloc>:
 8006a1c:	b570      	push	{r4, r5, r6, lr}
 8006a1e:	69c6      	ldr	r6, [r0, #28]
 8006a20:	4604      	mov	r4, r0
 8006a22:	460d      	mov	r5, r1
 8006a24:	b976      	cbnz	r6, 8006a44 <_Balloc+0x28>
 8006a26:	2010      	movs	r0, #16
 8006a28:	f7fe f966 	bl	8004cf8 <malloc>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	61e0      	str	r0, [r4, #28]
 8006a30:	b920      	cbnz	r0, 8006a3c <_Balloc+0x20>
 8006a32:	216b      	movs	r1, #107	@ 0x6b
 8006a34:	4b17      	ldr	r3, [pc, #92]	@ (8006a94 <_Balloc+0x78>)
 8006a36:	4818      	ldr	r0, [pc, #96]	@ (8006a98 <_Balloc+0x7c>)
 8006a38:	f7ff f926 	bl	8005c88 <__assert_func>
 8006a3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a40:	6006      	str	r6, [r0, #0]
 8006a42:	60c6      	str	r6, [r0, #12]
 8006a44:	69e6      	ldr	r6, [r4, #28]
 8006a46:	68f3      	ldr	r3, [r6, #12]
 8006a48:	b183      	cbz	r3, 8006a6c <_Balloc+0x50>
 8006a4a:	69e3      	ldr	r3, [r4, #28]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006a52:	b9b8      	cbnz	r0, 8006a84 <_Balloc+0x68>
 8006a54:	2101      	movs	r1, #1
 8006a56:	fa01 f605 	lsl.w	r6, r1, r5
 8006a5a:	1d72      	adds	r2, r6, #5
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	0092      	lsls	r2, r2, #2
 8006a60:	f000 fded 	bl	800763e <_calloc_r>
 8006a64:	b160      	cbz	r0, 8006a80 <_Balloc+0x64>
 8006a66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a6a:	e00e      	b.n	8006a8a <_Balloc+0x6e>
 8006a6c:	2221      	movs	r2, #33	@ 0x21
 8006a6e:	2104      	movs	r1, #4
 8006a70:	4620      	mov	r0, r4
 8006a72:	f000 fde4 	bl	800763e <_calloc_r>
 8006a76:	69e3      	ldr	r3, [r4, #28]
 8006a78:	60f0      	str	r0, [r6, #12]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1e4      	bne.n	8006a4a <_Balloc+0x2e>
 8006a80:	2000      	movs	r0, #0
 8006a82:	bd70      	pop	{r4, r5, r6, pc}
 8006a84:	6802      	ldr	r2, [r0, #0]
 8006a86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a90:	e7f7      	b.n	8006a82 <_Balloc+0x66>
 8006a92:	bf00      	nop
 8006a94:	08007b26 	.word	0x08007b26
 8006a98:	08007ba6 	.word	0x08007ba6

08006a9c <_Bfree>:
 8006a9c:	b570      	push	{r4, r5, r6, lr}
 8006a9e:	69c6      	ldr	r6, [r0, #28]
 8006aa0:	4605      	mov	r5, r0
 8006aa2:	460c      	mov	r4, r1
 8006aa4:	b976      	cbnz	r6, 8006ac4 <_Bfree+0x28>
 8006aa6:	2010      	movs	r0, #16
 8006aa8:	f7fe f926 	bl	8004cf8 <malloc>
 8006aac:	4602      	mov	r2, r0
 8006aae:	61e8      	str	r0, [r5, #28]
 8006ab0:	b920      	cbnz	r0, 8006abc <_Bfree+0x20>
 8006ab2:	218f      	movs	r1, #143	@ 0x8f
 8006ab4:	4b08      	ldr	r3, [pc, #32]	@ (8006ad8 <_Bfree+0x3c>)
 8006ab6:	4809      	ldr	r0, [pc, #36]	@ (8006adc <_Bfree+0x40>)
 8006ab8:	f7ff f8e6 	bl	8005c88 <__assert_func>
 8006abc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ac0:	6006      	str	r6, [r0, #0]
 8006ac2:	60c6      	str	r6, [r0, #12]
 8006ac4:	b13c      	cbz	r4, 8006ad6 <_Bfree+0x3a>
 8006ac6:	69eb      	ldr	r3, [r5, #28]
 8006ac8:	6862      	ldr	r2, [r4, #4]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ad0:	6021      	str	r1, [r4, #0]
 8006ad2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006ad6:	bd70      	pop	{r4, r5, r6, pc}
 8006ad8:	08007b26 	.word	0x08007b26
 8006adc:	08007ba6 	.word	0x08007ba6

08006ae0 <__multadd>:
 8006ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ae4:	4607      	mov	r7, r0
 8006ae6:	460c      	mov	r4, r1
 8006ae8:	461e      	mov	r6, r3
 8006aea:	2000      	movs	r0, #0
 8006aec:	690d      	ldr	r5, [r1, #16]
 8006aee:	f101 0c14 	add.w	ip, r1, #20
 8006af2:	f8dc 3000 	ldr.w	r3, [ip]
 8006af6:	3001      	adds	r0, #1
 8006af8:	b299      	uxth	r1, r3
 8006afa:	fb02 6101 	mla	r1, r2, r1, r6
 8006afe:	0c1e      	lsrs	r6, r3, #16
 8006b00:	0c0b      	lsrs	r3, r1, #16
 8006b02:	fb02 3306 	mla	r3, r2, r6, r3
 8006b06:	b289      	uxth	r1, r1
 8006b08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006b0c:	4285      	cmp	r5, r0
 8006b0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006b12:	f84c 1b04 	str.w	r1, [ip], #4
 8006b16:	dcec      	bgt.n	8006af2 <__multadd+0x12>
 8006b18:	b30e      	cbz	r6, 8006b5e <__multadd+0x7e>
 8006b1a:	68a3      	ldr	r3, [r4, #8]
 8006b1c:	42ab      	cmp	r3, r5
 8006b1e:	dc19      	bgt.n	8006b54 <__multadd+0x74>
 8006b20:	6861      	ldr	r1, [r4, #4]
 8006b22:	4638      	mov	r0, r7
 8006b24:	3101      	adds	r1, #1
 8006b26:	f7ff ff79 	bl	8006a1c <_Balloc>
 8006b2a:	4680      	mov	r8, r0
 8006b2c:	b928      	cbnz	r0, 8006b3a <__multadd+0x5a>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	21ba      	movs	r1, #186	@ 0xba
 8006b32:	4b0c      	ldr	r3, [pc, #48]	@ (8006b64 <__multadd+0x84>)
 8006b34:	480c      	ldr	r0, [pc, #48]	@ (8006b68 <__multadd+0x88>)
 8006b36:	f7ff f8a7 	bl	8005c88 <__assert_func>
 8006b3a:	6922      	ldr	r2, [r4, #16]
 8006b3c:	f104 010c 	add.w	r1, r4, #12
 8006b40:	3202      	adds	r2, #2
 8006b42:	0092      	lsls	r2, r2, #2
 8006b44:	300c      	adds	r0, #12
 8006b46:	f7ff f890 	bl	8005c6a <memcpy>
 8006b4a:	4621      	mov	r1, r4
 8006b4c:	4638      	mov	r0, r7
 8006b4e:	f7ff ffa5 	bl	8006a9c <_Bfree>
 8006b52:	4644      	mov	r4, r8
 8006b54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b58:	3501      	adds	r5, #1
 8006b5a:	615e      	str	r6, [r3, #20]
 8006b5c:	6125      	str	r5, [r4, #16]
 8006b5e:	4620      	mov	r0, r4
 8006b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b64:	08007b95 	.word	0x08007b95
 8006b68:	08007ba6 	.word	0x08007ba6

08006b6c <__hi0bits>:
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006b72:	bf3a      	itte	cc
 8006b74:	0403      	lslcc	r3, r0, #16
 8006b76:	2010      	movcc	r0, #16
 8006b78:	2000      	movcs	r0, #0
 8006b7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b7e:	bf3c      	itt	cc
 8006b80:	021b      	lslcc	r3, r3, #8
 8006b82:	3008      	addcc	r0, #8
 8006b84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b88:	bf3c      	itt	cc
 8006b8a:	011b      	lslcc	r3, r3, #4
 8006b8c:	3004      	addcc	r0, #4
 8006b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b92:	bf3c      	itt	cc
 8006b94:	009b      	lslcc	r3, r3, #2
 8006b96:	3002      	addcc	r0, #2
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	db05      	blt.n	8006ba8 <__hi0bits+0x3c>
 8006b9c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006ba0:	f100 0001 	add.w	r0, r0, #1
 8006ba4:	bf08      	it	eq
 8006ba6:	2020      	moveq	r0, #32
 8006ba8:	4770      	bx	lr

08006baa <__lo0bits>:
 8006baa:	6803      	ldr	r3, [r0, #0]
 8006bac:	4602      	mov	r2, r0
 8006bae:	f013 0007 	ands.w	r0, r3, #7
 8006bb2:	d00b      	beq.n	8006bcc <__lo0bits+0x22>
 8006bb4:	07d9      	lsls	r1, r3, #31
 8006bb6:	d421      	bmi.n	8006bfc <__lo0bits+0x52>
 8006bb8:	0798      	lsls	r0, r3, #30
 8006bba:	bf49      	itett	mi
 8006bbc:	085b      	lsrmi	r3, r3, #1
 8006bbe:	089b      	lsrpl	r3, r3, #2
 8006bc0:	2001      	movmi	r0, #1
 8006bc2:	6013      	strmi	r3, [r2, #0]
 8006bc4:	bf5c      	itt	pl
 8006bc6:	2002      	movpl	r0, #2
 8006bc8:	6013      	strpl	r3, [r2, #0]
 8006bca:	4770      	bx	lr
 8006bcc:	b299      	uxth	r1, r3
 8006bce:	b909      	cbnz	r1, 8006bd4 <__lo0bits+0x2a>
 8006bd0:	2010      	movs	r0, #16
 8006bd2:	0c1b      	lsrs	r3, r3, #16
 8006bd4:	b2d9      	uxtb	r1, r3
 8006bd6:	b909      	cbnz	r1, 8006bdc <__lo0bits+0x32>
 8006bd8:	3008      	adds	r0, #8
 8006bda:	0a1b      	lsrs	r3, r3, #8
 8006bdc:	0719      	lsls	r1, r3, #28
 8006bde:	bf04      	itt	eq
 8006be0:	091b      	lsreq	r3, r3, #4
 8006be2:	3004      	addeq	r0, #4
 8006be4:	0799      	lsls	r1, r3, #30
 8006be6:	bf04      	itt	eq
 8006be8:	089b      	lsreq	r3, r3, #2
 8006bea:	3002      	addeq	r0, #2
 8006bec:	07d9      	lsls	r1, r3, #31
 8006bee:	d403      	bmi.n	8006bf8 <__lo0bits+0x4e>
 8006bf0:	085b      	lsrs	r3, r3, #1
 8006bf2:	f100 0001 	add.w	r0, r0, #1
 8006bf6:	d003      	beq.n	8006c00 <__lo0bits+0x56>
 8006bf8:	6013      	str	r3, [r2, #0]
 8006bfa:	4770      	bx	lr
 8006bfc:	2000      	movs	r0, #0
 8006bfe:	4770      	bx	lr
 8006c00:	2020      	movs	r0, #32
 8006c02:	4770      	bx	lr

08006c04 <__i2b>:
 8006c04:	b510      	push	{r4, lr}
 8006c06:	460c      	mov	r4, r1
 8006c08:	2101      	movs	r1, #1
 8006c0a:	f7ff ff07 	bl	8006a1c <_Balloc>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	b928      	cbnz	r0, 8006c1e <__i2b+0x1a>
 8006c12:	f240 1145 	movw	r1, #325	@ 0x145
 8006c16:	4b04      	ldr	r3, [pc, #16]	@ (8006c28 <__i2b+0x24>)
 8006c18:	4804      	ldr	r0, [pc, #16]	@ (8006c2c <__i2b+0x28>)
 8006c1a:	f7ff f835 	bl	8005c88 <__assert_func>
 8006c1e:	2301      	movs	r3, #1
 8006c20:	6144      	str	r4, [r0, #20]
 8006c22:	6103      	str	r3, [r0, #16]
 8006c24:	bd10      	pop	{r4, pc}
 8006c26:	bf00      	nop
 8006c28:	08007b95 	.word	0x08007b95
 8006c2c:	08007ba6 	.word	0x08007ba6

08006c30 <__multiply>:
 8006c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c34:	4614      	mov	r4, r2
 8006c36:	690a      	ldr	r2, [r1, #16]
 8006c38:	6923      	ldr	r3, [r4, #16]
 8006c3a:	460f      	mov	r7, r1
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	bfa2      	ittt	ge
 8006c40:	4623      	movge	r3, r4
 8006c42:	460c      	movge	r4, r1
 8006c44:	461f      	movge	r7, r3
 8006c46:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006c4a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006c4e:	68a3      	ldr	r3, [r4, #8]
 8006c50:	6861      	ldr	r1, [r4, #4]
 8006c52:	eb0a 0609 	add.w	r6, sl, r9
 8006c56:	42b3      	cmp	r3, r6
 8006c58:	b085      	sub	sp, #20
 8006c5a:	bfb8      	it	lt
 8006c5c:	3101      	addlt	r1, #1
 8006c5e:	f7ff fedd 	bl	8006a1c <_Balloc>
 8006c62:	b930      	cbnz	r0, 8006c72 <__multiply+0x42>
 8006c64:	4602      	mov	r2, r0
 8006c66:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006c6a:	4b43      	ldr	r3, [pc, #268]	@ (8006d78 <__multiply+0x148>)
 8006c6c:	4843      	ldr	r0, [pc, #268]	@ (8006d7c <__multiply+0x14c>)
 8006c6e:	f7ff f80b 	bl	8005c88 <__assert_func>
 8006c72:	f100 0514 	add.w	r5, r0, #20
 8006c76:	462b      	mov	r3, r5
 8006c78:	2200      	movs	r2, #0
 8006c7a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c7e:	4543      	cmp	r3, r8
 8006c80:	d321      	bcc.n	8006cc6 <__multiply+0x96>
 8006c82:	f107 0114 	add.w	r1, r7, #20
 8006c86:	f104 0214 	add.w	r2, r4, #20
 8006c8a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006c8e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006c92:	9302      	str	r3, [sp, #8]
 8006c94:	1b13      	subs	r3, r2, r4
 8006c96:	3b15      	subs	r3, #21
 8006c98:	f023 0303 	bic.w	r3, r3, #3
 8006c9c:	3304      	adds	r3, #4
 8006c9e:	f104 0715 	add.w	r7, r4, #21
 8006ca2:	42ba      	cmp	r2, r7
 8006ca4:	bf38      	it	cc
 8006ca6:	2304      	movcc	r3, #4
 8006ca8:	9301      	str	r3, [sp, #4]
 8006caa:	9b02      	ldr	r3, [sp, #8]
 8006cac:	9103      	str	r1, [sp, #12]
 8006cae:	428b      	cmp	r3, r1
 8006cb0:	d80c      	bhi.n	8006ccc <__multiply+0x9c>
 8006cb2:	2e00      	cmp	r6, #0
 8006cb4:	dd03      	ble.n	8006cbe <__multiply+0x8e>
 8006cb6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d05a      	beq.n	8006d74 <__multiply+0x144>
 8006cbe:	6106      	str	r6, [r0, #16]
 8006cc0:	b005      	add	sp, #20
 8006cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cc6:	f843 2b04 	str.w	r2, [r3], #4
 8006cca:	e7d8      	b.n	8006c7e <__multiply+0x4e>
 8006ccc:	f8b1 a000 	ldrh.w	sl, [r1]
 8006cd0:	f1ba 0f00 	cmp.w	sl, #0
 8006cd4:	d023      	beq.n	8006d1e <__multiply+0xee>
 8006cd6:	46a9      	mov	r9, r5
 8006cd8:	f04f 0c00 	mov.w	ip, #0
 8006cdc:	f104 0e14 	add.w	lr, r4, #20
 8006ce0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006ce4:	f8d9 3000 	ldr.w	r3, [r9]
 8006ce8:	fa1f fb87 	uxth.w	fp, r7
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	fb0a 330b 	mla	r3, sl, fp, r3
 8006cf2:	4463      	add	r3, ip
 8006cf4:	f8d9 c000 	ldr.w	ip, [r9]
 8006cf8:	0c3f      	lsrs	r7, r7, #16
 8006cfa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006cfe:	fb0a c707 	mla	r7, sl, r7, ip
 8006d02:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006d0c:	4572      	cmp	r2, lr
 8006d0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006d12:	f849 3b04 	str.w	r3, [r9], #4
 8006d16:	d8e3      	bhi.n	8006ce0 <__multiply+0xb0>
 8006d18:	9b01      	ldr	r3, [sp, #4]
 8006d1a:	f845 c003 	str.w	ip, [r5, r3]
 8006d1e:	9b03      	ldr	r3, [sp, #12]
 8006d20:	3104      	adds	r1, #4
 8006d22:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006d26:	f1b9 0f00 	cmp.w	r9, #0
 8006d2a:	d021      	beq.n	8006d70 <__multiply+0x140>
 8006d2c:	46ae      	mov	lr, r5
 8006d2e:	f04f 0a00 	mov.w	sl, #0
 8006d32:	682b      	ldr	r3, [r5, #0]
 8006d34:	f104 0c14 	add.w	ip, r4, #20
 8006d38:	f8bc b000 	ldrh.w	fp, [ip]
 8006d3c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	fb09 770b 	mla	r7, r9, fp, r7
 8006d46:	4457      	add	r7, sl
 8006d48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006d4c:	f84e 3b04 	str.w	r3, [lr], #4
 8006d50:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006d54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d58:	f8be 3000 	ldrh.w	r3, [lr]
 8006d5c:	4562      	cmp	r2, ip
 8006d5e:	fb09 330a 	mla	r3, r9, sl, r3
 8006d62:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006d66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d6a:	d8e5      	bhi.n	8006d38 <__multiply+0x108>
 8006d6c:	9f01      	ldr	r7, [sp, #4]
 8006d6e:	51eb      	str	r3, [r5, r7]
 8006d70:	3504      	adds	r5, #4
 8006d72:	e79a      	b.n	8006caa <__multiply+0x7a>
 8006d74:	3e01      	subs	r6, #1
 8006d76:	e79c      	b.n	8006cb2 <__multiply+0x82>
 8006d78:	08007b95 	.word	0x08007b95
 8006d7c:	08007ba6 	.word	0x08007ba6

08006d80 <__pow5mult>:
 8006d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d84:	4615      	mov	r5, r2
 8006d86:	f012 0203 	ands.w	r2, r2, #3
 8006d8a:	4607      	mov	r7, r0
 8006d8c:	460e      	mov	r6, r1
 8006d8e:	d007      	beq.n	8006da0 <__pow5mult+0x20>
 8006d90:	4c25      	ldr	r4, [pc, #148]	@ (8006e28 <__pow5mult+0xa8>)
 8006d92:	3a01      	subs	r2, #1
 8006d94:	2300      	movs	r3, #0
 8006d96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d9a:	f7ff fea1 	bl	8006ae0 <__multadd>
 8006d9e:	4606      	mov	r6, r0
 8006da0:	10ad      	asrs	r5, r5, #2
 8006da2:	d03d      	beq.n	8006e20 <__pow5mult+0xa0>
 8006da4:	69fc      	ldr	r4, [r7, #28]
 8006da6:	b97c      	cbnz	r4, 8006dc8 <__pow5mult+0x48>
 8006da8:	2010      	movs	r0, #16
 8006daa:	f7fd ffa5 	bl	8004cf8 <malloc>
 8006dae:	4602      	mov	r2, r0
 8006db0:	61f8      	str	r0, [r7, #28]
 8006db2:	b928      	cbnz	r0, 8006dc0 <__pow5mult+0x40>
 8006db4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006db8:	4b1c      	ldr	r3, [pc, #112]	@ (8006e2c <__pow5mult+0xac>)
 8006dba:	481d      	ldr	r0, [pc, #116]	@ (8006e30 <__pow5mult+0xb0>)
 8006dbc:	f7fe ff64 	bl	8005c88 <__assert_func>
 8006dc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006dc4:	6004      	str	r4, [r0, #0]
 8006dc6:	60c4      	str	r4, [r0, #12]
 8006dc8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006dcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006dd0:	b94c      	cbnz	r4, 8006de6 <__pow5mult+0x66>
 8006dd2:	f240 2171 	movw	r1, #625	@ 0x271
 8006dd6:	4638      	mov	r0, r7
 8006dd8:	f7ff ff14 	bl	8006c04 <__i2b>
 8006ddc:	2300      	movs	r3, #0
 8006dde:	4604      	mov	r4, r0
 8006de0:	f8c8 0008 	str.w	r0, [r8, #8]
 8006de4:	6003      	str	r3, [r0, #0]
 8006de6:	f04f 0900 	mov.w	r9, #0
 8006dea:	07eb      	lsls	r3, r5, #31
 8006dec:	d50a      	bpl.n	8006e04 <__pow5mult+0x84>
 8006dee:	4631      	mov	r1, r6
 8006df0:	4622      	mov	r2, r4
 8006df2:	4638      	mov	r0, r7
 8006df4:	f7ff ff1c 	bl	8006c30 <__multiply>
 8006df8:	4680      	mov	r8, r0
 8006dfa:	4631      	mov	r1, r6
 8006dfc:	4638      	mov	r0, r7
 8006dfe:	f7ff fe4d 	bl	8006a9c <_Bfree>
 8006e02:	4646      	mov	r6, r8
 8006e04:	106d      	asrs	r5, r5, #1
 8006e06:	d00b      	beq.n	8006e20 <__pow5mult+0xa0>
 8006e08:	6820      	ldr	r0, [r4, #0]
 8006e0a:	b938      	cbnz	r0, 8006e1c <__pow5mult+0x9c>
 8006e0c:	4622      	mov	r2, r4
 8006e0e:	4621      	mov	r1, r4
 8006e10:	4638      	mov	r0, r7
 8006e12:	f7ff ff0d 	bl	8006c30 <__multiply>
 8006e16:	6020      	str	r0, [r4, #0]
 8006e18:	f8c0 9000 	str.w	r9, [r0]
 8006e1c:	4604      	mov	r4, r0
 8006e1e:	e7e4      	b.n	8006dea <__pow5mult+0x6a>
 8006e20:	4630      	mov	r0, r6
 8006e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e26:	bf00      	nop
 8006e28:	08007c00 	.word	0x08007c00
 8006e2c:	08007b26 	.word	0x08007b26
 8006e30:	08007ba6 	.word	0x08007ba6

08006e34 <__lshift>:
 8006e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e38:	460c      	mov	r4, r1
 8006e3a:	4607      	mov	r7, r0
 8006e3c:	4691      	mov	r9, r2
 8006e3e:	6923      	ldr	r3, [r4, #16]
 8006e40:	6849      	ldr	r1, [r1, #4]
 8006e42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006e46:	68a3      	ldr	r3, [r4, #8]
 8006e48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e4c:	f108 0601 	add.w	r6, r8, #1
 8006e50:	42b3      	cmp	r3, r6
 8006e52:	db0b      	blt.n	8006e6c <__lshift+0x38>
 8006e54:	4638      	mov	r0, r7
 8006e56:	f7ff fde1 	bl	8006a1c <_Balloc>
 8006e5a:	4605      	mov	r5, r0
 8006e5c:	b948      	cbnz	r0, 8006e72 <__lshift+0x3e>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006e64:	4b27      	ldr	r3, [pc, #156]	@ (8006f04 <__lshift+0xd0>)
 8006e66:	4828      	ldr	r0, [pc, #160]	@ (8006f08 <__lshift+0xd4>)
 8006e68:	f7fe ff0e 	bl	8005c88 <__assert_func>
 8006e6c:	3101      	adds	r1, #1
 8006e6e:	005b      	lsls	r3, r3, #1
 8006e70:	e7ee      	b.n	8006e50 <__lshift+0x1c>
 8006e72:	2300      	movs	r3, #0
 8006e74:	f100 0114 	add.w	r1, r0, #20
 8006e78:	f100 0210 	add.w	r2, r0, #16
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	4553      	cmp	r3, sl
 8006e80:	db33      	blt.n	8006eea <__lshift+0xb6>
 8006e82:	6920      	ldr	r0, [r4, #16]
 8006e84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e88:	f104 0314 	add.w	r3, r4, #20
 8006e8c:	f019 091f 	ands.w	r9, r9, #31
 8006e90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006e98:	d02b      	beq.n	8006ef2 <__lshift+0xbe>
 8006e9a:	468a      	mov	sl, r1
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f1c9 0e20 	rsb	lr, r9, #32
 8006ea2:	6818      	ldr	r0, [r3, #0]
 8006ea4:	fa00 f009 	lsl.w	r0, r0, r9
 8006ea8:	4310      	orrs	r0, r2
 8006eaa:	f84a 0b04 	str.w	r0, [sl], #4
 8006eae:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eb2:	459c      	cmp	ip, r3
 8006eb4:	fa22 f20e 	lsr.w	r2, r2, lr
 8006eb8:	d8f3      	bhi.n	8006ea2 <__lshift+0x6e>
 8006eba:	ebac 0304 	sub.w	r3, ip, r4
 8006ebe:	3b15      	subs	r3, #21
 8006ec0:	f023 0303 	bic.w	r3, r3, #3
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	f104 0015 	add.w	r0, r4, #21
 8006eca:	4584      	cmp	ip, r0
 8006ecc:	bf38      	it	cc
 8006ece:	2304      	movcc	r3, #4
 8006ed0:	50ca      	str	r2, [r1, r3]
 8006ed2:	b10a      	cbz	r2, 8006ed8 <__lshift+0xa4>
 8006ed4:	f108 0602 	add.w	r6, r8, #2
 8006ed8:	3e01      	subs	r6, #1
 8006eda:	4638      	mov	r0, r7
 8006edc:	4621      	mov	r1, r4
 8006ede:	612e      	str	r6, [r5, #16]
 8006ee0:	f7ff fddc 	bl	8006a9c <_Bfree>
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eea:	f842 0f04 	str.w	r0, [r2, #4]!
 8006eee:	3301      	adds	r3, #1
 8006ef0:	e7c5      	b.n	8006e7e <__lshift+0x4a>
 8006ef2:	3904      	subs	r1, #4
 8006ef4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ef8:	459c      	cmp	ip, r3
 8006efa:	f841 2f04 	str.w	r2, [r1, #4]!
 8006efe:	d8f9      	bhi.n	8006ef4 <__lshift+0xc0>
 8006f00:	e7ea      	b.n	8006ed8 <__lshift+0xa4>
 8006f02:	bf00      	nop
 8006f04:	08007b95 	.word	0x08007b95
 8006f08:	08007ba6 	.word	0x08007ba6

08006f0c <__mcmp>:
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	690a      	ldr	r2, [r1, #16]
 8006f10:	6900      	ldr	r0, [r0, #16]
 8006f12:	b530      	push	{r4, r5, lr}
 8006f14:	1a80      	subs	r0, r0, r2
 8006f16:	d10e      	bne.n	8006f36 <__mcmp+0x2a>
 8006f18:	3314      	adds	r3, #20
 8006f1a:	3114      	adds	r1, #20
 8006f1c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006f20:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006f24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006f28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006f2c:	4295      	cmp	r5, r2
 8006f2e:	d003      	beq.n	8006f38 <__mcmp+0x2c>
 8006f30:	d205      	bcs.n	8006f3e <__mcmp+0x32>
 8006f32:	f04f 30ff 	mov.w	r0, #4294967295
 8006f36:	bd30      	pop	{r4, r5, pc}
 8006f38:	42a3      	cmp	r3, r4
 8006f3a:	d3f3      	bcc.n	8006f24 <__mcmp+0x18>
 8006f3c:	e7fb      	b.n	8006f36 <__mcmp+0x2a>
 8006f3e:	2001      	movs	r0, #1
 8006f40:	e7f9      	b.n	8006f36 <__mcmp+0x2a>
	...

08006f44 <__mdiff>:
 8006f44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f48:	4689      	mov	r9, r1
 8006f4a:	4606      	mov	r6, r0
 8006f4c:	4611      	mov	r1, r2
 8006f4e:	4648      	mov	r0, r9
 8006f50:	4614      	mov	r4, r2
 8006f52:	f7ff ffdb 	bl	8006f0c <__mcmp>
 8006f56:	1e05      	subs	r5, r0, #0
 8006f58:	d112      	bne.n	8006f80 <__mdiff+0x3c>
 8006f5a:	4629      	mov	r1, r5
 8006f5c:	4630      	mov	r0, r6
 8006f5e:	f7ff fd5d 	bl	8006a1c <_Balloc>
 8006f62:	4602      	mov	r2, r0
 8006f64:	b928      	cbnz	r0, 8006f72 <__mdiff+0x2e>
 8006f66:	f240 2137 	movw	r1, #567	@ 0x237
 8006f6a:	4b3e      	ldr	r3, [pc, #248]	@ (8007064 <__mdiff+0x120>)
 8006f6c:	483e      	ldr	r0, [pc, #248]	@ (8007068 <__mdiff+0x124>)
 8006f6e:	f7fe fe8b 	bl	8005c88 <__assert_func>
 8006f72:	2301      	movs	r3, #1
 8006f74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f78:	4610      	mov	r0, r2
 8006f7a:	b003      	add	sp, #12
 8006f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f80:	bfbc      	itt	lt
 8006f82:	464b      	movlt	r3, r9
 8006f84:	46a1      	movlt	r9, r4
 8006f86:	4630      	mov	r0, r6
 8006f88:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006f8c:	bfba      	itte	lt
 8006f8e:	461c      	movlt	r4, r3
 8006f90:	2501      	movlt	r5, #1
 8006f92:	2500      	movge	r5, #0
 8006f94:	f7ff fd42 	bl	8006a1c <_Balloc>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	b918      	cbnz	r0, 8006fa4 <__mdiff+0x60>
 8006f9c:	f240 2145 	movw	r1, #581	@ 0x245
 8006fa0:	4b30      	ldr	r3, [pc, #192]	@ (8007064 <__mdiff+0x120>)
 8006fa2:	e7e3      	b.n	8006f6c <__mdiff+0x28>
 8006fa4:	f100 0b14 	add.w	fp, r0, #20
 8006fa8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006fac:	f109 0310 	add.w	r3, r9, #16
 8006fb0:	60c5      	str	r5, [r0, #12]
 8006fb2:	f04f 0c00 	mov.w	ip, #0
 8006fb6:	f109 0514 	add.w	r5, r9, #20
 8006fba:	46d9      	mov	r9, fp
 8006fbc:	6926      	ldr	r6, [r4, #16]
 8006fbe:	f104 0e14 	add.w	lr, r4, #20
 8006fc2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006fc6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006fca:	9301      	str	r3, [sp, #4]
 8006fcc:	9b01      	ldr	r3, [sp, #4]
 8006fce:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006fd2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006fd6:	b281      	uxth	r1, r0
 8006fd8:	9301      	str	r3, [sp, #4]
 8006fda:	fa1f f38a 	uxth.w	r3, sl
 8006fde:	1a5b      	subs	r3, r3, r1
 8006fe0:	0c00      	lsrs	r0, r0, #16
 8006fe2:	4463      	add	r3, ip
 8006fe4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006fe8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006ff2:	4576      	cmp	r6, lr
 8006ff4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006ff8:	f849 3b04 	str.w	r3, [r9], #4
 8006ffc:	d8e6      	bhi.n	8006fcc <__mdiff+0x88>
 8006ffe:	1b33      	subs	r3, r6, r4
 8007000:	3b15      	subs	r3, #21
 8007002:	f023 0303 	bic.w	r3, r3, #3
 8007006:	3415      	adds	r4, #21
 8007008:	3304      	adds	r3, #4
 800700a:	42a6      	cmp	r6, r4
 800700c:	bf38      	it	cc
 800700e:	2304      	movcc	r3, #4
 8007010:	441d      	add	r5, r3
 8007012:	445b      	add	r3, fp
 8007014:	461e      	mov	r6, r3
 8007016:	462c      	mov	r4, r5
 8007018:	4544      	cmp	r4, r8
 800701a:	d30e      	bcc.n	800703a <__mdiff+0xf6>
 800701c:	f108 0103 	add.w	r1, r8, #3
 8007020:	1b49      	subs	r1, r1, r5
 8007022:	f021 0103 	bic.w	r1, r1, #3
 8007026:	3d03      	subs	r5, #3
 8007028:	45a8      	cmp	r8, r5
 800702a:	bf38      	it	cc
 800702c:	2100      	movcc	r1, #0
 800702e:	440b      	add	r3, r1
 8007030:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007034:	b199      	cbz	r1, 800705e <__mdiff+0x11a>
 8007036:	6117      	str	r7, [r2, #16]
 8007038:	e79e      	b.n	8006f78 <__mdiff+0x34>
 800703a:	46e6      	mov	lr, ip
 800703c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007040:	fa1f fc81 	uxth.w	ip, r1
 8007044:	44f4      	add	ip, lr
 8007046:	0c08      	lsrs	r0, r1, #16
 8007048:	4471      	add	r1, lr
 800704a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800704e:	b289      	uxth	r1, r1
 8007050:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007054:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007058:	f846 1b04 	str.w	r1, [r6], #4
 800705c:	e7dc      	b.n	8007018 <__mdiff+0xd4>
 800705e:	3f01      	subs	r7, #1
 8007060:	e7e6      	b.n	8007030 <__mdiff+0xec>
 8007062:	bf00      	nop
 8007064:	08007b95 	.word	0x08007b95
 8007068:	08007ba6 	.word	0x08007ba6

0800706c <__d2b>:
 800706c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007070:	2101      	movs	r1, #1
 8007072:	4690      	mov	r8, r2
 8007074:	4699      	mov	r9, r3
 8007076:	9e08      	ldr	r6, [sp, #32]
 8007078:	f7ff fcd0 	bl	8006a1c <_Balloc>
 800707c:	4604      	mov	r4, r0
 800707e:	b930      	cbnz	r0, 800708e <__d2b+0x22>
 8007080:	4602      	mov	r2, r0
 8007082:	f240 310f 	movw	r1, #783	@ 0x30f
 8007086:	4b23      	ldr	r3, [pc, #140]	@ (8007114 <__d2b+0xa8>)
 8007088:	4823      	ldr	r0, [pc, #140]	@ (8007118 <__d2b+0xac>)
 800708a:	f7fe fdfd 	bl	8005c88 <__assert_func>
 800708e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007092:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007096:	b10d      	cbz	r5, 800709c <__d2b+0x30>
 8007098:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800709c:	9301      	str	r3, [sp, #4]
 800709e:	f1b8 0300 	subs.w	r3, r8, #0
 80070a2:	d024      	beq.n	80070ee <__d2b+0x82>
 80070a4:	4668      	mov	r0, sp
 80070a6:	9300      	str	r3, [sp, #0]
 80070a8:	f7ff fd7f 	bl	8006baa <__lo0bits>
 80070ac:	e9dd 1200 	ldrd	r1, r2, [sp]
 80070b0:	b1d8      	cbz	r0, 80070ea <__d2b+0x7e>
 80070b2:	f1c0 0320 	rsb	r3, r0, #32
 80070b6:	fa02 f303 	lsl.w	r3, r2, r3
 80070ba:	430b      	orrs	r3, r1
 80070bc:	40c2      	lsrs	r2, r0
 80070be:	6163      	str	r3, [r4, #20]
 80070c0:	9201      	str	r2, [sp, #4]
 80070c2:	9b01      	ldr	r3, [sp, #4]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	bf0c      	ite	eq
 80070c8:	2201      	moveq	r2, #1
 80070ca:	2202      	movne	r2, #2
 80070cc:	61a3      	str	r3, [r4, #24]
 80070ce:	6122      	str	r2, [r4, #16]
 80070d0:	b1ad      	cbz	r5, 80070fe <__d2b+0x92>
 80070d2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80070d6:	4405      	add	r5, r0
 80070d8:	6035      	str	r5, [r6, #0]
 80070da:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80070de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070e0:	6018      	str	r0, [r3, #0]
 80070e2:	4620      	mov	r0, r4
 80070e4:	b002      	add	sp, #8
 80070e6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80070ea:	6161      	str	r1, [r4, #20]
 80070ec:	e7e9      	b.n	80070c2 <__d2b+0x56>
 80070ee:	a801      	add	r0, sp, #4
 80070f0:	f7ff fd5b 	bl	8006baa <__lo0bits>
 80070f4:	9b01      	ldr	r3, [sp, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	6163      	str	r3, [r4, #20]
 80070fa:	3020      	adds	r0, #32
 80070fc:	e7e7      	b.n	80070ce <__d2b+0x62>
 80070fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007102:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007106:	6030      	str	r0, [r6, #0]
 8007108:	6918      	ldr	r0, [r3, #16]
 800710a:	f7ff fd2f 	bl	8006b6c <__hi0bits>
 800710e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007112:	e7e4      	b.n	80070de <__d2b+0x72>
 8007114:	08007b95 	.word	0x08007b95
 8007118:	08007ba6 	.word	0x08007ba6

0800711c <__ascii_wctomb>:
 800711c:	4603      	mov	r3, r0
 800711e:	4608      	mov	r0, r1
 8007120:	b141      	cbz	r1, 8007134 <__ascii_wctomb+0x18>
 8007122:	2aff      	cmp	r2, #255	@ 0xff
 8007124:	d904      	bls.n	8007130 <__ascii_wctomb+0x14>
 8007126:	228a      	movs	r2, #138	@ 0x8a
 8007128:	f04f 30ff 	mov.w	r0, #4294967295
 800712c:	601a      	str	r2, [r3, #0]
 800712e:	4770      	bx	lr
 8007130:	2001      	movs	r0, #1
 8007132:	700a      	strb	r2, [r1, #0]
 8007134:	4770      	bx	lr

08007136 <__sfputc_r>:
 8007136:	6893      	ldr	r3, [r2, #8]
 8007138:	b410      	push	{r4}
 800713a:	3b01      	subs	r3, #1
 800713c:	2b00      	cmp	r3, #0
 800713e:	6093      	str	r3, [r2, #8]
 8007140:	da07      	bge.n	8007152 <__sfputc_r+0x1c>
 8007142:	6994      	ldr	r4, [r2, #24]
 8007144:	42a3      	cmp	r3, r4
 8007146:	db01      	blt.n	800714c <__sfputc_r+0x16>
 8007148:	290a      	cmp	r1, #10
 800714a:	d102      	bne.n	8007152 <__sfputc_r+0x1c>
 800714c:	bc10      	pop	{r4}
 800714e:	f7fe bc5a 	b.w	8005a06 <__swbuf_r>
 8007152:	6813      	ldr	r3, [r2, #0]
 8007154:	1c58      	adds	r0, r3, #1
 8007156:	6010      	str	r0, [r2, #0]
 8007158:	7019      	strb	r1, [r3, #0]
 800715a:	4608      	mov	r0, r1
 800715c:	bc10      	pop	{r4}
 800715e:	4770      	bx	lr

08007160 <__sfputs_r>:
 8007160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007162:	4606      	mov	r6, r0
 8007164:	460f      	mov	r7, r1
 8007166:	4614      	mov	r4, r2
 8007168:	18d5      	adds	r5, r2, r3
 800716a:	42ac      	cmp	r4, r5
 800716c:	d101      	bne.n	8007172 <__sfputs_r+0x12>
 800716e:	2000      	movs	r0, #0
 8007170:	e007      	b.n	8007182 <__sfputs_r+0x22>
 8007172:	463a      	mov	r2, r7
 8007174:	4630      	mov	r0, r6
 8007176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800717a:	f7ff ffdc 	bl	8007136 <__sfputc_r>
 800717e:	1c43      	adds	r3, r0, #1
 8007180:	d1f3      	bne.n	800716a <__sfputs_r+0xa>
 8007182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007184 <_vfiprintf_r>:
 8007184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007188:	460d      	mov	r5, r1
 800718a:	4614      	mov	r4, r2
 800718c:	4698      	mov	r8, r3
 800718e:	4606      	mov	r6, r0
 8007190:	b09d      	sub	sp, #116	@ 0x74
 8007192:	b118      	cbz	r0, 800719c <_vfiprintf_r+0x18>
 8007194:	6a03      	ldr	r3, [r0, #32]
 8007196:	b90b      	cbnz	r3, 800719c <_vfiprintf_r+0x18>
 8007198:	f7fe fb4c 	bl	8005834 <__sinit>
 800719c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800719e:	07d9      	lsls	r1, r3, #31
 80071a0:	d405      	bmi.n	80071ae <_vfiprintf_r+0x2a>
 80071a2:	89ab      	ldrh	r3, [r5, #12]
 80071a4:	059a      	lsls	r2, r3, #22
 80071a6:	d402      	bmi.n	80071ae <_vfiprintf_r+0x2a>
 80071a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80071aa:	f7fe fd4e 	bl	8005c4a <__retarget_lock_acquire_recursive>
 80071ae:	89ab      	ldrh	r3, [r5, #12]
 80071b0:	071b      	lsls	r3, r3, #28
 80071b2:	d501      	bpl.n	80071b8 <_vfiprintf_r+0x34>
 80071b4:	692b      	ldr	r3, [r5, #16]
 80071b6:	b99b      	cbnz	r3, 80071e0 <_vfiprintf_r+0x5c>
 80071b8:	4629      	mov	r1, r5
 80071ba:	4630      	mov	r0, r6
 80071bc:	f7fe fc62 	bl	8005a84 <__swsetup_r>
 80071c0:	b170      	cbz	r0, 80071e0 <_vfiprintf_r+0x5c>
 80071c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80071c4:	07dc      	lsls	r4, r3, #31
 80071c6:	d504      	bpl.n	80071d2 <_vfiprintf_r+0x4e>
 80071c8:	f04f 30ff 	mov.w	r0, #4294967295
 80071cc:	b01d      	add	sp, #116	@ 0x74
 80071ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d2:	89ab      	ldrh	r3, [r5, #12]
 80071d4:	0598      	lsls	r0, r3, #22
 80071d6:	d4f7      	bmi.n	80071c8 <_vfiprintf_r+0x44>
 80071d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80071da:	f7fe fd37 	bl	8005c4c <__retarget_lock_release_recursive>
 80071de:	e7f3      	b.n	80071c8 <_vfiprintf_r+0x44>
 80071e0:	2300      	movs	r3, #0
 80071e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80071e4:	2320      	movs	r3, #32
 80071e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80071ea:	2330      	movs	r3, #48	@ 0x30
 80071ec:	f04f 0901 	mov.w	r9, #1
 80071f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80071f4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80073a0 <_vfiprintf_r+0x21c>
 80071f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80071fc:	4623      	mov	r3, r4
 80071fe:	469a      	mov	sl, r3
 8007200:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007204:	b10a      	cbz	r2, 800720a <_vfiprintf_r+0x86>
 8007206:	2a25      	cmp	r2, #37	@ 0x25
 8007208:	d1f9      	bne.n	80071fe <_vfiprintf_r+0x7a>
 800720a:	ebba 0b04 	subs.w	fp, sl, r4
 800720e:	d00b      	beq.n	8007228 <_vfiprintf_r+0xa4>
 8007210:	465b      	mov	r3, fp
 8007212:	4622      	mov	r2, r4
 8007214:	4629      	mov	r1, r5
 8007216:	4630      	mov	r0, r6
 8007218:	f7ff ffa2 	bl	8007160 <__sfputs_r>
 800721c:	3001      	adds	r0, #1
 800721e:	f000 80a7 	beq.w	8007370 <_vfiprintf_r+0x1ec>
 8007222:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007224:	445a      	add	r2, fp
 8007226:	9209      	str	r2, [sp, #36]	@ 0x24
 8007228:	f89a 3000 	ldrb.w	r3, [sl]
 800722c:	2b00      	cmp	r3, #0
 800722e:	f000 809f 	beq.w	8007370 <_vfiprintf_r+0x1ec>
 8007232:	2300      	movs	r3, #0
 8007234:	f04f 32ff 	mov.w	r2, #4294967295
 8007238:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800723c:	f10a 0a01 	add.w	sl, sl, #1
 8007240:	9304      	str	r3, [sp, #16]
 8007242:	9307      	str	r3, [sp, #28]
 8007244:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007248:	931a      	str	r3, [sp, #104]	@ 0x68
 800724a:	4654      	mov	r4, sl
 800724c:	2205      	movs	r2, #5
 800724e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007252:	4853      	ldr	r0, [pc, #332]	@ (80073a0 <_vfiprintf_r+0x21c>)
 8007254:	f7fe fcfb 	bl	8005c4e <memchr>
 8007258:	9a04      	ldr	r2, [sp, #16]
 800725a:	b9d8      	cbnz	r0, 8007294 <_vfiprintf_r+0x110>
 800725c:	06d1      	lsls	r1, r2, #27
 800725e:	bf44      	itt	mi
 8007260:	2320      	movmi	r3, #32
 8007262:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007266:	0713      	lsls	r3, r2, #28
 8007268:	bf44      	itt	mi
 800726a:	232b      	movmi	r3, #43	@ 0x2b
 800726c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007270:	f89a 3000 	ldrb.w	r3, [sl]
 8007274:	2b2a      	cmp	r3, #42	@ 0x2a
 8007276:	d015      	beq.n	80072a4 <_vfiprintf_r+0x120>
 8007278:	4654      	mov	r4, sl
 800727a:	2000      	movs	r0, #0
 800727c:	f04f 0c0a 	mov.w	ip, #10
 8007280:	9a07      	ldr	r2, [sp, #28]
 8007282:	4621      	mov	r1, r4
 8007284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007288:	3b30      	subs	r3, #48	@ 0x30
 800728a:	2b09      	cmp	r3, #9
 800728c:	d94b      	bls.n	8007326 <_vfiprintf_r+0x1a2>
 800728e:	b1b0      	cbz	r0, 80072be <_vfiprintf_r+0x13a>
 8007290:	9207      	str	r2, [sp, #28]
 8007292:	e014      	b.n	80072be <_vfiprintf_r+0x13a>
 8007294:	eba0 0308 	sub.w	r3, r0, r8
 8007298:	fa09 f303 	lsl.w	r3, r9, r3
 800729c:	4313      	orrs	r3, r2
 800729e:	46a2      	mov	sl, r4
 80072a0:	9304      	str	r3, [sp, #16]
 80072a2:	e7d2      	b.n	800724a <_vfiprintf_r+0xc6>
 80072a4:	9b03      	ldr	r3, [sp, #12]
 80072a6:	1d19      	adds	r1, r3, #4
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	9103      	str	r1, [sp, #12]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	bfbb      	ittet	lt
 80072b0:	425b      	neglt	r3, r3
 80072b2:	f042 0202 	orrlt.w	r2, r2, #2
 80072b6:	9307      	strge	r3, [sp, #28]
 80072b8:	9307      	strlt	r3, [sp, #28]
 80072ba:	bfb8      	it	lt
 80072bc:	9204      	strlt	r2, [sp, #16]
 80072be:	7823      	ldrb	r3, [r4, #0]
 80072c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80072c2:	d10a      	bne.n	80072da <_vfiprintf_r+0x156>
 80072c4:	7863      	ldrb	r3, [r4, #1]
 80072c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80072c8:	d132      	bne.n	8007330 <_vfiprintf_r+0x1ac>
 80072ca:	9b03      	ldr	r3, [sp, #12]
 80072cc:	3402      	adds	r4, #2
 80072ce:	1d1a      	adds	r2, r3, #4
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	9203      	str	r2, [sp, #12]
 80072d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80072d8:	9305      	str	r3, [sp, #20]
 80072da:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80073a4 <_vfiprintf_r+0x220>
 80072de:	2203      	movs	r2, #3
 80072e0:	4650      	mov	r0, sl
 80072e2:	7821      	ldrb	r1, [r4, #0]
 80072e4:	f7fe fcb3 	bl	8005c4e <memchr>
 80072e8:	b138      	cbz	r0, 80072fa <_vfiprintf_r+0x176>
 80072ea:	2240      	movs	r2, #64	@ 0x40
 80072ec:	9b04      	ldr	r3, [sp, #16]
 80072ee:	eba0 000a 	sub.w	r0, r0, sl
 80072f2:	4082      	lsls	r2, r0
 80072f4:	4313      	orrs	r3, r2
 80072f6:	3401      	adds	r4, #1
 80072f8:	9304      	str	r3, [sp, #16]
 80072fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072fe:	2206      	movs	r2, #6
 8007300:	4829      	ldr	r0, [pc, #164]	@ (80073a8 <_vfiprintf_r+0x224>)
 8007302:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007306:	f7fe fca2 	bl	8005c4e <memchr>
 800730a:	2800      	cmp	r0, #0
 800730c:	d03f      	beq.n	800738e <_vfiprintf_r+0x20a>
 800730e:	4b27      	ldr	r3, [pc, #156]	@ (80073ac <_vfiprintf_r+0x228>)
 8007310:	bb1b      	cbnz	r3, 800735a <_vfiprintf_r+0x1d6>
 8007312:	9b03      	ldr	r3, [sp, #12]
 8007314:	3307      	adds	r3, #7
 8007316:	f023 0307 	bic.w	r3, r3, #7
 800731a:	3308      	adds	r3, #8
 800731c:	9303      	str	r3, [sp, #12]
 800731e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007320:	443b      	add	r3, r7
 8007322:	9309      	str	r3, [sp, #36]	@ 0x24
 8007324:	e76a      	b.n	80071fc <_vfiprintf_r+0x78>
 8007326:	460c      	mov	r4, r1
 8007328:	2001      	movs	r0, #1
 800732a:	fb0c 3202 	mla	r2, ip, r2, r3
 800732e:	e7a8      	b.n	8007282 <_vfiprintf_r+0xfe>
 8007330:	2300      	movs	r3, #0
 8007332:	f04f 0c0a 	mov.w	ip, #10
 8007336:	4619      	mov	r1, r3
 8007338:	3401      	adds	r4, #1
 800733a:	9305      	str	r3, [sp, #20]
 800733c:	4620      	mov	r0, r4
 800733e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007342:	3a30      	subs	r2, #48	@ 0x30
 8007344:	2a09      	cmp	r2, #9
 8007346:	d903      	bls.n	8007350 <_vfiprintf_r+0x1cc>
 8007348:	2b00      	cmp	r3, #0
 800734a:	d0c6      	beq.n	80072da <_vfiprintf_r+0x156>
 800734c:	9105      	str	r1, [sp, #20]
 800734e:	e7c4      	b.n	80072da <_vfiprintf_r+0x156>
 8007350:	4604      	mov	r4, r0
 8007352:	2301      	movs	r3, #1
 8007354:	fb0c 2101 	mla	r1, ip, r1, r2
 8007358:	e7f0      	b.n	800733c <_vfiprintf_r+0x1b8>
 800735a:	ab03      	add	r3, sp, #12
 800735c:	9300      	str	r3, [sp, #0]
 800735e:	462a      	mov	r2, r5
 8007360:	4630      	mov	r0, r6
 8007362:	4b13      	ldr	r3, [pc, #76]	@ (80073b0 <_vfiprintf_r+0x22c>)
 8007364:	a904      	add	r1, sp, #16
 8007366:	f7fd fe1b 	bl	8004fa0 <_printf_float>
 800736a:	4607      	mov	r7, r0
 800736c:	1c78      	adds	r0, r7, #1
 800736e:	d1d6      	bne.n	800731e <_vfiprintf_r+0x19a>
 8007370:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007372:	07d9      	lsls	r1, r3, #31
 8007374:	d405      	bmi.n	8007382 <_vfiprintf_r+0x1fe>
 8007376:	89ab      	ldrh	r3, [r5, #12]
 8007378:	059a      	lsls	r2, r3, #22
 800737a:	d402      	bmi.n	8007382 <_vfiprintf_r+0x1fe>
 800737c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800737e:	f7fe fc65 	bl	8005c4c <__retarget_lock_release_recursive>
 8007382:	89ab      	ldrh	r3, [r5, #12]
 8007384:	065b      	lsls	r3, r3, #25
 8007386:	f53f af1f 	bmi.w	80071c8 <_vfiprintf_r+0x44>
 800738a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800738c:	e71e      	b.n	80071cc <_vfiprintf_r+0x48>
 800738e:	ab03      	add	r3, sp, #12
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	462a      	mov	r2, r5
 8007394:	4630      	mov	r0, r6
 8007396:	4b06      	ldr	r3, [pc, #24]	@ (80073b0 <_vfiprintf_r+0x22c>)
 8007398:	a904      	add	r1, sp, #16
 800739a:	f7fe f89f 	bl	80054dc <_printf_i>
 800739e:	e7e4      	b.n	800736a <_vfiprintf_r+0x1e6>
 80073a0:	08007d00 	.word	0x08007d00
 80073a4:	08007d06 	.word	0x08007d06
 80073a8:	08007d0a 	.word	0x08007d0a
 80073ac:	08004fa1 	.word	0x08004fa1
 80073b0:	08007161 	.word	0x08007161

080073b4 <__sflush_r>:
 80073b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80073b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ba:	0716      	lsls	r6, r2, #28
 80073bc:	4605      	mov	r5, r0
 80073be:	460c      	mov	r4, r1
 80073c0:	d454      	bmi.n	800746c <__sflush_r+0xb8>
 80073c2:	684b      	ldr	r3, [r1, #4]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	dc02      	bgt.n	80073ce <__sflush_r+0x1a>
 80073c8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	dd48      	ble.n	8007460 <__sflush_r+0xac>
 80073ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80073d0:	2e00      	cmp	r6, #0
 80073d2:	d045      	beq.n	8007460 <__sflush_r+0xac>
 80073d4:	2300      	movs	r3, #0
 80073d6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80073da:	682f      	ldr	r7, [r5, #0]
 80073dc:	6a21      	ldr	r1, [r4, #32]
 80073de:	602b      	str	r3, [r5, #0]
 80073e0:	d030      	beq.n	8007444 <__sflush_r+0x90>
 80073e2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80073e4:	89a3      	ldrh	r3, [r4, #12]
 80073e6:	0759      	lsls	r1, r3, #29
 80073e8:	d505      	bpl.n	80073f6 <__sflush_r+0x42>
 80073ea:	6863      	ldr	r3, [r4, #4]
 80073ec:	1ad2      	subs	r2, r2, r3
 80073ee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80073f0:	b10b      	cbz	r3, 80073f6 <__sflush_r+0x42>
 80073f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80073f4:	1ad2      	subs	r2, r2, r3
 80073f6:	2300      	movs	r3, #0
 80073f8:	4628      	mov	r0, r5
 80073fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80073fc:	6a21      	ldr	r1, [r4, #32]
 80073fe:	47b0      	blx	r6
 8007400:	1c43      	adds	r3, r0, #1
 8007402:	89a3      	ldrh	r3, [r4, #12]
 8007404:	d106      	bne.n	8007414 <__sflush_r+0x60>
 8007406:	6829      	ldr	r1, [r5, #0]
 8007408:	291d      	cmp	r1, #29
 800740a:	d82b      	bhi.n	8007464 <__sflush_r+0xb0>
 800740c:	4a28      	ldr	r2, [pc, #160]	@ (80074b0 <__sflush_r+0xfc>)
 800740e:	410a      	asrs	r2, r1
 8007410:	07d6      	lsls	r6, r2, #31
 8007412:	d427      	bmi.n	8007464 <__sflush_r+0xb0>
 8007414:	2200      	movs	r2, #0
 8007416:	6062      	str	r2, [r4, #4]
 8007418:	6922      	ldr	r2, [r4, #16]
 800741a:	04d9      	lsls	r1, r3, #19
 800741c:	6022      	str	r2, [r4, #0]
 800741e:	d504      	bpl.n	800742a <__sflush_r+0x76>
 8007420:	1c42      	adds	r2, r0, #1
 8007422:	d101      	bne.n	8007428 <__sflush_r+0x74>
 8007424:	682b      	ldr	r3, [r5, #0]
 8007426:	b903      	cbnz	r3, 800742a <__sflush_r+0x76>
 8007428:	6560      	str	r0, [r4, #84]	@ 0x54
 800742a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800742c:	602f      	str	r7, [r5, #0]
 800742e:	b1b9      	cbz	r1, 8007460 <__sflush_r+0xac>
 8007430:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007434:	4299      	cmp	r1, r3
 8007436:	d002      	beq.n	800743e <__sflush_r+0x8a>
 8007438:	4628      	mov	r0, r5
 800743a:	f7ff fa95 	bl	8006968 <_free_r>
 800743e:	2300      	movs	r3, #0
 8007440:	6363      	str	r3, [r4, #52]	@ 0x34
 8007442:	e00d      	b.n	8007460 <__sflush_r+0xac>
 8007444:	2301      	movs	r3, #1
 8007446:	4628      	mov	r0, r5
 8007448:	47b0      	blx	r6
 800744a:	4602      	mov	r2, r0
 800744c:	1c50      	adds	r0, r2, #1
 800744e:	d1c9      	bne.n	80073e4 <__sflush_r+0x30>
 8007450:	682b      	ldr	r3, [r5, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d0c6      	beq.n	80073e4 <__sflush_r+0x30>
 8007456:	2b1d      	cmp	r3, #29
 8007458:	d001      	beq.n	800745e <__sflush_r+0xaa>
 800745a:	2b16      	cmp	r3, #22
 800745c:	d11d      	bne.n	800749a <__sflush_r+0xe6>
 800745e:	602f      	str	r7, [r5, #0]
 8007460:	2000      	movs	r0, #0
 8007462:	e021      	b.n	80074a8 <__sflush_r+0xf4>
 8007464:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007468:	b21b      	sxth	r3, r3
 800746a:	e01a      	b.n	80074a2 <__sflush_r+0xee>
 800746c:	690f      	ldr	r7, [r1, #16]
 800746e:	2f00      	cmp	r7, #0
 8007470:	d0f6      	beq.n	8007460 <__sflush_r+0xac>
 8007472:	0793      	lsls	r3, r2, #30
 8007474:	bf18      	it	ne
 8007476:	2300      	movne	r3, #0
 8007478:	680e      	ldr	r6, [r1, #0]
 800747a:	bf08      	it	eq
 800747c:	694b      	ldreq	r3, [r1, #20]
 800747e:	1bf6      	subs	r6, r6, r7
 8007480:	600f      	str	r7, [r1, #0]
 8007482:	608b      	str	r3, [r1, #8]
 8007484:	2e00      	cmp	r6, #0
 8007486:	ddeb      	ble.n	8007460 <__sflush_r+0xac>
 8007488:	4633      	mov	r3, r6
 800748a:	463a      	mov	r2, r7
 800748c:	4628      	mov	r0, r5
 800748e:	6a21      	ldr	r1, [r4, #32]
 8007490:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007494:	47e0      	blx	ip
 8007496:	2800      	cmp	r0, #0
 8007498:	dc07      	bgt.n	80074aa <__sflush_r+0xf6>
 800749a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800749e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074a2:	f04f 30ff 	mov.w	r0, #4294967295
 80074a6:	81a3      	strh	r3, [r4, #12]
 80074a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074aa:	4407      	add	r7, r0
 80074ac:	1a36      	subs	r6, r6, r0
 80074ae:	e7e9      	b.n	8007484 <__sflush_r+0xd0>
 80074b0:	dfbffffe 	.word	0xdfbffffe

080074b4 <_fflush_r>:
 80074b4:	b538      	push	{r3, r4, r5, lr}
 80074b6:	690b      	ldr	r3, [r1, #16]
 80074b8:	4605      	mov	r5, r0
 80074ba:	460c      	mov	r4, r1
 80074bc:	b913      	cbnz	r3, 80074c4 <_fflush_r+0x10>
 80074be:	2500      	movs	r5, #0
 80074c0:	4628      	mov	r0, r5
 80074c2:	bd38      	pop	{r3, r4, r5, pc}
 80074c4:	b118      	cbz	r0, 80074ce <_fflush_r+0x1a>
 80074c6:	6a03      	ldr	r3, [r0, #32]
 80074c8:	b90b      	cbnz	r3, 80074ce <_fflush_r+0x1a>
 80074ca:	f7fe f9b3 	bl	8005834 <__sinit>
 80074ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d0f3      	beq.n	80074be <_fflush_r+0xa>
 80074d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80074d8:	07d0      	lsls	r0, r2, #31
 80074da:	d404      	bmi.n	80074e6 <_fflush_r+0x32>
 80074dc:	0599      	lsls	r1, r3, #22
 80074de:	d402      	bmi.n	80074e6 <_fflush_r+0x32>
 80074e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074e2:	f7fe fbb2 	bl	8005c4a <__retarget_lock_acquire_recursive>
 80074e6:	4628      	mov	r0, r5
 80074e8:	4621      	mov	r1, r4
 80074ea:	f7ff ff63 	bl	80073b4 <__sflush_r>
 80074ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80074f0:	4605      	mov	r5, r0
 80074f2:	07da      	lsls	r2, r3, #31
 80074f4:	d4e4      	bmi.n	80074c0 <_fflush_r+0xc>
 80074f6:	89a3      	ldrh	r3, [r4, #12]
 80074f8:	059b      	lsls	r3, r3, #22
 80074fa:	d4e1      	bmi.n	80074c0 <_fflush_r+0xc>
 80074fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074fe:	f7fe fba5 	bl	8005c4c <__retarget_lock_release_recursive>
 8007502:	e7dd      	b.n	80074c0 <_fflush_r+0xc>

08007504 <fiprintf>:
 8007504:	b40e      	push	{r1, r2, r3}
 8007506:	b503      	push	{r0, r1, lr}
 8007508:	4601      	mov	r1, r0
 800750a:	ab03      	add	r3, sp, #12
 800750c:	4805      	ldr	r0, [pc, #20]	@ (8007524 <fiprintf+0x20>)
 800750e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007512:	6800      	ldr	r0, [r0, #0]
 8007514:	9301      	str	r3, [sp, #4]
 8007516:	f7ff fe35 	bl	8007184 <_vfiprintf_r>
 800751a:	b002      	add	sp, #8
 800751c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007520:	b003      	add	sp, #12
 8007522:	4770      	bx	lr
 8007524:	20000190 	.word	0x20000190

08007528 <__swhatbuf_r>:
 8007528:	b570      	push	{r4, r5, r6, lr}
 800752a:	460c      	mov	r4, r1
 800752c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007530:	4615      	mov	r5, r2
 8007532:	2900      	cmp	r1, #0
 8007534:	461e      	mov	r6, r3
 8007536:	b096      	sub	sp, #88	@ 0x58
 8007538:	da0c      	bge.n	8007554 <__swhatbuf_r+0x2c>
 800753a:	89a3      	ldrh	r3, [r4, #12]
 800753c:	2100      	movs	r1, #0
 800753e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007542:	bf14      	ite	ne
 8007544:	2340      	movne	r3, #64	@ 0x40
 8007546:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800754a:	2000      	movs	r0, #0
 800754c:	6031      	str	r1, [r6, #0]
 800754e:	602b      	str	r3, [r5, #0]
 8007550:	b016      	add	sp, #88	@ 0x58
 8007552:	bd70      	pop	{r4, r5, r6, pc}
 8007554:	466a      	mov	r2, sp
 8007556:	f000 f849 	bl	80075ec <_fstat_r>
 800755a:	2800      	cmp	r0, #0
 800755c:	dbed      	blt.n	800753a <__swhatbuf_r+0x12>
 800755e:	9901      	ldr	r1, [sp, #4]
 8007560:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007564:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007568:	4259      	negs	r1, r3
 800756a:	4159      	adcs	r1, r3
 800756c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007570:	e7eb      	b.n	800754a <__swhatbuf_r+0x22>

08007572 <__smakebuf_r>:
 8007572:	898b      	ldrh	r3, [r1, #12]
 8007574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007576:	079d      	lsls	r5, r3, #30
 8007578:	4606      	mov	r6, r0
 800757a:	460c      	mov	r4, r1
 800757c:	d507      	bpl.n	800758e <__smakebuf_r+0x1c>
 800757e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007582:	6023      	str	r3, [r4, #0]
 8007584:	6123      	str	r3, [r4, #16]
 8007586:	2301      	movs	r3, #1
 8007588:	6163      	str	r3, [r4, #20]
 800758a:	b003      	add	sp, #12
 800758c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800758e:	466a      	mov	r2, sp
 8007590:	ab01      	add	r3, sp, #4
 8007592:	f7ff ffc9 	bl	8007528 <__swhatbuf_r>
 8007596:	9f00      	ldr	r7, [sp, #0]
 8007598:	4605      	mov	r5, r0
 800759a:	4639      	mov	r1, r7
 800759c:	4630      	mov	r0, r6
 800759e:	f7fd fbd5 	bl	8004d4c <_malloc_r>
 80075a2:	b948      	cbnz	r0, 80075b8 <__smakebuf_r+0x46>
 80075a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075a8:	059a      	lsls	r2, r3, #22
 80075aa:	d4ee      	bmi.n	800758a <__smakebuf_r+0x18>
 80075ac:	f023 0303 	bic.w	r3, r3, #3
 80075b0:	f043 0302 	orr.w	r3, r3, #2
 80075b4:	81a3      	strh	r3, [r4, #12]
 80075b6:	e7e2      	b.n	800757e <__smakebuf_r+0xc>
 80075b8:	89a3      	ldrh	r3, [r4, #12]
 80075ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80075be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075c2:	81a3      	strh	r3, [r4, #12]
 80075c4:	9b01      	ldr	r3, [sp, #4]
 80075c6:	6020      	str	r0, [r4, #0]
 80075c8:	b15b      	cbz	r3, 80075e2 <__smakebuf_r+0x70>
 80075ca:	4630      	mov	r0, r6
 80075cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075d0:	f000 f81e 	bl	8007610 <_isatty_r>
 80075d4:	b128      	cbz	r0, 80075e2 <__smakebuf_r+0x70>
 80075d6:	89a3      	ldrh	r3, [r4, #12]
 80075d8:	f023 0303 	bic.w	r3, r3, #3
 80075dc:	f043 0301 	orr.w	r3, r3, #1
 80075e0:	81a3      	strh	r3, [r4, #12]
 80075e2:	89a3      	ldrh	r3, [r4, #12]
 80075e4:	431d      	orrs	r5, r3
 80075e6:	81a5      	strh	r5, [r4, #12]
 80075e8:	e7cf      	b.n	800758a <__smakebuf_r+0x18>
	...

080075ec <_fstat_r>:
 80075ec:	b538      	push	{r3, r4, r5, lr}
 80075ee:	2300      	movs	r3, #0
 80075f0:	4d06      	ldr	r5, [pc, #24]	@ (800760c <_fstat_r+0x20>)
 80075f2:	4604      	mov	r4, r0
 80075f4:	4608      	mov	r0, r1
 80075f6:	4611      	mov	r1, r2
 80075f8:	602b      	str	r3, [r5, #0]
 80075fa:	f7fa f89f 	bl	800173c <_fstat>
 80075fe:	1c43      	adds	r3, r0, #1
 8007600:	d102      	bne.n	8007608 <_fstat_r+0x1c>
 8007602:	682b      	ldr	r3, [r5, #0]
 8007604:	b103      	cbz	r3, 8007608 <_fstat_r+0x1c>
 8007606:	6023      	str	r3, [r4, #0]
 8007608:	bd38      	pop	{r3, r4, r5, pc}
 800760a:	bf00      	nop
 800760c:	20000678 	.word	0x20000678

08007610 <_isatty_r>:
 8007610:	b538      	push	{r3, r4, r5, lr}
 8007612:	2300      	movs	r3, #0
 8007614:	4d05      	ldr	r5, [pc, #20]	@ (800762c <_isatty_r+0x1c>)
 8007616:	4604      	mov	r4, r0
 8007618:	4608      	mov	r0, r1
 800761a:	602b      	str	r3, [r5, #0]
 800761c:	f7fa f89d 	bl	800175a <_isatty>
 8007620:	1c43      	adds	r3, r0, #1
 8007622:	d102      	bne.n	800762a <_isatty_r+0x1a>
 8007624:	682b      	ldr	r3, [r5, #0]
 8007626:	b103      	cbz	r3, 800762a <_isatty_r+0x1a>
 8007628:	6023      	str	r3, [r4, #0]
 800762a:	bd38      	pop	{r3, r4, r5, pc}
 800762c:	20000678 	.word	0x20000678

08007630 <abort>:
 8007630:	2006      	movs	r0, #6
 8007632:	b508      	push	{r3, lr}
 8007634:	f000 f840 	bl	80076b8 <raise>
 8007638:	2001      	movs	r0, #1
 800763a:	f7fa f84c 	bl	80016d6 <_exit>

0800763e <_calloc_r>:
 800763e:	b570      	push	{r4, r5, r6, lr}
 8007640:	fba1 5402 	umull	r5, r4, r1, r2
 8007644:	b93c      	cbnz	r4, 8007656 <_calloc_r+0x18>
 8007646:	4629      	mov	r1, r5
 8007648:	f7fd fb80 	bl	8004d4c <_malloc_r>
 800764c:	4606      	mov	r6, r0
 800764e:	b928      	cbnz	r0, 800765c <_calloc_r+0x1e>
 8007650:	2600      	movs	r6, #0
 8007652:	4630      	mov	r0, r6
 8007654:	bd70      	pop	{r4, r5, r6, pc}
 8007656:	220c      	movs	r2, #12
 8007658:	6002      	str	r2, [r0, #0]
 800765a:	e7f9      	b.n	8007650 <_calloc_r+0x12>
 800765c:	462a      	mov	r2, r5
 800765e:	4621      	mov	r1, r4
 8007660:	f7fe fa66 	bl	8005b30 <memset>
 8007664:	e7f5      	b.n	8007652 <_calloc_r+0x14>

08007666 <_raise_r>:
 8007666:	291f      	cmp	r1, #31
 8007668:	b538      	push	{r3, r4, r5, lr}
 800766a:	4605      	mov	r5, r0
 800766c:	460c      	mov	r4, r1
 800766e:	d904      	bls.n	800767a <_raise_r+0x14>
 8007670:	2316      	movs	r3, #22
 8007672:	6003      	str	r3, [r0, #0]
 8007674:	f04f 30ff 	mov.w	r0, #4294967295
 8007678:	bd38      	pop	{r3, r4, r5, pc}
 800767a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800767c:	b112      	cbz	r2, 8007684 <_raise_r+0x1e>
 800767e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007682:	b94b      	cbnz	r3, 8007698 <_raise_r+0x32>
 8007684:	4628      	mov	r0, r5
 8007686:	f000 f831 	bl	80076ec <_getpid_r>
 800768a:	4622      	mov	r2, r4
 800768c:	4601      	mov	r1, r0
 800768e:	4628      	mov	r0, r5
 8007690:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007694:	f000 b818 	b.w	80076c8 <_kill_r>
 8007698:	2b01      	cmp	r3, #1
 800769a:	d00a      	beq.n	80076b2 <_raise_r+0x4c>
 800769c:	1c59      	adds	r1, r3, #1
 800769e:	d103      	bne.n	80076a8 <_raise_r+0x42>
 80076a0:	2316      	movs	r3, #22
 80076a2:	6003      	str	r3, [r0, #0]
 80076a4:	2001      	movs	r0, #1
 80076a6:	e7e7      	b.n	8007678 <_raise_r+0x12>
 80076a8:	2100      	movs	r1, #0
 80076aa:	4620      	mov	r0, r4
 80076ac:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80076b0:	4798      	blx	r3
 80076b2:	2000      	movs	r0, #0
 80076b4:	e7e0      	b.n	8007678 <_raise_r+0x12>
	...

080076b8 <raise>:
 80076b8:	4b02      	ldr	r3, [pc, #8]	@ (80076c4 <raise+0xc>)
 80076ba:	4601      	mov	r1, r0
 80076bc:	6818      	ldr	r0, [r3, #0]
 80076be:	f7ff bfd2 	b.w	8007666 <_raise_r>
 80076c2:	bf00      	nop
 80076c4:	20000190 	.word	0x20000190

080076c8 <_kill_r>:
 80076c8:	b538      	push	{r3, r4, r5, lr}
 80076ca:	2300      	movs	r3, #0
 80076cc:	4d06      	ldr	r5, [pc, #24]	@ (80076e8 <_kill_r+0x20>)
 80076ce:	4604      	mov	r4, r0
 80076d0:	4608      	mov	r0, r1
 80076d2:	4611      	mov	r1, r2
 80076d4:	602b      	str	r3, [r5, #0]
 80076d6:	f7f9 ffee 	bl	80016b6 <_kill>
 80076da:	1c43      	adds	r3, r0, #1
 80076dc:	d102      	bne.n	80076e4 <_kill_r+0x1c>
 80076de:	682b      	ldr	r3, [r5, #0]
 80076e0:	b103      	cbz	r3, 80076e4 <_kill_r+0x1c>
 80076e2:	6023      	str	r3, [r4, #0]
 80076e4:	bd38      	pop	{r3, r4, r5, pc}
 80076e6:	bf00      	nop
 80076e8:	20000678 	.word	0x20000678

080076ec <_getpid_r>:
 80076ec:	f7f9 bfdc 	b.w	80016a8 <_getpid>

080076f0 <_init>:
 80076f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076f2:	bf00      	nop
 80076f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076f6:	bc08      	pop	{r3}
 80076f8:	469e      	mov	lr, r3
 80076fa:	4770      	bx	lr

080076fc <_fini>:
 80076fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076fe:	bf00      	nop
 8007700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007702:	bc08      	pop	{r3}
 8007704:	469e      	mov	lr, r3
 8007706:	4770      	bx	lr
